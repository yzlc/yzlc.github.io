<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on YZLC</title><link>https://yzlc.github.io/post/</link><description>Recent content in Posts on YZLC</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 05 Oct 2023 21:46:33 +0800</lastBuildDate><atom:link href="https://yzlc.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>第3章　基础工具</title><link>https://yzlc.github.io/post/read/pragmaticprogrammer/3/</link><pubDate>Thu, 05 Oct 2023 21:46:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/pragmaticprogrammer/3/</guid><description>提示27 游刃有余地使用编辑器 怎么才算游刃有余。这里有一个挑战列表： 当编辑文本时，以字符、单词、行、段落为单位移动光标及进行选择。 当编辑代码时</description></item><item><title>第2章　务实的方法</title><link>https://yzlc.github.io/post/read/pragmaticprogrammer/2/</link><pubDate>Thu, 05 Oct 2023 20:52:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/pragmaticprogrammer/2/</guid><description>提示14 优秀的设计比糟糕的设计更容易变更 ETC（Easier To Change，更容易变更） 提示15 DRY——不要重复自己</description></item><item><title>第1章　务实的哲学</title><link>https://yzlc.github.io/post/read/pragmaticprogrammer/1/</link><pubDate>Thu, 05 Oct 2023 20:51:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/pragmaticprogrammer/1/</guid><description>提示9 对知识组合做定期投资 每年学习一门新语言 每月读一本技术书 还要读非技术书 上课 加入本地的用户组和交流群 尝试不同的环境 与时俱进</description></item><item><title>第4章　编写正确的程序</title><link>https://yzlc.github.io/post/read/programmingpearls/4/</link><pubDate>Thu, 05 Oct 2023 12:59:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/programmingpearls/4/</guid><description>4.4 原理 程序的开发需要遵循验证思想 工具：断言 顺序/选择控制结构、函数、迭代控制结构：初始化、保持(不变式)、终止</description></item><item><title>TornadoShot</title><link>https://yzlc.github.io/post/note/poe/bd/tornadoshot/</link><pubDate>Thu, 17 Aug 2023 20:54:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/poe/bd/tornadoshot/</guid><description>一箭三连 第一章 G-G-G：电光箭（Galvanic Arrow）(1)-幻影射手（Mirage Archer Support）(4)-穿透（Pierce Su</description></item><item><title>ek</title><link>https://yzlc.github.io/post/note/poe/bd/ek/</link><pubDate>Fri, 28 Apr 2023 00:24:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/poe/bd/ek/</guid><description>珠宝：https://www.pathofexile.com/trade/search/Crucible/KP8yPogc5 衣： 无悔：htt</description></item><item><title>centos7</title><link>https://yzlc.github.io/post/note/linux/centos7/</link><pubDate>Mon, 03 Apr 2023 15:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/linux/centos7/</guid><description>DNS配置 通过 ifconfig 或 nmcli connection show 命令确定当前使用的网卡名称（如：eth0、eno1 等，以下均以 eno1 为例进行设置） 通过命令 nmcli con mod eno1 ipv4.dns &amp;ldquo;114.114.114.114 8.8.8.8&amp;rdquo; 修改对应网卡的 dns</description></item><item><title>mysql</title><link>https://yzlc.github.io/post/note/win/mysql/</link><pubDate>Wed, 15 Feb 2023 22:45:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/win/mysql/</guid><description>安装 mysql.msi .net4.5.2 vc++2013 卸载 1 2 3 4 5 6 net stop mysql mysqld --remove mysql reg delete HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MYSQL /f reg delete HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\Application\MYSQL /f reg delete HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MYSQL /f rmdir /s/q C:\ProgramData\MYSQL</description></item><item><title>中项</title><link>https://yzlc.github.io/post/note/ruankao/zhongxiang/</link><pubDate>Sat, 28 Jan 2023 16:16:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/ruankao/zhongxiang/</guid><description>科目 资料 上午综合知识(75分)选择题，45及格，9-11:30 下午案例分析(75分)3道简答1道计算，45及格，14-16:30 5/11月份</description></item><item><title>switch</title><link>https://yzlc.github.io/post/note/switch/</link><pubDate>Sun, 08 Jan 2023 17:16:10 +0800</pubDate><guid>https://yzlc.github.io/post/note/switch/</guid><description>大气层 按r键打开游戏 dbi 拖到MicroSD install 资源 bootloader说明</description></item><item><title>xray</title><link>https://yzlc.github.io/post/note/linux/xray/</link><pubDate>Sat, 07 Jan 2023 16:59:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/linux/xray/</guid><description>namesilo unlock Domains change nameservers cloudflare Add a Site DNS Add record Type：A Name：www / @ Content：ip Proxy Status：DNS only（vps操作完成后改为Proxie</description></item><item><title>点燃漩涡</title><link>https://yzlc.github.io/post/note/poe/bd/ignitevortex/</link><pubDate>Fri, 09 Dec 2022 19:22:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/poe/bd/ignitevortex/</guid><description>教程 技能石 第一章 B-G-B雷暴地雷（1）-迅整（4）-附加閃電傷害（8） B-B-B風暴漩渦（4）-寒霜爆（4）-附加閃電傷害 B-B位移：冰霜</description></item><item><title>poe剧情速通</title><link>https://yzlc.github.io/post/note/poe/plot/</link><pubDate>Wed, 07 Dec 2022 19:10:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/poe/plot/</guid><description>ACT1 开箱拿技能 杀Hilock 暮光海滩Coast踩点往右去炙热盐沼Mud Flats 拿三个螺 去海潮地穴Submerged Passage踩点传暮光海滩Coa</description></item><item><title>poe</title><link>https://yzlc.github.io/post/note/poe/poe/</link><pubDate>Tue, 06 Dec 2022 17:54:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/poe/poe/</guid><description>常用网站 汉化 trade poestack ninja 剧情 指南 tft 频道 1 2 /global 168 korean /trade 168 korean 开荒 列出插槽颜色(b-b-b|移動速度)、宝石获取地点(任务、npc)、宝石名称 优先血抗装+</description></item><item><title>第五章 I/O设备</title><link>https://yzlc.github.io/post/read/base/os/5/</link><pubDate>Sun, 29 May 2022 15:03:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/os/5/</guid><description>I/O控制方式 程序直接控制方式：CPU轮询。传输单位-字。设备-&amp;gt;CPU-&amp;gt;内存 中断驱动：CPU发出命令后做其他事。传输单位-字</description></item><item><title>第四章 文件管理</title><link>https://yzlc.github.io/post/read/base/os/4/</link><pubDate>Sat, 28 May 2022 15:08:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/os/4/</guid><description>文件的逻辑结构 顺序文件：可变长记录文件无法实现随机存储、定长记录、顺序结构文件可以快速检索 索引文件：索引表就是定长记录的顺序文件，若按关键字</description></item><item><title>第三章 内存</title><link>https://yzlc.github.io/post/read/base/os/3/</link><pubDate>Sat, 28 May 2022 14:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/os/3/</guid><description>进程运行基本原理 编译：高级语言 -&amp;gt; 机器语言 链接：把编译后的一组模块+库函数 链接在一起 装入：把链接后的装入模块 装入内存 覆盖与交换 覆盖：覆盖区、固</description></item><item><title>第二章 进程</title><link>https://yzlc.github.io/post/read/base/os/2/</link><pubDate>Tue, 10 May 2022 21:22:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/os/2/</guid><description>定义 PCB(系统分配用来描述进程信息)：PID(唯一标识)、UID(用户)、状态、优先级、资源分配清单(程序(数据)段指针、键盘、鼠标)、处</description></item><item><title>第一章 操作系统</title><link>https://yzlc.github.io/post/read/base/os/1/</link><pubDate>Tue, 10 May 2022 20:44:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/os/1/</guid><description>功能 资源管理：处理机、存储器、文件、设备 提供服务：命令、程序接口、图形界面 特征 并发：间隔发生，宏观上是同时，微观上是交替。VS 多核并行：同时</description></item><item><title>第五章 中央处理器</title><link>https://yzlc.github.io/post/read/base/organization/5/</link><pubDate>Sun, 01 May 2022 11:39:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/organization/5/</guid><description>CPU的功能和结构 功能：指令控制、操作控制、时间控制、数据加工、中断处理 基本结构：ALU、寄存器、中断系统、CU 运算器：算术逻辑单元(ALU</description></item><item><title>第四章 指令系统</title><link>https://yzlc.github.io/post/read/base/organization/4/</link><pubDate>Sun, 01 May 2022 10:22:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/organization/4/</guid><description>指令格式 操作码：定长、变长(扩展) 地址码：定长、变长。四地址-零地址 指令寻址 程序计数器PC 指令寻址 顺序寻址 跳跃寻址 数据寻址 寻址特征：隐含(程</description></item><item><title>第三章 存储系统</title><link>https://yzlc.github.io/post/read/base/organization/3/</link><pubDate>Sat, 23 Apr 2022 10:29:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/organization/3/</guid><description>主存 译码驱动：地址信号(地址总线) -&amp;gt; 选通信号(存储单元)。MAR(Memory Address Register)：地址寄存器。实际放CPU 存储矩阵：存储元</description></item><item><title>第二章 数据的表示和运算</title><link>https://yzlc.github.io/post/read/base/organization/2/</link><pubDate>Sat, 26 Mar 2022 13:07:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/organization/2/</guid><description>进制转换 十进制→K进制 按权展开相加法：通过分析十进制75位权r为10 推导出K进制→十进制 $K_{n} \times r_{n} + \dots + k_{0} \times r^{0} $ 十进制→K进制 除基取余法：尝试除</description></item><item><title>网络</title><link>https://yzlc.github.io/post/read/net/</link><pubDate>Tue, 11 Jan 2022 21:43:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/net/</guid><description>应用层 dns isp-&amp;gt;根名称服务器-&amp;gt;tld名称服务器-&amp;gt;ip http ftp 客户端 -&amp;gt; 服务端(21) 主动：服务端(20) -&amp;gt; 客户端(防火墙需</description></item><item><title>vue</title><link>https://yzlc.github.io/post/note/dev/vue/</link><pubDate>Sat, 08 Jan 2022 10:45:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/vue/</guid><description>数据绑定 v-bind单向，v-model(表单元素)双向 el、data的其他写法 vm.$mount('#root') data(){ return {msg:'1'} } 事件处理 @click=&amp;quot;demo($event,1)&amp;quot; 事件修饰符 prevent：阻止默认事件（</description></item><item><title>nodejs</title><link>https://yzlc.github.io/post/note/dev/nodejs/</link><pubDate>Sat, 23 Oct 2021 16:11:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/nodejs/</guid><description>安装镜像 1 npm install -g cnpm --registry=https://registry.npm.taobao.org 清理缓存 1 npm cache clean -force</description></item><item><title>分布式</title><link>https://yzlc.github.io/post/note/dev/java/distributed/</link><pubDate>Wed, 12 May 2021 09:52:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/java/distributed/</guid><description>拆分成多个子服务,将这些子服务都部署在不同的服务器上 CAP 因为P的存在，要求我们在A和C中做出权衡 一致性（Consistency）：所有节点访问</description></item><item><title>ZooKeeper</title><link>https://yzlc.github.io/post/note/dev/java/zookeeper/</link><pubDate>Wed, 12 May 2021 09:23:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/java/zookeeper/</guid><description>分布式协调服务（动物园管理员）。提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、</description></item><item><title>nio</title><link>https://yzlc.github.io/post/note/dev/java/nio/</link><pubDate>Wed, 28 Apr 2021 14:55:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/java/nio/</guid><description>Non-blocking IO。IO面向字节流和字符流（文件）；NIO面向通道和缓冲区（网络） Channel 通道 类型：FileChannel、DatagramChannel（U</description></item><item><title>redis</title><link>https://yzlc.github.io/post/note/dev/java/redis/</link><pubDate>Fri, 23 Apr 2021 15:08:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/java/redis/</guid><description>内存数据库。丰富的数据类型、灾难恢复、集群、过期策略 数据结构 类型 命令 场景 string set,get,strlen,exists,decr,incr,setex 计数 list rpush,lpop,lpush,rpop,lrange、</description></item><item><title>缓存</title><link>https://yzlc.github.io/post/note/dev/java/cache/</link><pubDate>Tue, 20 Apr 2021 09:03:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/java/cache/</guid><description>特征 命中率、最大空间、清空策略 过期数据删除策略 惰性删除：只会在取出 key 的时候才对数据进行过期检查。对 CPU 友好，但是可能会造成太多过期 key 没有被删除</description></item><item><title>array</title><link>https://yzlc.github.io/post/note/dev/algorithms/array/</link><pubDate>Sat, 20 Feb 2021 19:15:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/algorithms/array/</guid><description>稀疏数组 压缩棋盘。记录数组一共有几行几列，有多少个不同的值 11 22 0 0 0 0 0 0 33 44 0 0 0 0 0 0 55 66 77 0 0 0 0 0 0 0 88 0 0 0 0 0 0 0 99 行 列 值 [0] 5 7</description></item><item><title>出行清单</title><link>https://yzlc.github.io/post/note/daily/travel/</link><pubDate>Fri, 05 Feb 2021 14:18:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/daily/travel/</guid><description>牙刷 剃须刀 surface 衣服 充电器 充电宝 钥匙 纸 水杯 身份证 毛巾 洗发水 沐浴露</description></item><item><title>电话卡换绑清单</title><link>https://yzlc.github.io/post/note/daily/sim/</link><pubDate>Fri, 05 Feb 2021 14:18:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/daily/sim/</guid><description>支付宝 淘宝 微信 qq 京东，金融 icloud 爱奇艺 bilibili 战网 社保 银行卡 美团 饿了么 钉钉 学信网 12306 酷狗 51 工作OA、邮箱、APP 云闪付 天虹 朴朴 拼多多</description></item><item><title>好物推荐清单</title><link>https://yzlc.github.io/post/note/daily/buy/</link><pubDate>Fri, 05 Feb 2021 14:18:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/daily/buy/</guid><description>个护 牙刷：飞利浦hx6511 洗发水：selsun 沐浴露：梦芭菲 保温杯：虎牌、印象、膳魔师 拖鞋：网易严选（EVA） 花洒：九牧 电器 键盘：ikbc</description></item><item><title>powershell</title><link>https://yzlc.github.io/post/note/win/powershell/</link><pubDate>Mon, 28 Dec 2020 15:41:10 +0800</pubDate><guid>https://yzlc.github.io/post/note/win/powershell/</guid><description>代理 1 2 3 4 5 6 #设置代理 $Env:https_proxy=&amp;#34;socks5://localhost:10808&amp;#34; #取消代理 #查看代理 $env:https_proxy 环境变量 1 2 3 4 5 6 7 8 9 10 [environment]::SetEnvironmentvariable(&amp;#34;GOPATH&amp;#34;, &amp;#34;$env:USERPROFILE\gopath&amp;#34;, &amp;#34;User&amp;#34;) #调用命令结果：$(命令) #获取原有用户 PATH 变量：$([e</description></item><item><title>spring</title><link>https://yzlc.github.io/post/read/spring/spring/</link><pubDate>Thu, 10 Dec 2020 18:58:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/spring/spring/</guid><description>AOP 动态代理 有接口：jdk，代理接口实现类 无接口：cglib，代理子类 事务 propagation REQUIRED（default）：有则追加，无则创建 REQUIR</description></item><item><title>springIOC</title><link>https://yzlc.github.io/post/read/spring/ioc/</link><pubDate>Mon, 07 Dec 2020 22:08:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/spring/ioc/</guid><description>参考 Spring分析 请别再问Spring Bean的生命周期了！ 思想：把对象创建和调用交给spring管理，降低耦合 实现：配置解析-&amp;gt;工</description></item><item><title>PlantUML</title><link>https://yzlc.github.io/post/note/win/plantuml/</link><pubDate>Thu, 26 Nov 2020 14:15:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/win/plantuml/</guid><description>安装 vscode安装PlantUML插件 安装Graphviz 绘图 编写脚本：新建md文件 1 2 3 @startuml @enduml 查看图像：快捷键 Alt + D （Ctrl+Shift</description></item><item><title>leetcode初级算法</title><link>https://yzlc.github.io/post/note/dev/leetcode/easy/</link><pubDate>Thu, 10 Sep 2020 10:52:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/leetcode/easy/</guid><description>数组 旋转图像 将矩阵划分为4部分旋转 ij 交换轨迹 00 00-&amp;gt;30-&amp;gt;33-&amp;gt;03 01 01-&amp;gt;20-&amp;gt;32-&amp;gt;13 10 10-&amp;gt;31-&amp;gt;23-&amp;gt;02 11 11-&amp;gt;21-&amp;gt;22-&amp;gt;12 坐标 (i,j)-&amp;gt;(len-1-j,i)-&amp;gt;(len-1-i,len-1-j)-&amp;gt;(j,len-1-i) 1 2 3 4 5 6 7 8 9 10 11 12 public void rotate(int[][] matrix){ int len = matrix.length; for (int i = 0; i &amp;lt; (len + 1) / 2; i++) { for (int j</description></item><item><title>5.2　单词查找树</title><link>https://yzlc.github.io/post/read/algorithms/5.2/</link><pubDate>Tue, 01 Sep 2020 13:41:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/5.2/</guid><description>public class StringST StringST() 创建一个符号表 void put(String key, Value val) 向表中插入键值对（如果值为 null 则删除键key ） Value get(String key) 键 key 所对应的值（如果键不存在则返回 null） void delete(String key) 删除键 key</description></item><item><title>第 5 章　字符串</title><link>https://yzlc.github.io/post/read/algorithms/5/</link><pubDate>Tue, 01 Sep 2020 09:11:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/5/</guid><description>5.1 字符串排序 5.1.1 键索引计数法 5.1.1.1 频率统计 5.1.1.2 将频率转换为索引 5.1.1.3 数据分类 5.1.1.4 回写 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int N = a.length; String[] aux = new String[N]; int[] count = new int[R+1]; // 计算出现频</description></item><item><title>4.4　最短路径</title><link>https://yzlc.github.io/post/read/algorithms/4.4/</link><pubDate>Tue, 11 Aug 2020 15:53:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/4.4/</guid><description>应用 顶点 边 地图 交叉路口 公路 网络 路由器 网络连接 任务调度 任务 优先级限制 套汇 货币 汇率 4.4.2 加权有向图的数据结构 public class DirectedEdge DirectedEdge(int v, int w, double weight) double weight() 边的权重 int from() 指出这</description></item><item><title>4.3　最小生成树</title><link>https://yzlc.github.io/post/read/algorithms/4.3/</link><pubDate>Tue, 11 Aug 2020 14:46:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/4.3/</guid><description>权值（树中所有边的权值之和）最小的生成树 加权图：为每条边关联一个权值或是成本的图模型 图的生成树：含有其所有顶点的无环连通子图 4.3.1 原理 4.3.1.1 切分定理</description></item><item><title>consul</title><link>https://yzlc.github.io/post/note/dev/java/consul/</link><pubDate>Tue, 11 Aug 2020 10:29:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/java/consul/</guid><description>单节点 1 2 mkdir -p /usr/local/consul-data/logs nohup ./consul agent -server -data-dir=/usr/local/consul-data/ -node=agent-one -bind=服务IP -bootstrap-expect=1 -client=0.0.0.0 -ui &amp;gt; /usr/local/consul-data/logs/consul.log 2&amp;gt;&amp;amp;1 &amp;amp;</description></item><item><title>4.2　有向图</title><link>https://yzlc.github.io/post/read/algorithms/4.2/</link><pubDate>Mon, 10 Aug 2020 13:24:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/4.2/</guid><description>4.2.1 术语 由一组顶点和一组有方向的边组成的，每条有方向的边都连接着有序的一对顶点 4.2.2 有向图的数据类型 public class Digraph Digraph(int V) 创建一幅含有V个顶点但没有边的有向图</description></item><item><title>第4章　图</title><link>https://yzlc.github.io/post/read/algorithms/4.1/</link><pubDate>Fri, 07 Aug 2020 09:58:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/4.1/</guid><description>4.1 无向图 图是由一组顶点和一组能够将两个顶点相连的边组成的 4.1.2 表示无向图的数据类型 public class Graph Graph(int V) 创建一个含有V个顶点但不含有边的图 Graph(In in) 从标准输入流 in</description></item><item><title>spring Security</title><link>https://yzlc.github.io/post/note/dev/java/spring/security/</link><pubDate>Thu, 06 Aug 2020 15:01:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/java/spring/security/</guid><description>maven 1 2 3 4 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; config 1 2 3 4 5 6 7 8 9 10 @Configuration public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() .anyRequest().authenticated() .and().formLogin().loginProcessingUrl(&amp;#34;/login&amp;#34;).permitAll() .and().csrf().disable(); } } 1 2 spring.security.user.name=admin spring.security.user.password={bcrypt}$2a$10$io1baOv5SiP2G0DR.Dye.OQjtj1W8Aba31pGecyYdxgoXLkLjdfm.</description></item><item><title>3.4 散列表</title><link>https://yzlc.github.io/post/read/algorithms/3.4/</link><pubDate>Wed, 05 Aug 2020 10:28:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/3.4/</guid><description>用散列函数将被查找的键转化为数组的一个索引 处理碰撞冲突：拉链法和线性探测法 3.4.1 散列函数 3.4.1.2 正整数 除留余数法(k%M，M是素数) 3.4.1.3 浮点数 将键表示为</description></item><item><title>redis</title><link>https://yzlc.github.io/post/note/win/redis/</link><pubDate>Fri, 31 Jul 2020 13:50:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/win/redis/</guid><description>集群脚本 redis根目录新建cluster文件夹 拷贝3节点配置文件到cluster文件夹 redis.7000.conf redis.7001.conf redis.7002.conf 修改对应配置项 1 2 3 4 5 port 7000 cluster-enabled yes cluster-config-file nodes.7000.conf cluster-node-timeout 5000 appendonly yes r</description></item><item><title>activiti</title><link>https://yzlc.github.io/post/note/dev/java/activiti/</link><pubDate>Wed, 29 Jul 2020 16:07:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/java/activiti/</guid><description>工作流开源框架 快速入门 BPMN 业务流程建模与标注（Business Process Model and Notation，BPMN) ，描述流程的基本符号，包括这些图元如何组合成一</description></item><item><title>charles</title><link>https://yzlc.github.io/post/note/win/charles/</link><pubDate>Thu, 16 Jul 2020 08:42:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/win/charles/</guid><description>证书 Help -&amp;gt; SSL Proxying -&amp;gt; Install Charles Root Certificate 安装证书 -&amp;gt; 下一步 将所有的证书都放入下列存储 浏览 受信任的根证书颁发机构 下一步 完成 是 https Proxy -&amp;gt; SSL Proxying Settings Enable SSL Proxying Add Host：* Por</description></item><item><title>3.3　平衡查找树</title><link>https://yzlc.github.io/post/read/algorithms/3.3/</link><pubDate>Wed, 15 Jul 2020 15:28:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/3.3/</guid><description>3.3.1 2-3 查找树 2-结点，含有一个键（及其对应的值）和两条链接，左链接指向的2-3树中的键都小于该结点，右链接指向的2-3树中的键都大于该结点。 3-</description></item><item><title>3.2　二叉查找树</title><link>https://yzlc.github.io/post/read/algorithms/3.2/</link><pubDate>Wed, 15 Jul 2020 14:28:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/3.2/</guid><description>一棵二叉查找树 （BST）是一棵二叉树，其中每个结点都含有一个Comparable 的键（以及相关联的值）且每个结点的键都大于其左子树中 的任意结</description></item><item><title>第3章　查找</title><link>https://yzlc.github.io/post/read/algorithms/3.1/</link><pubDate>Wed, 15 Jul 2020 13:28:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/3.1/</guid><description>3.1 符号表 符号表是一种存储键值对的数据结构，支持两种操作：插入（put），即将一组新的键值对存入表中；查找 （get），即根据给定的键得到相应的</description></item><item><title>第2章　排序</title><link>https://yzlc.github.io/post/read/algorithms/2/</link><pubDate>Tue, 07 Jul 2020 10:27:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/2/</guid><description>2.1 初级排序算法 2.1.2 选择排序 不断地选择剩余元素之中的最小者 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class Selection { public static boolean less(Comparable v, Comparable w) { return v.compareTo(w) &amp;lt; 0; } private static void exch(Comparable[] a, int i, int j) { Comparable</description></item><item><title>第1章　基础</title><link>https://yzlc.github.io/post/read/algorithms/1/</link><pubDate>Thu, 02 Jul 2020 14:01:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/1/</guid><description>1.3 背包、队列和栈 1.3.1 API 1.3.1.4 背包 不支持从中删除元素的集合数据类型——它的目的就是帮助用例收集元素并迭代遍历所有收集到的元素 1.3.1.5 先进先出队列 先进先出队</description></item><item><title>网站大全</title><link>https://yzlc.github.io/post/web/</link><pubDate>Sun, 28 Jun 2020 09:00:33 +0800</pubDate><guid>https://yzlc.github.io/post/web/</guid><description>视频 哔哩哔哩 acgnya 风车动漫 樱花动漫 软件 翻译 谷歌 画图 processon diagrams 开发 工具大全 SQL转Java maven leetcode github Java pdai Snailclimb justjavac CyC2018 xingshaocheng blog lucida 工具 搬瓦工 LeanCloud cloudflare 网站历史档案 账号 临时邮箱 云</description></item><item><title>read</title><link>https://yzlc.github.io/post/read/read/</link><pubDate>Wed, 24 Jun 2020 09:13:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/read/</guid><description>基础 《深入理解计算机系统》 《tcp/ip详解》 《快乐的Linux命令行》 原书 程序员修炼之道 算法 《算法》 《编程珠玑》 王道 计算机组成原理 操作系统</description></item><item><title>第11章　性能与可伸缩性</title><link>https://yzlc.github.io/post/read/concurrency/11/</link><pubDate>Tue, 23 Jun 2020 13:33:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/11/</guid><description>11.3 线程引入的开销 11.3.1 上下文切换 11.3.2 内存同步 11.3.3 阻塞 11.4 减少锁的竞争 减少锁的持有时间 降低锁的请求频率 使用带有协调机制的独占锁，这些机制允许更高的并发性</description></item><item><title>第10章　避免活跃性危险</title><link>https://yzlc.github.io/post/read/concurrency/10/</link><pubDate>Tue, 23 Jun 2020 13:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/10/</guid><description>10.1 死锁 10.1.1 锁顺序死锁 如果所有线程以固定的顺序来获得锁，那么在程序中就不会出现锁顺序死锁问题 10.1.2 动态的锁顺序死锁 10.1.3 在协作对象之间发生的死锁 如果在持</description></item><item><title>第8章　线程池的使用</title><link>https://yzlc.github.io/post/read/concurrency/8/</link><pubDate>Tue, 23 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/8/</guid><description>8.1 在任务与执行策略之间的隐性耦合 有些类型的任务需要明确地指定执行策略 依赖性任务 使用线程封封闭机制的任务 对响应时间敏感的任务 8.1.1 线程饥饿死锁 线程</description></item><item><title>第7章　取消与关闭</title><link>https://yzlc.github.io/post/read/concurrency/7/</link><pubDate>Mon, 22 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/7/</guid><description>7.1 任务取消 用户请求取消 有时间限制的操作 应用程序事件 错误 关闭 7.1.1 中断 调用interrupt并不意味着立即停止目标线程正在进行的工作，而只是传递了</description></item><item><title>第6章　任务执行</title><link>https://yzlc.github.io/post/read/concurrency/6/</link><pubDate>Thu, 18 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/6/</guid><description>6.1 在线程中执行任务 6.1.1 串行地执行任务 6.1.2 显式地为任务创建线程 6.1.3 无限制创建线程的不足 线程生命周期的开销非常高 资源消耗 稳定性 6.2 Executor框架 基</description></item><item><title>第4章　对象的组合</title><link>https://yzlc.github.io/post/read/concurrency/4/</link><pubDate>Tue, 16 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/4/</guid><description>4.1 设计线程安全的类 在设计线程安全类的过程中，需要包含以下三个基本要素： 找出构成对象状态的所有变量。 找出约束状态变量的不变性条件。 建立对象状态</description></item><item><title>第5章　基础构建模块</title><link>https://yzlc.github.io/post/read/concurrency/5/</link><pubDate>Tue, 16 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/5/</guid><description>5.1 同步容器类 5.1.1 同步容器类的问题 5.1.2 迭代器与ConcurrentModificationException 5.1.3 隐藏迭代器 5.2 并发容器 5.2.1 ConcurrentHashMap 只有当应用程</description></item><item><title>第2章　线程安全性</title><link>https://yzlc.github.io/post/read/concurrency/2/</link><pubDate>Mon, 15 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/2/</guid><description>2.1 什么是线程安全性 当多个线程访问某个类时，这个类始终都能表现出正确的行为 2.2 原子性 2.2.1 竞态条件（Race Condition） 由于不恰当的执行时序</description></item><item><title>第3章　对象的共享</title><link>https://yzlc.github.io/post/read/concurrency/3/</link><pubDate>Mon, 15 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/3/</guid><description>3.1 可见性 3.1.1 失效数据 3.1.2 非原子的64位操作 3.1.3 加锁与可见性 3.1.4 Volatile变量 当且仅当满足以下所有条件时使用： 对变量的写入操作不依赖变量的当前值</description></item><item><title>第12章　Java内存模型与线程</title><link>https://yzlc.github.io/post/read/jvm/12/</link><pubDate>Wed, 03 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/12/</guid><description>12.1 概述 每秒事务处理数（Transactions Per Second，TPS） 12.3 Java内存模型 定义程序中各种变量的访问规则，即关注在虚拟机中把变量</description></item><item><title>第13章　线程安全与锁优化</title><link>https://yzlc.github.io/post/read/jvm/13/</link><pubDate>Wed, 03 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/13/</guid><description>13.2 线程安全 13.2.1 Java语言中的线程安全 不可变 基本数据类型：在定义时使用final关键字修饰 对象：需要保证其行为不会对其状态产生任何影响(Str</description></item><item><title>第11章　后端编译与优化</title><link>https://yzlc.github.io/post/read/jvm/11/</link><pubDate>Tue, 02 Jun 2020 11:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/11/</guid><description>11.2 即时编译器 Java程序最初都是通过解释器（Interpreter）进行解释执行的，当虚拟机发现某个方法或代码块的运行特别频繁，就会把这些代</description></item><item><title>第10章　前端编译与优化</title><link>https://yzlc.github.io/post/read/jvm/10/</link><pubDate>Tue, 02 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/10/</guid><description>10.2 Javac编译器 10.2.1 Javac的源码与调试 下载 10.2.2 解析与填充符号表 词法、语法分析 词法分析: 将源代码的字符流转变为标记（Token）集合的过程，</description></item><item><title>第8章　虚拟机字节码执行引擎</title><link>https://yzlc.github.io/post/read/jvm/8/</link><pubDate>Mon, 01 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/8/</guid><description>8.2 运行时栈帧结构 Java虚拟机以方法作为最基本的执行单元 栈帧（Stack Frame）:虚拟机进行方法调用和方法执行背后的数据结构，也是虚拟机</description></item><item><title>Markdown简易教程</title><link>https://yzlc.github.io/post/note/daily/markdown/</link><pubDate>Fri, 29 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/daily/markdown/</guid><description>基础语法 标题 Markdown支持6种级别的标题，与html标签h1~h6对应。 1 2 3 4 5 6 # h1 ## h2 ### h3 #### h4 ##### h5 ###### h6 h1 h2 h3 h4 h5 h6 除此之外，Ma</description></item><item><title>第7章　虚拟机类加载机制</title><link>https://yzlc.github.io/post/read/jvm/7/</link><pubDate>Wed, 27 May 2020 11:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/7/</guid><description>7.2 类加载的时机 加载（Loading）-&amp;gt;连接（Linking）[验证（Verification）-&amp;gt;准备（Preparation</description></item><item><title>6.4　字节码指令简介</title><link>https://yzlc.github.io/post/read/jvm/6.4/</link><pubDate>Wed, 27 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/6.4/</guid><description>6.4.1 字节码与数据类型 编译器会在编译期或运行期将byte和short类型的数据带符号扩展（Sign-Extend）为相应的int类型数据，将bo</description></item><item><title>6.3　Class类文件的结构</title><link>https://yzlc.github.io/post/read/jvm/6.3/</link><pubDate>Thu, 14 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/6.3/</guid><description>Class文件是一组以8个字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在文件之中，中间没有添加任何分隔符。当遇到需要占用8个</description></item><item><title>第4章　虚拟机性能监控、故障处理工具</title><link>https://yzlc.github.io/post/read/jvm/4/</link><pubDate>Tue, 12 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/4/</guid><description>4.2 基础故障处理工具 4.2.1 jps（JVM Process Status Tool）：虚拟机进程状况工具 命令格式：jps [ options ] [ hostid ] 选项 作用 -q 只输出LVMID,省略主类的名称 -m</description></item><item><title>第3章　垃圾收集器</title><link>https://yzlc.github.io/post/read/jvm/3.5/</link><pubDate>Sat, 09 May 2020 11:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/3.5/</guid><description>3.5 经典垃圾收集器 3.5.1 Serial收集器 单线程,HotSpot虚拟机运行在客户端模式下的默认新生代收集器，对于内存资源受限的环境，它是所有收集器</description></item><item><title>第3章　内存分配策略</title><link>https://yzlc.github.io/post/read/jvm/3/</link><pubDate>Sat, 09 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/3/</guid><description>3.2 对象已死？ 3.2.1 引用计数算法 在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为</description></item><item><title>第2章　Java内存区域与内存溢出异常</title><link>https://yzlc.github.io/post/read/jvm/2/</link><pubDate>Fri, 08 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/2/</guid><description>2.2 运行时数据区域 2.2.1 程序计数器（Program Counter Register） 字节码的行号指示器，程序控制流的指示器（分支、循环、跳转、异常处理、线程恢复</description></item><item><title>第1章　走近Java</title><link>https://yzlc.github.io/post/read/jvm/1/</link><pubDate>Thu, 30 Apr 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/1/</guid><description>1.6 实战:自己编译JDK 1.6.1 获取源码 下载 -&amp;gt; browse -&amp;gt; zip 1.6.3 构建编译环境(Ubuntu) 工具 命令 GCC sudo apt-get install build-essential FreeType sudo apt-get install libfreetype6-dev CUPS sudo apt-get install libcups2-dev X11 sudo apt-get install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev ALSA sudo apt-get install</description></item><item><title>第5章 优化程序性能</title><link>https://yzlc.github.io/post/read/csapp/5/</link><pubDate>Wed, 29 Apr 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/5/</guid><description>5.1 优化编译器的能力和局限性 5.2 表示程序性能 CPE(Cycles Per Element):每元素的周期数 循环展开(loop unrolling) 举例:前置和,每次迭代计算两个元素 5.3 程序示例</description></item><item><title>dbeaver</title><link>https://yzlc.github.io/post/note/win/dbeaver/</link><pubDate>Tue, 28 Apr 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/win/dbeaver/</guid><description>导出xlsx 下载dbeaver 帮助 -&amp;gt; 安装新软件 -&amp;gt; DBeaver Office integration</description></item><item><title>3.7 过程</title><link>https://yzlc.github.io/post/read/csapp/3.7/</link><pubDate>Tue, 31 Dec 2019 12:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/3.7/</guid><description>3.7 过程 3.7.1 运行时栈 x86-64的栈向低地址方向增长，栈指针%rsp指向栈顶元素。减小栈指针分配空间，增加栈指针释放空间 当x86-64过程需要的</description></item><item><title>3.6 控制</title><link>https://yzlc.github.io/post/read/csapp/3.6/</link><pubDate>Tue, 31 Dec 2019 11:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/3.6/</guid><description>3.6 控制 3.6.1 条件码 CF：进位。无符号溢出 ZF：零 SF：符号。负数 OF：溢出。补码溢出 指令 基于 描述 CMP S1，S2 S2-S1 比较 TEST S1，S2 S1&amp;amp;S2 测试 3.6.2 访问条件码</description></item><item><title>第3章 程序的机器级表示</title><link>https://yzlc.github.io/post/read/csapp/3/</link><pubDate>Tue, 31 Dec 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/3/</guid><description>3.2 程序编码 3.2.1 机器级代码 程序计数器（PC，在x86-64中用%rip表示）：给出要执行的下一条指令在内存中的地址 整数寄存器：包含16个命名位置</description></item><item><title>第2章 信息的表示和处理</title><link>https://yzlc.github.io/post/read/csapp/2/</link><pubDate>Mon, 30 Dec 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/2/</guid><description>2.1 信息存储 2.1.1 十六进制表示法 二进制 (i+4j,{i∈[0,3],j个0})&amp;lt;——&amp;gt;(4位一拆) 十六进制 (除16)&amp;lt;——&amp;gt</description></item><item><title>第1章 计算机系统漫游</title><link>https://yzlc.github.io/post/read/csapp/1/</link><pubDate>Sun, 29 Dec 2019 10:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/1/</guid><description>1.9.1 Amdahl&amp;rsquo;s law（阿姆达尔定律） 要想显著加速整个系统，必须提升全系统中相当大的部分的速度 若系统执行某应用程序需要时间为$T_{old}$。 假设系统</description></item><item><title>tomcat</title><link>https://yzlc.github.io/post/note/win/tomcat/</link><pubDate>Wed, 25 Dec 2019 09:08:26 +0800</pubDate><guid>https://yzlc.github.io/post/note/win/tomcat/</guid><description>编码问题 bin/catalina.bat 加入SET CATALINA_OPTS=-Dfile.encoding=UTF-8 conf/server.xml 在&amp;lt;Connector port=&amp;quot;8080&amp;quot;...中加入 URIEncoding=&amp;quot;UTF-8&amp;quot;</description></item><item><title>git - linux</title><link>https://yzlc.github.io/post/note/linux/git/</link><pubDate>Sun, 01 Sep 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/linux/git/</guid><description>服务端 1 2 3 4 5 #安装 yum -y install git # 添加仓库 git init --bare sample.git git bash客户端 1 2 3 4 5 6 7 8 #生成公钥 ssh-keygen #导入 ssh -p port root@host &amp;#39;mkdir -p .ssh &amp;amp;&amp;amp; cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys&amp;#39; &amp;lt; ~/.ssh/id_rsa.pub # 下载 git clone --depth 1 --recursive</description></item><item><title>mysql</title><link>https://yzlc.github.io/post/note/linux/mysql/</link><pubDate>Sun, 01 Sep 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/linux/mysql/</guid><description>安装 1 2 3 4 5 6 wget &amp;#39;https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm&amp;#39; sudo yum -y install mysql-community-server systemctl start mysqld systemctl status mysqld sudo grep &amp;#39;temporary password&amp;#39; /var/log/mysqld.log mysql -uroot -p #输入查看到的密码 配置 vim /etc/my.cnf 1 2 3 4 5 6 7 8 [client] default-character-set = utf8 [mysqld] default-storage-engine = INNODB character-set-server = utf8 collation-server = utf8_general_ci #不区分大小</description></item><item><title>rabbitmq</title><link>https://yzlc.github.io/post/note/linux/mq/</link><pubDate>Sun, 01 Sep 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/linux/mq/</guid><description>下载脚本 1 2 curl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh | sudo bash curl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh | sudo bash 安装 1 2 yum -y install erlang yum -y install rabbitmq-server 命令 1 2 3 4 5 6 7 8 #启动服务 systemctl start rabbitmq-server #查看状态 systemctl status rabbitmq-server #设置为开机启动 systemctl enable rabbitmq-server 添加用</description></item><item><title>redis</title><link>https://yzlc.github.io/post/note/linux/redis/</link><pubDate>Sun, 01 Sep 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/linux/redis/</guid><description>安装 1 2 3 4 wget http://download.redis.io/releases/redis-5.0.3.tar.gz tar xzf redis-5.0.3.tar.gz cd redis-5.0.3 make 配置 1 2 3 4 5 #修改配置文件 vi ./redis.conf #daemonize设置为yes daemonize yes 启动 src/redis-server ./redis.conf 命令 1 2 #登录 redis-cli -h 127.0.0.1 -p 6379 -a password -c</description></item><item><title>ss</title><link>https://yzlc.github.io/post/note/linux/ss/</link><pubDate>Sun, 01 Sep 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/linux/ss/</guid><description>SS 1 2 3 4 5 6 7 8 9 10 11 #安装 wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh &amp;amp;&amp;amp; chmod +x shadowsocks-all.sh &amp;amp;&amp;amp; ./shadowsocks-all.sh 2&amp;gt;&amp;amp;1 | tee shadowsocks-all.log #卸载 ./shadowsocks-all.sh uninstall #命令 /etc/init.d/shadowsocks-python start | stop | restart | status #配置文件 /etc/shadowsocks-python/config.json BBR 1 2 3 4 5 #安装 wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;amp;&amp;amp; chmod +x bbr.sh &amp;amp;&amp;amp; ./bbr.sh</description></item><item><title>vps</title><link>https://yzlc.github.io/post/note/linux/vps/</link><pubDate>Sun, 01 Sep 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/linux/vps/</guid><description>安装工具包 1 2 3 4 yum -y update &amp;amp;&amp;amp; yum -y upgrade yum -y install wget yum -y install vim yum -y install zip unzip vim配置 vim /root/.vimrc 1 2 3 4 5 #设置tab分隔符为4个空格 set tabstop=4 #解决中文乱码的设置 set termencoding=utf-8 set</description></item><item><title>idea</title><link>https://yzlc.github.io/post/note/win/idea/</link><pubDate>Sat, 31 Aug 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/win/idea/</guid><description>Help Edit Custom VM Options&amp;hellip; 1 -Dfile.encoding=UTF-8 Settings Editor File and Code Templates Files&amp;ndash;&amp;gt;Class 1 2 3 /** * @author ${USER} */ File Types ignore files and folders 添加*.idea;*.iml; General Auto Import Add unambiguous imports on the fly Optimize imports on the fly Code Completion Match case Editor Tabs Show tabs in one row Tab limit</description></item><item><title>effective java</title><link>https://yzlc.github.io/post/read/effectivejava/effectivejava/</link><pubDate>Mon, 26 Aug 2019 10:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/effectivejava/effectivejava/</guid><description>1. 考虑使用静态工厂方法替代构造方法 1 2 3 public static Boolean valueOf(boolean b) { return b ? Boolean.TRUE : Boolean.FALSE; } 优点 有名字(BigInteger.probablePrime) 不用每次调用</description></item><item><title>行为型模式</title><link>https://yzlc.github.io/post/read/designpattern/behavioral/</link><pubDate>Mon, 15 Jul 2019 13:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/designpattern/behavioral/</guid><description>策略模式（Strategy） 定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。 优点 以相同的</description></item><item><title>结构型模式</title><link>https://yzlc.github.io/post/read/designpattern/structural/</link><pubDate>Mon, 15 Jul 2019 12:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/designpattern/structural/</guid><description>装饰模式（Decorator） 动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活 优点 可以简化原有的类 可以去除相关</description></item><item><title>创建型模式</title><link>https://yzlc.github.io/post/read/designpattern/creational/</link><pubDate>Mon, 15 Jul 2019 11:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/designpattern/creational/</guid><description>简单工厂模式 优点 工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖 应用 用反射去除s</description></item><item><title>设计模式</title><link>https://yzlc.github.io/post/read/designpattern/designpattern/</link><pubDate>Mon, 15 Jul 2019 10:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/designpattern/designpattern/</guid><description>面向对象 可维护、可复用、可扩展、灵活性好 通过封装、继承、多态把程序的耦合度降低，用设计模式使得程序更加的灵活，容易修改，并且易于复用 类图 依赖</description></item><item><title>padavan</title><link>https://yzlc.github.io/post/note/linux/padavan/</link><pubDate>Mon, 08 Jul 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/linux/padavan/</guid><description>Padavan v2ray 导出节点 在电脑上将正常的节点导出为客户端json 修改json第10行&amp;quot;listen&amp;quot;为路由器的管理地址 v2ray设置</description></item><item><title>bat</title><link>https://yzlc.github.io/post/note/win/bat/</link><pubDate>Sun, 30 Jun 2019 15:42:10 +0800</pubDate><guid>https://yzlc.github.io/post/note/win/bat/</guid><description>变量 ps&amp;gt;ls env: 用户目录：%UserProfile% 开机启动（用户）：%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup 删目录、文</description></item><item><title>nginx</title><link>https://yzlc.github.io/post/note/win/nginx/</link><pubDate>Sun, 30 Jun 2019 15:42:10 +0800</pubDate><guid>https://yzlc.github.io/post/note/win/nginx/</guid><description>nginx 启动 start nginx 正常停止 nginx -s quit 快速停止 nginx -s stop 代理 地址 1 2 3 4 5 6 7 8 9 server { listen 9001; server_name 192.168.1.10; location /11/ { #192.168.1.10:9001/11/test -&amp;gt; http://192.168.1.11:8080/test proxy_pass http://192.168.1.11:8080/; } } 服务器 1 2 3 4 5 6 7 8 9 10 11 12 stream { #stre</description></item><item><title>linux</title><link>https://yzlc.github.io/post/note/linux/linux/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/linux/linux/</guid><description>查找 find / -type d -name *tomcat* 2&amp;gt;/dev/null 按文件/目录大小排序 du -sh * | sort -rn | head 查看进程运行的完整路径 ll /proc/PID 杀进程 pkill -f 进程名称 后台运行 nohup xx &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp; 脚本 1 2 3 #!/bin/bash day=`date +%Y%m%d` echo &amp;#3</description></item><item><title>linux - shell</title><link>https://yzlc.github.io/post/read/linux/shell/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/linux/shell/</guid><description>shell环境 set shell或环境变量 printenv 环境变量 echo 查看变量内容 alias 查看别名 有趣的环境变量 DISPLAY 如果你正在运行图形界面环境，那么这个变量就是你显示器的</description></item><item><title>linux - 键盘高级操作技巧</title><link>https://yzlc.github.io/post/read/linux/key/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/linux/key/</guid><description>移动光标 Ctrl-a 移动光标到行首 Ctrl-e 移动光标到行尾 Ctrl-f 光标前移一个字符；和右箭头作用一样 Ctrl-b 光标后移一个字符；和左箭头作用一样 Alt-f 光标前移一个字 Alt-b 光标后移一</description></item><item><title>linux - 进程</title><link>https://yzlc.github.io/post/read/linux/process/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/linux/process/</guid><description>ps ps -ef|grep xx ps x 所有进程 ps aux 用户进程 VSZ 虚拟内存大小 RSS 进程占用的物理内存的大小，以千字节为单位。 START 进程启动的时间。若它的值超过24小时，则用天表示</description></item><item><title>linux - 权限</title><link>https://yzlc.github.io/post/read/linux/auth/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/linux/auth/</guid><description>拥有者、组成员和其他人 id 查看身份 文件类型 - 文件 d 目录 l 符号链接。注意对于符号链接文件，剩余的文件属性总是rwxrwxrwx，而且都是 虚拟值。</description></item><item><title>linux - 软件包管理</title><link>https://yzlc.github.io/post/read/linux/pkgmgr/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/linux/pkgmgr/</guid><description>打包系统 Debian Style (.deb) Debian, Ubuntu, Xandros, Linspire Red Hat Style (.rpm) Fedora, CentOS, Red Hat Enterprise Linux, OpenSUSE, Mandriva, PCLinuxOS 包管理工具 发行版 底层工具 上层工具 Debian-Style dpkg apt-get, aptitude Fedora, Red Hat Enterprise Linux, CentOS rpm yum 底层工具用来处理这些任务，比方说安装</description></item><item><title>linux - 使用命令</title><link>https://yzlc.github.io/post/read/linux/cmd/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/linux/cmd/</guid><description>使用命令 type 显示命令的类型 which 显示一个可执行程序的位置 help 得到 shell 内建命令的帮助文档 --help 显示用法信息 apropos（man -k） 显示适当的命令 whatis 显示简</description></item><item><title>linux - 探究操作系统</title><link>https://yzlc.github.io/post/read/linux/filedir/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/linux/filedir/</guid><description>less Page UP or b 向上翻页 Page Down or space 向下翻页 UP Arrow 向上翻一行 Down Arrow 向下翻一行 G 移动到最后 1G or g 移动到开头 /characters 向前查找 n 向前查找下一个出现的字符串，这个字符串</description></item><item><title>正则表达式</title><link>https://yzlc.github.io/post/note/dev/regular/</link><pubDate>Mon, 06 May 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/regular/</guid><description>匹配行 ^.*内容.*$ ^.*内容.*\r?\n 删除字符 A之后字符：A.*$ A之前字符：^([^s]*)A 换行: \n</description></item><item><title>sql</title><link>https://yzlc.github.io/post/note/dev/sql/</link><pubDate>Sat, 04 May 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/sql/</guid><description>建表 1 2 3 4 5 CREATE INDEX idx_table_name_column_name ON table_name(column_name); CREATE UNIQUE INDEX idx_table_name_column_name ON table_name(column_name); CREATE sequence seq_table_name; COMMENT ON TABLE table_name IS &amp;#39;table_name&amp;#39;; COMMENT ON COLUMN table_name.column_name IS &amp;#39;column_name&amp;#39;; 修改表 1 2 3 4 DROP sequence seq_name; ALTER TABLE table_name ADD (column_name datatype,column_name datatype); ALTER TABLE table_name MODIFY (column_name datatype,column_name datatype); ALTER TABLE table_name DROP (column_name,column_name); 复制表 1 CREATE TABLE NEW_TAB AS</description></item><item><title>ibatis</title><link>https://yzlc.github.io/post/note/dev/java/ibatis/</link><pubDate>Thu, 02 May 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/java/ibatis/</guid><description>批量merge Oracle 参数做判断，需要传入map 1 2 3 4 5 6 &amp;lt;statement id=&amp;#34;merge&amp;#34; parameterClass=&amp;#34;map&amp;#34;&amp;gt; &amp;lt;iterate property=&amp;#34;list&amp;#34; open=&amp;#34;begin&amp;#34; close=&amp;#34;;end;&amp;#34; conjunction=&amp;#34;;&amp;#34;&amp;gt; merge into... &amp;lt;isNotEmpty property=&amp;#34;list[].id&amp;#34;&amp;gt; id=id, &amp;lt;/isNotEmpty&amp;gt; 不用判断参数，传入list 1 2 3 &amp;lt;statement id=&amp;#34;merge&amp;#34; parameterClass=&amp;#34;list&amp;#34;&amp;gt; &amp;lt;iterate open=&amp;#34;begin&amp;#34; close=&amp;#34;;end;&amp;#34; conjunction=&amp;#34;;&amp;#34;&amp;gt; merge into... #list[].id# mysql 1 2</description></item><item><title>maven</title><link>https://yzlc.github.io/post/note/win/maven/</link><pubDate>Tue, 05 Mar 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/win/maven/</guid><description>settings.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;settings xmlns=&amp;#34;http://maven.apache.org/SETTINGS/1.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&amp;#34;&amp;gt; &amp;lt;localRepository&amp;gt;C:\repository&amp;lt;/localRepository&amp;gt; &amp;lt;mirrors&amp;gt; &amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;aliyun&amp;lt;/id&amp;gt; &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt; &amp;lt;name&amp;gt;Nexus aliyun&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public&amp;lt;/url&amp;gt; &amp;lt;/mirror&amp;gt; &amp;lt;/mirrors&amp;gt; &amp;lt;/settings&amp;gt; 脚本 1 2 mkdir %USERPROFILE%\.m2 copy .\settings.xml %USERPROFILE%\.m2\</description></item><item><title>pom配置</title><link>https://yzlc.github.io/post/note/dev/java/maven/</link><pubDate>Tue, 05 Mar 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/java/maven/</guid><description>pom.xml 基础配置 project 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 &amp;lt;properties&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;build&amp;gt; &amp;lt;!-- 打包后的名称war/jar --&amp;gt; &amp;lt;finalName&amp;gt;pkgName&amp;lt;/finalName&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.2&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;encoding&amp;gt;utf-8&amp;lt;/encoding&amp;gt; &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt; &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt; &amp;lt;!-- 打包跳过测</description></item><item><title>quartz</title><link>https://yzlc.github.io/post/note/dev/java/quartz/</link><pubDate>Fri, 08 Feb 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/java/quartz/</guid><description>quartzJava下的一种作业控制开源框架。 核心概念 Job 表示一个工作，要执行的具体内容。此接口中只有一个方法，如下： void execute(JobExecutionContext context) JobDetail 表示一个具体的可</description></item></channel></rss>