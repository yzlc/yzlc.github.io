<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jvm on YZLC</title><link>https://yzlc.github.io/tags/jvm/</link><description>Recent content in jvm on YZLC</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 03 Jun 2020 10:32:33 +0800</lastBuildDate><atom:link href="https://yzlc.github.io/tags/jvm/index.xml" rel="self" type="application/rss+xml"/><item><title>第12章　Java内存模型与线程</title><link>https://yzlc.github.io/post/read/jvm/12/</link><pubDate>Wed, 03 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/12/</guid><description>12.1 概述 每秒事务处理数（Transactions Per Second，TPS） 12.3 Java内存模型 定义程序中各种变量的访问规则，即关注在虚拟机中把变量</description></item><item><title>第13章　线程安全与锁优化</title><link>https://yzlc.github.io/post/read/jvm/13/</link><pubDate>Wed, 03 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/13/</guid><description>13.2 线程安全 13.2.1 Java语言中的线程安全 不可变 基本数据类型：在定义时使用final关键字修饰 对象：需要保证其行为不会对其状态产生任何影响(Str</description></item><item><title>第11章　后端编译与优化</title><link>https://yzlc.github.io/post/read/jvm/11/</link><pubDate>Tue, 02 Jun 2020 11:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/11/</guid><description>11.2 即时编译器 Java程序最初都是通过解释器（Interpreter）进行解释执行的，当虚拟机发现某个方法或代码块的运行特别频繁，就会把这些代</description></item><item><title>第10章　前端编译与优化</title><link>https://yzlc.github.io/post/read/jvm/10/</link><pubDate>Tue, 02 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/10/</guid><description>10.2 Javac编译器 10.2.1 Javac的源码与调试 下载 10.2.2 解析与填充符号表 词法、语法分析 词法分析: 将源代码的字符流转变为标记（Token）集合的过程，</description></item><item><title>第8章　虚拟机字节码执行引擎</title><link>https://yzlc.github.io/post/read/jvm/8/</link><pubDate>Mon, 01 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/8/</guid><description>8.2 运行时栈帧结构 Java虚拟机以方法作为最基本的执行单元 栈帧（Stack Frame）:虚拟机进行方法调用和方法执行背后的数据结构，也是虚拟机</description></item><item><title>第7章　虚拟机类加载机制</title><link>https://yzlc.github.io/post/read/jvm/7/</link><pubDate>Wed, 27 May 2020 11:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/7/</guid><description>7.2 类加载的时机 加载（Loading）-&amp;gt;连接（Linking）[验证（Verification）-&amp;gt;准备（Preparation</description></item><item><title>6.4　字节码指令简介</title><link>https://yzlc.github.io/post/read/jvm/6.4/</link><pubDate>Wed, 27 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/6.4/</guid><description>6.4.1 字节码与数据类型 编译器会在编译期或运行期将byte和short类型的数据带符号扩展（Sign-Extend）为相应的int类型数据，将bo</description></item><item><title>6.3　Class类文件的结构</title><link>https://yzlc.github.io/post/read/jvm/6.3/</link><pubDate>Thu, 14 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/6.3/</guid><description>Class文件是一组以8个字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在文件之中，中间没有添加任何分隔符。当遇到需要占用8个</description></item><item><title>第4章　虚拟机性能监控、故障处理工具</title><link>https://yzlc.github.io/post/read/jvm/4/</link><pubDate>Tue, 12 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/4/</guid><description>4.2 基础故障处理工具 4.2.1 jps（JVM Process Status Tool）：虚拟机进程状况工具 命令格式：jps [ options ] [ hostid ] 选项 作用 -q 只输出LVMID,省略主类的名称 -m</description></item><item><title>第3章　垃圾收集器</title><link>https://yzlc.github.io/post/read/jvm/3.5/</link><pubDate>Sat, 09 May 2020 11:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/3.5/</guid><description>3.5 经典垃圾收集器 3.5.1 Serial收集器 单线程,HotSpot虚拟机运行在客户端模式下的默认新生代收集器，对于内存资源受限的环境，它是所有收集器</description></item><item><title>第3章　内存分配策略</title><link>https://yzlc.github.io/post/read/jvm/3/</link><pubDate>Sat, 09 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/3/</guid><description>3.2 对象已死？ 3.2.1 引用计数算法 在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为</description></item><item><title>第2章　Java内存区域与内存溢出异常</title><link>https://yzlc.github.io/post/read/jvm/2/</link><pubDate>Fri, 08 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/2/</guid><description>2.2 运行时数据区域 2.2.1 程序计数器（Program Counter Register） 字节码的行号指示器，程序控制流的指示器（分支、循环、跳转、异常处理、线程恢复</description></item><item><title>第1章　走近Java</title><link>https://yzlc.github.io/post/read/jvm/1/</link><pubDate>Thu, 30 Apr 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/1/</guid><description>1.6 实战:自己编译JDK 1.6.1 获取源码 下载 -&amp;gt; browse -&amp;gt; zip 1.6.3 构建编译环境(Ubuntu) 工具 命令 GCC sudo apt-get install build-essential FreeType sudo apt-get install libfreetype6-dev CUPS sudo apt-get install libcups2-dev X11 sudo apt-get install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev ALSA sudo apt-get install</description></item></channel></rss>