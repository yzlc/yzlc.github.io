<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>csapp on lim</title><link>https://yzlc.github.io/tags/csapp/</link><description>Recent content in csapp on lim</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 29 Apr 2020 10:32:33 +0800</lastBuildDate><atom:link href="https://yzlc.github.io/tags/csapp/index.xml" rel="self" type="application/rss+xml"/><item><title>第5章 优化程序性能</title><link>https://yzlc.github.io/post/read/csapp/5/</link><pubDate>Wed, 29 Apr 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/5/</guid><description>5.1 优化编译器的能力和局限性 5.2 表示程序性能 CPE(Cycles Per Element):每元素的周期数 循环展开(loop unrolling) 举例:前置和,每次迭代计算两个元素 5.3 程序示例</description></item><item><title>3.7 过程</title><link>https://yzlc.github.io/post/read/csapp/3.7/</link><pubDate>Tue, 31 Dec 2019 12:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/3.7/</guid><description>3.7 过程 3.7.1 运行时栈 x86-64的栈向低地址方向增长，栈指针%rsp指向栈顶元素。减小栈指针分配空间，增加栈指针释放空间 当x86-64过程需要的</description></item><item><title>3.6 控制</title><link>https://yzlc.github.io/post/read/csapp/3.6/</link><pubDate>Tue, 31 Dec 2019 11:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/3.6/</guid><description>3.6 控制 3.6.1 条件码 CF：进位。无符号溢出 ZF：零 SF：符号。负数 OF：溢出。补码溢出 指令 基于 描述 CMP S1，S2 S2-S1 比较 TEST S1，S2 S1&amp;amp;S2 测试 3.6.2 访问条件码</description></item><item><title>第3章 程序的机器级表示</title><link>https://yzlc.github.io/post/read/csapp/3/</link><pubDate>Tue, 31 Dec 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/3/</guid><description>3.2 程序编码 3.2.1 机器级代码 程序计数器（PC，在x86-64中用%rip表示）：给出要执行的下一条指令在内存中的地址 整数寄存器：包含16个命名位置</description></item><item><title>第2章 信息的表示和处理</title><link>https://yzlc.github.io/post/read/csapp/2/</link><pubDate>Mon, 30 Dec 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/2/</guid><description>2.1 信息存储 2.1.1 十六进制表示法 二进制 (i+4j,{i∈[0,3],j个0})&amp;lt;——&amp;gt;(4位一拆) 十六进制 (除16)&amp;lt;——&amp;gt</description></item><item><title>第1章 计算机系统漫游</title><link>https://yzlc.github.io/post/read/csapp/1/</link><pubDate>Sun, 29 Dec 2019 10:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/1/</guid><description>1.9.1 Amdahl&amp;rsquo;s law（阿姆达尔定律） 要想显著加速整个系统，必须提升全系统中相当大的部分的速度 若系统执行某应用程序需要时间为$T_{old}$。 假设系统</description></item></channel></rss>