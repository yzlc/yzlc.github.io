<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on YZLC</title><link>https://yzlc.github.io/tags/java/</link><description>Recent content in java on YZLC</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 28 Apr 2021 14:55:33 +0800</lastBuildDate><atom:link href="https://yzlc.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>nio</title><link>https://yzlc.github.io/post/note/dev/java/nio/</link><pubDate>Wed, 28 Apr 2021 14:55:33 +0800</pubDate><guid>https://yzlc.github.io/post/note/dev/java/nio/</guid><description>&lt;blockquote>
&lt;p>Non-blocking IO。IO面向字节流和字符流（文件）；NIO面向通道和缓冲区（网络）&lt;/p>
&lt;/blockquote>
&lt;h2 id="channel">Channel&lt;/h2>
&lt;blockquote>
&lt;p>通道&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>类型：FileChannel、DatagramChannel（UDP）、SocketChannel（TCP）、ServerSocketChannel（TCP监听）&lt;/li>
&lt;li>方法：read、register、configureBlocking&lt;/li>
&lt;/ul>
&lt;h2 id="buffer">Buffer&lt;/h2>
&lt;blockquote>
&lt;p>缓冲区&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>属性：capacity容量、position位置、limit上限、mark标记position通过reset恢复&lt;/li>
&lt;li>类型：ByteBuffer、MappedByteBuffer、CharBuffer。。。&lt;/li>
&lt;li>方法：allocate、flip（读模式）、put、get&lt;/li>
&lt;/ul>
&lt;h2 id="selector">Selector&lt;/h2>
&lt;blockquote>
&lt;p>选择器&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>方法：open、selectedKeys、select、&lt;/li>
&lt;li>SelectionKey监听状态：OP_CONNECT、OP_ACCEPT、OP_READ、OP_WRITE&lt;/li>
&lt;/ul></description></item><item><title>effective java</title><link>https://yzlc.github.io/post/read/effectivejava/effectivejava/</link><pubDate>Mon, 26 Aug 2019 10:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/effectivejava/effectivejava/</guid><description>&lt;h2 id="1-考虑使用静态工厂方法替代构造方法">1. 考虑使用静态工厂方法替代构造方法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Boolean&lt;/span> &lt;span class="nf">valueOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">return&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">Boolean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TRUE&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">Boolean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">FALSE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="优点">优点&lt;/h3>
&lt;ul>
&lt;li>有名字(BigInteger.probablePrime)&lt;/li>
&lt;li>不用每次调用都创建新对象(Boolean.valueOf(boolean))&lt;/li>
&lt;li>可以返回子类型的对象(Collections)&lt;/li>
&lt;li>返回对象的类可以根据输入参数的不同而不同(EnumSet.noneOf())&lt;/li>
&lt;li>编写包含该方法的类时，返回的对象的类不需要存在(ServiceLoader)&lt;/li>
&lt;/ul>
&lt;h3 id="缺点">缺点&lt;/h3>
&lt;ul>
&lt;li>没有公共或受保护构造方法的类不能被子类化(Collections)&lt;/li>
&lt;li>程序员很难找到它们&lt;/li>
&lt;/ul>
&lt;h2 id="2-当构造方法参数过多时使用-builder-模式">2. 当构造方法参数过多时使用 builder 模式&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://yzlc.github.io/files/read/effectiveJava/2/NutritionFacts.java" >示例下载&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Builder Pattern
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">NutritionFacts&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">calories&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Builder&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">calories&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Builder&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Builder&lt;/span> &lt;span class="nf">calories&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">calories&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">NutritionFacts&lt;/span> &lt;span class="nf">build&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NutritionFacts&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">NutritionFacts&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Builder&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">calories&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">calories&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="3-使用私有构造方法或枚举类实现-singleton-属性">3. 使用私有构造方法或枚举类实现 Singleton 属性&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://yzlc.github.io/files/read/effectiveJava/3/Elvis.java" >示例下载&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Singleton with static factory
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1.防范AccessibleObject.setAccessible：修改构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 2.implements Serializable：声明实例属性transient，并提供readResolve方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Elvis&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Elvis&lt;/span> &lt;span class="n">INSTANCE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Elvis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">private&lt;/span> &lt;span class="nf">Elvis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Elvis&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">INSTANCE&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">leaveTheBuilding&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Enum singleton - the preferred approach
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 不适用：单例必须继承 Enum 以外的父类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">Elvis&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="n">INSTANCE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">leaveTheBuilding&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="4-使用私有构造方法执行非实例化">4. 使用私有构造方法执行非实例化&lt;/h2>
&lt;ul>
&lt;li>Java8，可以放接口中&lt;/li>
&lt;/ul>
&lt;h2 id="5-依赖注入优于硬连接资源hardwiring-resources">5. 依赖注入优于硬连接资源（hardwiring resources）&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Dependency injection provides flexibility and testability
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SpellChecker&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Lexicon&lt;/span> &lt;span class="n">dictionary&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">public&lt;/span> &lt;span class="nf">SpellChecker&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Lexicon&lt;/span> &lt;span class="n">dictionary&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dictionary&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requireNonNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dictionary&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="6-避免创建不必要的对象">6. 避免创建不必要的对象&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Performance can be greatly improved!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">static&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isRomanNumeral&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">matches&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;^(?=.)M*(C[MD]|D?C{0,3})&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">      &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Reusing expensive object for improved performance
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RomanNumerals&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Pattern&lt;/span> &lt;span class="n">ROMAN&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Pattern&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compile&lt;/span>&lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">      &lt;span class="s">&amp;#34;^(?=.)M*(C[MD]|D?C{0,3})&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">      &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">static&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isRomanNumeral&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="k">return&lt;/span> &lt;span class="n">ROMAN&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">matcher&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">matches&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>优先使用基本类型而不是装箱的基本类型，也要注意无意识的自动装箱&lt;/li>
&lt;/ul>
&lt;h2 id="7-消除过期的对象引用">7. 消除过期的对象引用&lt;/h2>
&lt;ul>
&lt;li>类自己管理内存时，应该警惕内存泄漏问题&lt;/li>
&lt;li>缓存&lt;/li>
&lt;li>监听器和其他回调&lt;/li>
&lt;/ul>
&lt;h2 id="8-避免使用-finalizer-和-cleaner-机制">8. 避免使用 Finalizer 和 Cleaner 机制&lt;/h2>
&lt;h2 id="9-使用-try-with-resources-语句替代-try-finally-语句">9. 使用 try-with-resources 语句替代 try-finally 语句&lt;/h2>
&lt;h2 id="10-重写-equals-方法时遵守通用约定">10. 重写 equals 方法时遵守通用约定&lt;/h2>
&lt;h3 id="约定">约定&lt;/h3>
&lt;ul>
&lt;li>自反性：x.equals(x) == true&lt;/li>
&lt;li>对称性：x.equals(y) == true，则y.equals(x) == true&lt;/li>
&lt;li>传递性：x.equals(y) == true &amp;amp;&amp;amp; y.equals(z) == true，则x.equals(z) == true&lt;/li>
&lt;li>一致性：多次调用结果相同（不要依赖不可靠资源） 反例：java.net.URL&lt;/li>
&lt;li>非空性：必须做&lt;code>if(!(o instanceof MyType))&lt;/code>所以不需要&lt;code>if(o == null)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="写法">写法&lt;/h3>
&lt;ol>
&lt;li>if(o == MyType)&lt;/li>
&lt;li>if(!(o instanceof MyType))&lt;/li>
&lt;li>非float或double的基本类型用==比较，引用类型递归调用equals
&lt;ul>
&lt;li>因为存在Float(Double).NaN、-0.0f，使用Float(Double).compare(float,float)&lt;/li>
&lt;li>不使用Float(Double).equals，自动装箱性能差&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="开源框架">开源框架&lt;/h3>
&lt;ul>
&lt;li>谷歌AutoValue&lt;/li>
&lt;/ul>
&lt;h2 id="11-重写-equals-方法时同时也要重写-hashcode-方法">11. 重写 equals 方法时同时也要重写 hashcode 方法&lt;/h2>
&lt;h3 id="约定-1">约定&lt;/h3>
&lt;ol>
&lt;li>重复调用hashCode返回相同的值&lt;/li>
&lt;li>equals(Object)相等，hashCode相等&lt;/li>
&lt;li>为不相等的对象生成不同的结果可能会提高hash tables的性能。&lt;/li>
&lt;/ol>
&lt;h3 id="写法-1">写法&lt;/h3>
&lt;ol>
&lt;li>int result = 重要属性c.hashCode(areaCode);&lt;/li>
&lt;li>result = 31 - result + 剩余的重要属性f.hashCode;
&lt;ol>
&lt;li>基本类型：Type.hashCode(f)&lt;/li>
&lt;li>引用类型：
&lt;ul>
&lt;li>equals递归比较：递归调用hashCode&lt;/li>
&lt;li>否则计算范式：例如字段为空，使用0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数组：
&lt;ul>
&lt;li>部分重要元素：递归计算哈希码并合并&lt;/li>
&lt;li>没有重要的元素：使用不为0常量&lt;/li>
&lt;li>所有元素都重要：使用Arrays.hashCode&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>return result;&lt;/li>
&lt;/ol>
&lt;h2 id="12-始终重写-tostring-方法">12. 始终重写 toString 方法&lt;/h2>
&lt;h2 id="13-谨慎地重写-clone-方法">13. 谨慎地重写 clone 方法&lt;/h2>
&lt;ul>
&lt;li>复制功能最好由构造方法或工厂提供&lt;/li>
&lt;/ul>
&lt;h2 id="14-考虑实现-comparable-接口">14. 考虑实现 Comparable 接口&lt;/h2>
&lt;h3 id="约定-2">约定&lt;/h3>
&lt;ul>
&lt;li>自反性：x.compareTo(y) == 0，则sgn(x.compareTo(z)) == sgn(y.compareTo(z))&lt;/li>
&lt;li>对称性：sgn(x.compareTo(y)) == -sgn(y. compareTo(x))&lt;/li>
&lt;li>传递性：(x.compareTo(y) &amp;gt; 0 &amp;amp;&amp;amp; y.compareTo(z) &amp;gt; 0)，则x.compareTo(z) &amp;gt; 0&lt;/li>
&lt;li>推荐：(x.compareTo(y) == 0) == (x.equals(y))
&lt;ul>
&lt;li>反例：添加new BigDecimal(&amp;ldquo;1.0&amp;rdquo;)和new BigDecimal(&amp;ldquo;1.00&amp;rdquo;)
&lt;ul>
&lt;li>HashSet：调用equals方法 集合中两个元素&lt;/li>
&lt;li>TreeSet：调用compareTo方法 集合中一个元素&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="写法-2">写法&lt;/h3>
&lt;p>在compareTo方法中使用关系运算符「&amp;lt;」和「&amp;gt;」是冗长且容易出错的，不推荐&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Multiple-field `Comparable` with primitive fields
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PhoneNumber&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="n">Short&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">areaCode&lt;/span>&lt;span class="o">](&lt;/span>&lt;span class="n">http&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="c1">//Short.compare(areaCode), pn.areaCode);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>  &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="n">Short&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="o">](&lt;/span>&lt;span class="n">http&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="c1">//Short.compare(prefix), pn.prefix);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>    &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">      &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="n">Short&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">lineNum&lt;/span>&lt;span class="o">](&lt;/span>&lt;span class="n">http&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="c1">//Short.compare(lineNum), pn.lineNum);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Comparable with comparator construction methods
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PhoneNumber&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">COMPARATOR&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="n">comparingInt&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">PhoneNumber&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">areaCode&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="o">.&lt;/span>&lt;span class="na">thenComparingInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">pn&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">prefix&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="o">.&lt;/span>&lt;span class="na">thenComparingInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">pn&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lineNum&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PhoneNumber&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">return&lt;/span> &lt;span class="n">COMPARATOR&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="15-使类和成员的可访问性最小化">15. 使类和成员的可访问性最小化&lt;/h2>
&lt;ul>
&lt;li>类具有公共静态final数组属性，或返回这样一个属性的访问器是错误的&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Potential security hole!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Thing&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">VALUES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//解决方案
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//方案1：添加一个公共的不可变列表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Thing&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">PRIVATE_VALUES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thing&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">VALUES&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">unmodifiableList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PRIVATE_VALUES&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//方案2：添加一个返回私有数组拷贝
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Thing&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">PRIVATE_VALUES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Thing&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">values&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">return&lt;/span> &lt;span class="n">PRIVATE_VALUES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">clone&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="16-在公共类中使用访问方法而不是公共属性">16. 在公共类中使用访问方法而不是公共属性&lt;/h2>
&lt;h2 id="17-最小化可变性">17. 最小化可变性&lt;/h2>
&lt;h3 id="不可变类">不可变类&lt;/h3>
&lt;p>String、基本类型包装类、BigInteger、BigDecimal&lt;/p>
&lt;h3 id="规则">规则&lt;/h3>
&lt;ol>
&lt;li>不要提供修改对象状态的方法（也称为 mutators）&lt;/li>
&lt;li>确保这个类不能被继承&lt;/li>
&lt;li>把所有属性设置为 final&lt;/li>
&lt;li>把所有的属性设置为 private&lt;/li>
&lt;li>确保对任何可变组件的互斥访问&lt;/li>
&lt;/ol>
&lt;h3 id="优点-1">优点&lt;/h3>
&lt;ul>
&lt;li>不可变对象很简单&lt;/li>
&lt;li>不可变对象本质上是线程安全的&lt;/li>
&lt;li>不可变对象为其他对象提供了很好的构件&lt;/li>
&lt;li>不可变对象提供了免费的原子失败机制&lt;/li>
&lt;/ul>
&lt;h3 id="缺点-1">缺点&lt;/h3>
&lt;ul>
&lt;li>对于每个不同的值都需要一个单独的对象&lt;/li>
&lt;/ul>
&lt;h3 id="实现">实现&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Immutable class with static factories instead of constructors
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Complex&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">im&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">private&lt;/span> &lt;span class="nf">Complex&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">im&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">re&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">im&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">im&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Complex&lt;/span> &lt;span class="nf">valueOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">im&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Complex&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">re&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">im&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="c1">// Remainder unchanged
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="18-组合优于继承">18. 组合优于继承&lt;/h2>
&lt;ul>
&lt;li>InstrumentedHashSet&lt;/li>
&lt;li>使用包装类（Decorator）ForwardingSet 改进&lt;/li>
&lt;li>只有「is-a」关系，才能使用继承 反例：Stack extends Vector；Properties extends Hashtable&lt;/li>
&lt;/ul>
&lt;h2 id="19-要么设计继承并提供文档说明要么禁用继承">19. 要么设计继承并提供文档说明，要么禁用继承&lt;/h2>
&lt;h2 id="20-接口优于抽象类">20. 接口优于抽象类&lt;/h2>
&lt;ul>
&lt;li>通过抽象类实现接口默认方法 例如：AbstractList implements List&lt;/li>
&lt;/ul>
&lt;h2 id="21-为后代设计接口">21. 为后代设计接口&lt;/h2>
&lt;h2 id="22-接口仅用来定义类型">22. 接口仅用来定义类型&lt;/h2>
&lt;ul>
&lt;li>常量接口模式是对接口的糟糕使用&lt;/li>
&lt;/ul>
&lt;h2 id="23-类层次结构优于标签类">23. 类层次结构优于标签类&lt;/h2>
&lt;h2 id="24-支持使用静态成员类而不是非静态类">24. 支持使用静态成员类而不是非静态类&lt;/h2>
&lt;ul>
&lt;li>如果你声明了一个不需要访问宿主实例的成员类，总是把 static 修饰符放在它的声明中，使它成为一个静态成员
类，而不是非静态的成员类&lt;/li>
&lt;/ul>
&lt;h2 id="25-将源文件限制为单个顶级类">25. 将源文件限制为单个顶级类&lt;/h2>
&lt;h2 id="26-不要使用原始类型">26. 不要使用原始类型&lt;/h2>
&lt;h2 id="27-消除非检查警告">27. 消除非检查警告&lt;/h2>
&lt;h2 id="28-列表优于数组">28. 列表优于数组&lt;/h2>
&lt;h2 id="29-优先考虑泛型">29. 优先考虑泛型&lt;/h2>
&lt;h2 id="30-优先使用泛型方法">30. 优先使用泛型方法&lt;/h2>
&lt;h2 id="31-使用限定通配符来增加-api-的灵活性">31. 使用限定通配符来增加 API 的灵活性&lt;/h2>
&lt;h2 id="32-合理地结合泛型和可变参数">32. 合理地结合泛型和可变参数&lt;/h2>
&lt;h2 id="33-优先考虑类型安全的异构容器">33. 优先考虑类型安全的异构容器&lt;/h2>
&lt;h2 id="34-使用枚举类型替代整型常量">34. 使用枚举类型替代整型常量&lt;/h2>
&lt;h2 id="35-使用实例属性替代序数">35. 使用实例属性替代序数&lt;/h2>
&lt;h2 id="36-使用-enumset-替代位属性">36. 使用 EnumSet 替代位属性&lt;/h2>
&lt;h2 id="37-使用-enummap-替代序数索引">37. 使用 EnumMap 替代序数索引&lt;/h2>
&lt;h2 id="38-使用接口模拟可扩展的枚举">38. 使用接口模拟可扩展的枚举&lt;/h2>
&lt;h2 id="39-注解优于命名模式">39. 注解优于命名模式&lt;/h2>
&lt;h2 id="40-始终使用-override-注解">40. 始终使用 Override 注解&lt;/h2>
&lt;h2 id="41-使用标记接口定义类型">41. 使用标记接口定义类型&lt;/h2>
&lt;h2 id="42-lambda-表达式优于匿名类">42. lambda 表达式优于匿名类&lt;/h2>
&lt;h2 id="43-方法引用优于-lambda-表达式">43. 方法引用优于 lambda 表达式&lt;/h2>
&lt;h2 id="44-优先使用标准的函数式接口">44. 优先使用标准的函数式接口&lt;/h2>
&lt;h2 id="45-明智审慎地使用-stream">45. 明智审慎地使用 Stream&lt;/h2>
&lt;h2 id="46-优先考虑流中无副作用的函数">46. 优先考虑流中无副作用的函数&lt;/h2>
&lt;h2 id="47-优先使用-collection-而不是-stream-来作为方法的返回类型">47. 优先使用 Collection 而不是 Stream 来作为方法的返回类型&lt;/h2>
&lt;h2 id="48-谨慎使用流并行">48. 谨慎使用流并行&lt;/h2>
&lt;h2 id="49-检查参数有效性">49. 检查参数有效性&lt;/h2>
&lt;ul>
&lt;li>Objects.requireNonNull&lt;/li>
&lt;/ul>
&lt;h2 id="50-必要时进行防御性拷贝">50. 必要时进行防御性拷贝&lt;/h2>
&lt;h2 id="51-仔细设计方法签名">51. 仔细设计方法签名&lt;/h2>
&lt;h2 id="52-明智审慎地使用重载">52. 明智审慎地使用重载&lt;/h2>
&lt;h2 id="53-明智审慎地使用可变参数">53. 明智审慎地使用可变参数&lt;/h2>
&lt;h2 id="54-返回空的数组或集合不要返回-null">54. 返回空的数组或集合，不要返回 null&lt;/h2>
&lt;ul>
&lt;li>Collections.emptyList&lt;/li>
&lt;/ul>
&lt;h2 id="55-明智审慎地返回-optional">55. 明智审慎地返回 Optional&lt;/h2>
&lt;h2 id="56-为所有已公开的-api-元素编写文档注释">56. 为所有已公开的 API 元素编写文档注释&lt;/h2>
&lt;h2 id="57-最小化局部变量的作用域">57. 最小化局部变量的作用域&lt;/h2>
&lt;h2 id="58-for-each-循环优于传统-for-循环">58. for-each 循环优于传统 for 循环&lt;/h2>
&lt;h2 id="59-了解并使用库">59. 了解并使用库&lt;/h2>
&lt;ul>
&lt;li>不使用Random,用ThreadLocalRandom&lt;/li>
&lt;li>每个程序员都应该熟悉 java.lang、java.util 和 java.io 的基础知识及其子包&lt;/li>
&lt;/ul>
&lt;h2 id="60-若需要精确答案就应避免使用-float-和-double-类型">60. 若需要精确答案就应避免使用 float 和 double 类型&lt;/h2>
&lt;h2 id="61-基本数据类型优于包装类">61. 基本数据类型优于包装类&lt;/h2>
&lt;ul>
&lt;li>将 == 操作符应用于包装类型几乎都是错误的&lt;/li>
&lt;/ul>
&lt;h2 id="62-当使用其他类型更合适时应避免使用字符串">62. 当使用其他类型更合适时应避免使用字符串&lt;/h2>
&lt;h2 id="63-当心字符串连接引起的性能问题">63. 当心字符串连接引起的性能问题&lt;/h2>
&lt;h2 id="64-通过接口引用对象">64. 通过接口引用对象&lt;/h2>
&lt;h2 id="65-接口优于反射">65. 接口优于反射&lt;/h2>
&lt;h2 id="66-明智审慎地本地方法">66. 明智审慎地本地方法&lt;/h2>
&lt;h2 id="67-明智审慎地进行优化">67. 明智审慎地进行优化&lt;/h2>
&lt;h2 id="68-遵守被广泛认可的命名约定">68. 遵守被广泛认可的命名约定&lt;/h2>
&lt;ul>
&lt;li>转换对象类型（返回不同类型的独立对象）的实例方法通常称为 toType，例如
toString 或 toArray。返回与接收对象类型不同的视图的方法通常称为 asType，例如 asList。返回与调
用它们的对象具有相同值的基本类型的方法通常称为类型值，例如 intValue。静态工厂的常见名称包括 from、of、
valueOf、instance、getInstance、newInstance、getType 和 newType&lt;/li>
&lt;/ul>
&lt;h2 id="69-只针对异常的情况下才使用异常">69. 只针对异常的情况下才使用异常&lt;/h2>
&lt;h2 id="70-对可恢复的情况使用受检异常对编程错误使用运行时异常">70. 对可恢复的情况使用受检异常，对编程错误使用运行时异常&lt;/h2>
&lt;h2 id="71-避免不必要的使用受检异常">71. 避免不必要的使用受检异常&lt;/h2>
&lt;h2 id="72-优先使用标准的异常">72. 优先使用标准的异常&lt;/h2>
&lt;h2 id="73-抛出与抽象对应的异常">73. 抛出与抽象对应的异常&lt;/h2>
&lt;h2 id="74-每个方法抛出的异常都需要创建文档">74. 每个方法抛出的异常都需要创建文档&lt;/h2>
&lt;h2 id="75-在细节消息中包含失败一捕获信息">75. 在细节消息中包含失败一捕获信息&lt;/h2>
&lt;h2 id="76-保持失败原子性">76. 保持失败原子性&lt;/h2>
&lt;h2 id="77-不要忽略异常">77. 不要忽略异常&lt;/h2>
&lt;h2 id="78-同步访问共享的可变数据">78. 同步访问共享的可变数据&lt;/h2>
&lt;h2 id="79-避免过度同步">79. 避免过度同步&lt;/h2>
&lt;h2 id="80-executor-task-和-stream-优先于线程">80. executor 、task 和 stream 优先于线程&lt;/h2>
&lt;h2 id="81-并发工具优于-wait-和-notify">81. 并发工具优于 wait 和 notify&lt;/h2>
&lt;h2 id="82-文档应包含线程安全属性">82. 文档应包含线程安全属性&lt;/h2>
&lt;h2 id="83-明智审慎的使用延迟初始化">83. 明智审慎的使用延迟初始化&lt;/h2>
&lt;h2 id="84-不要依赖线程调度器">84. 不要依赖线程调度器&lt;/h2>
&lt;h2 id="85-优先选择-java-序列化的替代方案">85. 优先选择 Java 序列化的替代方案&lt;/h2>
&lt;h2 id="86-非常谨慎地实现-serializable">86. 非常谨慎地实现 Serializable&lt;/h2>
&lt;h2 id="87-考虑使用自定义的序列化形式">87. 考虑使用自定义的序列化形式&lt;/h2>
&lt;h2 id="88-保护性的编写-readobject-方法">88. 保护性的编写 readObject 方法&lt;/h2>
&lt;h2 id="89-对于实例控制枚举类型优于-readresolve">89. 对于实例控制，枚举类型优于 readResolve&lt;/h2>
&lt;h2 id="90-考虑用序列化代理代替序列化实例">90. 考虑用序列化代理代替序列化实例&lt;/h2></description></item></channel></rss>