<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>organization on YZLC</title><link>https://yzlc.github.io/tags/organization/</link><description>Recent content in organization on YZLC</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 01 May 2022 11:39:33 +0800</lastBuildDate><atom:link href="https://yzlc.github.io/tags/organization/index.xml" rel="self" type="application/rss+xml"/><item><title>第五章 中央处理器</title><link>https://yzlc.github.io/post/read/base/organization/5/</link><pubDate>Sun, 01 May 2022 11:39:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/organization/5/</guid><description>&lt;h2 id="cpu的功能和结构">CPU的功能和结构&lt;/h2>
&lt;ul>
&lt;li>功能：指令控制、操作控制、时间控制、数据加工、中断处理&lt;/li>
&lt;li>基本结构：ALU、寄存器、中断系统、CU&lt;/li>
&lt;li>运算器：算术逻辑单元(ALU)、通用寄存器组、暂存寄存器、累加寄存器(ACC)、程序状态字寄存器(PSW)、移位器、计数器&lt;/li>
&lt;li>控制器：程序计数器(PC)、指令寄存器(IR)、指令译码器、微操作信号发生器、时序系统、存储器地址寄存器(MAR)、存储器地址寄存器(MDR)&lt;/li>
&lt;/ul>
&lt;h2 id="指令执行过程">指令执行过程&lt;/h2>
&lt;ul>
&lt;li>指令周期：机器周期-&amp;gt;时钟周期&lt;/li>
&lt;li>数据流：取值周期、间指周期、执行周期、中断周期&lt;/li>
&lt;li>执行方案：单指令周期、多指令周期、流水线方案&lt;/li>
&lt;/ul>
&lt;h2 id="数据通路的功能和基本结构">数据通路的功能和基本结构&lt;/h2>
&lt;p>专用通路(多路选择器MUX、三态门)、内部总线(ALU需要配合暂存器使用)&lt;/p>
&lt;h2 id="控制器的功能和工作原理">控制器的功能和工作原理&lt;/h2>
&lt;ul>
&lt;li>功能：取指令、分析指令、执行指令&lt;/li>
&lt;li>硬布线(RISC)：微操作控制信号即时产生。分析每个阶段的微操作序列、选择CPU的控制方式、安排微操作时序、电路设计&lt;/li>
&lt;li>微程序(CISC)：微操作控制信号存储在控制存储器。微地址形成部件、微地址寄存器(CMAR)、控制存储器(CM)、微指令寄存器(CMDR)&lt;/li>
&lt;/ul>
&lt;h2 id="指令流水线">指令流水线&lt;/h2>
&lt;ul>
&lt;li>定义：取指、分析、执行&lt;/li>
&lt;/ul>
&lt;p>影响因素&lt;/p>
&lt;ul>
&lt;li>结构相关(资源冲突)：暂停相关指令、资源重复配置&lt;/li>
&lt;li>数据相关：暂停相关指令：硬件stall、软件NOP、数据旁路技术、编译优化，调整指令顺序&lt;/li>
&lt;li>控制相关：分支预测、预取两个方向的指令、加快和提前形成条件码、提高转移方向的猜准率&lt;/li>
&lt;/ul>
&lt;p>多发技术：超标量流水线、超流水线、超长指令字&lt;/p></description></item><item><title>第四章 指令系统</title><link>https://yzlc.github.io/post/read/base/organization/4/</link><pubDate>Sun, 01 May 2022 10:22:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/organization/4/</guid><description>&lt;h2 id="指令格式">指令格式&lt;/h2>
&lt;ul>
&lt;li>操作码：定长、变长(扩展)&lt;/li>
&lt;li>地址码：定长、变长。四地址-零地址&lt;/li>
&lt;/ul>
&lt;h2 id="指令寻址">指令寻址&lt;/h2>
&lt;blockquote>
&lt;p>程序计数器PC&lt;/p>
&lt;/blockquote>
&lt;h3 id="指令寻址-1">指令寻址&lt;/h3>
&lt;ul>
&lt;li>顺序寻址&lt;/li>
&lt;li>跳跃寻址&lt;/li>
&lt;/ul>
&lt;h3 id="数据寻址">数据寻址&lt;/h3>
&lt;ul>
&lt;li>寻址特征：隐含(程序指定)、立即(A即是操作数)、堆栈；直接(EA=A)、间接(EA=(A))、寄存器(EA=R)、寄存器间接(EA=(R))&lt;/li>
&lt;/ul>
&lt;p>偏移寻址&lt;/p>
&lt;ul>
&lt;li>基址(EA=(BR)+A)：多道程序&lt;/li>
&lt;li>变址(EA=(IX)+A)：循环程序&lt;/li>
&lt;li>相对(EA=(PC)+A)：转移指令&lt;/li>
&lt;/ul>
&lt;h2 id="cisc和risc">CISC和RISC&lt;/h2>
&lt;ul>
&lt;li>CISC(complex)：x86架构，笔记本、台式&lt;/li>
&lt;li>RISC(reduced 2-8定律)：ARM架构，手机、平板。&lt;/li>
&lt;/ul></description></item><item><title>第三章 存储系统</title><link>https://yzlc.github.io/post/read/base/organization/3/</link><pubDate>Sat, 23 Apr 2022 10:29:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/organization/3/</guid><description>&lt;h2 id="主存">主存&lt;/h2>
&lt;ul>
&lt;li>译码驱动：地址信号(地址总线) -&amp;gt; 选通信号(存储单元)。MAR(Memory Address Register)：地址寄存器。实际放CPU&lt;/li>
&lt;li>存储矩阵：存储元-&amp;gt;存储单元-&amp;gt;存储体&lt;/li>
&lt;li>读写电路：MDR(Memory Data Register)：数据寄存器。实际放CPU&lt;/li>
&lt;li>地址线、数据线、片选线(选存储芯片)、读写控制线&lt;/li>
&lt;/ul>
&lt;h2 id="局部性原理">局部性原理&lt;/h2>
&lt;ul>
&lt;li>空间局部性：要用的信息在存储空间上邻近&lt;/li>
&lt;li>时间局部性：要用的信息正在使用&lt;/li>
&lt;/ul>
&lt;h2 id="cache">Cache&lt;/h2>
&lt;blockquote>
&lt;p>高速缓冲存储器，Cache-主存层次，硬件实现，解决速度不匹配问题&lt;/p>
&lt;/blockquote>
&lt;h3 id="地址映射">地址映射&lt;/h3>
&lt;blockquote>
&lt;p>怎么放&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>全相联：主存字块标记|字块内地址&lt;/li>
&lt;li>直接映射：主存字块标记|Cache字块地址|字块内地址&lt;/li>
&lt;li>组相联：主存字块标记|组地址|字块内地址&lt;/li>
&lt;li>标记项：有效位、标记位(主存字块标记)&lt;/li>
&lt;/ul>
&lt;h3 id="替换算法">替换算法&lt;/h3>
&lt;blockquote>
&lt;p>满了如何处理&lt;/p>
&lt;/blockquote>
&lt;p>RAND、FIFO、LRU(时间局部性)、LFU&lt;/p>
&lt;h3 id="写策略">写策略&lt;/h3>
&lt;blockquote>
&lt;p>一致性&lt;/p>
&lt;/blockquote>
&lt;p>命中：&lt;/p>
&lt;ul>
&lt;li>全写法(write-through)：同时写入Cache和主存&lt;/li>
&lt;li>写回法(write-back)：块被换出时才写回主存。搭配写分配法&lt;/li>
&lt;/ul>
&lt;p>未命中：&lt;/p>
&lt;ul>
&lt;li>写分配法(write-allocate)：把主存中的块调入Cache修改&lt;/li>
&lt;li>非写分配法(not-write-allocate)：只写主存&lt;/li>
&lt;/ul>
&lt;h2 id="虚拟存储器">虚拟存储器&lt;/h2>
&lt;blockquote>
&lt;p>逻辑模型，主存-辅存层次，硬件+操作系统实现，解决容量问题&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>页式存储：虚拟空间与主存空间都被划分成同样大小的页，主存的页称为实页，虚存的页称为虚页&lt;/li>
&lt;li>段式存储：按程序的逻辑结构划分，段长度因程序而异。分为段号和段内地址&lt;/li>
&lt;li>慢表(Page)：主存中的页表&lt;/li>
&lt;li>快表(TLB)：提高变换速度，用高速缓冲存储器存放常用的页表项&lt;/li>
&lt;/ul>
&lt;h2 id="半导体存储器">半导体存储器&lt;/h2>
&lt;ul>
&lt;li>SRAM(Static Random Access Memory)：触发器，作高速缓存&lt;/li>
&lt;li>DRAM(Dynamic Random Access Memory)：电容，需刷新，作主存&lt;/li>
&lt;/ul></description></item><item><title>第二章 数据的表示和运算</title><link>https://yzlc.github.io/post/read/base/organization/2/</link><pubDate>Sat, 26 Mar 2022 13:07:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/organization/2/</guid><description>&lt;h2 id="进制转换">进制转换&lt;/h2>
&lt;h3 id="十进制k进制">十进制→K进制&lt;/h3>
&lt;blockquote>
&lt;p>按权展开相加法：通过分析十进制75位权r为10 推导出K进制→十进制&lt;/p>
&lt;/blockquote>
&lt;p>$K_{n} \times r_{n} + \dots + k_{0} \times r^{0} $&lt;/p>
&lt;h3 id="十进制k进制-1">十进制→K进制&lt;/h3>
&lt;ul>
&lt;li>除基取余法：尝试除r得到余数 发现取出了最低位的值 重复操作得到K进制&lt;/li>
&lt;/ul>
&lt;p>十进制小数0.3→K进制&lt;/p>
&lt;ul>
&lt;li>乘基取整法：同理 对于小数 乘r得到整数部分 重复操作&lt;/li>
&lt;/ul>
&lt;h3 id="二进制2n与四八十六进制转换">二进制$2^{n}$与四、八、十六进制转换&lt;/h3>
&lt;p>分组转换：n位一组，每组转成对应进制，不足补0&lt;/p>
&lt;h2 id="字符与字符串">字符与字符串&lt;/h2>
&lt;p>大(小)端模式：存储单元内高(低)位字节 -&amp;gt; 低(高)位字节的顺序。ABC(CBA)&lt;/p>
&lt;p>ASCII码：数字、字母、符号共128个字符 -&amp;gt; 7位二进制编码。数字、大写字母、小写字母各自连续，三者之间不连续&lt;/p>
&lt;h2 id="校验码">校验码&lt;/h2>
&lt;ul>
&lt;li>码距：几位编码不同，用于检错和纠错&lt;/li>
&lt;li>奇(偶)校验：补高位，保证奇(偶)数个1&lt;/li>
&lt;li>海明码：二分分组校验。检两位错，纠一位错
&lt;ol>
&lt;li>确认校验位数k：信息位n，则状态有$2^{k}≥n+k+1$种&lt;/li>
&lt;li>确认校验位置：2的次幂(唯一定位校验码出错)&lt;/li>
&lt;li>分组数据位：校验位负责该位置的数据位(定位到出错位置)&lt;/li>
&lt;li>校验规则：奇偶校验(校验位与数据位异或)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="定点数">定点数&lt;/h2>
&lt;ul>
&lt;li>补码：简化加减运算。负数：数值位取反加1&lt;/li>
&lt;li>反码：原、补码转换的中间过渡&lt;/li>
&lt;li>移码：易于比较大小&lt;/li>
&lt;/ul>
&lt;h2 id="浮点数">浮点数&lt;/h2>
&lt;ul>
&lt;li>阶码(E)：范围和小数点实际位置。用移码(补码)表示&lt;/li>
&lt;li>尾数(M)：精度。用原码(补码)表示&lt;/li>
&lt;li>IEEE754标准：科学计数法。$N = r^E × M$&lt;/li>
&lt;/ul>
&lt;h2 id="算术逻辑单元">算术逻辑单元&lt;/h2>
&lt;blockquote>
&lt;p>ALU：算术运算、逻辑运算、移位求补等&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>与门天然逻辑：屏蔽，异或天然逻辑：加法、奇偶&lt;/li>
&lt;/ul></description></item></channel></rss>