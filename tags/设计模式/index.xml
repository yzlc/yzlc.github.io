<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on YZLC</title><link>https://yzlc.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 设计模式 on YZLC</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 15 Jul 2019 13:32:28 +0800</lastBuildDate><atom:link href="https://yzlc.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>行为型模式</title><link>https://yzlc.github.io/post/read/designpattern/behavioral/</link><pubDate>Mon, 15 Jul 2019 13:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/designpattern/behavioral/</guid><description>策略模式（Strategy） 定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。 优点 以相同的</description></item><item><title>结构型模式</title><link>https://yzlc.github.io/post/read/designpattern/structural/</link><pubDate>Mon, 15 Jul 2019 12:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/designpattern/structural/</guid><description>装饰模式（Decorator） 动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活 优点 可以简化原有的类 可以去除相关</description></item><item><title>创建型模式</title><link>https://yzlc.github.io/post/read/designpattern/creational/</link><pubDate>Mon, 15 Jul 2019 11:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/designpattern/creational/</guid><description>简单工厂模式 优点 工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖 应用 用反射去除s</description></item><item><title>设计模式</title><link>https://yzlc.github.io/post/read/designpattern/designpattern/</link><pubDate>Mon, 15 Jul 2019 10:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/designpattern/designpattern/</guid><description>面向对象 可维护、可复用、可扩展、灵活性好 通过封装、继承、多态把程序的耦合度降低，用设计模式使得程序更加的灵活，容易修改，并且易于复用 类图 依赖</description></item></channel></rss>