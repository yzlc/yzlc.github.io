<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>read on YZLC</title><link>https://yzlc.github.io/categories/read/</link><description>Recent content in read on YZLC</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 29 May 2022 15:03:33 +0800</lastBuildDate><atom:link href="https://yzlc.github.io/categories/read/index.xml" rel="self" type="application/rss+xml"/><item><title>第五章 I/O设备</title><link>https://yzlc.github.io/post/read/base/os/5/</link><pubDate>Sun, 29 May 2022 15:03:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/os/5/</guid><description>&lt;h2 id="io控制方式">I/O控制方式&lt;/h2>
&lt;ul>
&lt;li>程序直接控制方式：CPU轮询。传输单位-字。设备-&amp;gt;CPU-&amp;gt;内存&lt;/li>
&lt;li>中断驱动：CPU发出命令后做其他事。传输单位-字。设备-&amp;gt;CPU-&amp;gt;内存&lt;/li>
&lt;li>DMA：传输单位-块。设备-&amp;gt;内存&lt;/li>
&lt;li>通道：执行通道程序。一组块。设备-&amp;gt;内存&lt;/li>
&lt;/ul>
&lt;h2 id="io软件层次结构">I/O软件层次结构&lt;/h2>
&lt;p>用户层(库函数)-&amp;gt;设备独立性软件(设备管理)-&amp;gt;设备驱动程序-&amp;gt;中断处理程序-&amp;gt;硬件&lt;/p>
&lt;h2 id="假软件方式脱机spooling技术">假(软件方式)脱机(SPOOLING)技术&lt;/h2>
&lt;ul>
&lt;li>输入/出井：模拟脱机输入/出时的磁带&lt;/li>
&lt;li>输入/出进程：模拟脱机输入/出时的外围控制机&lt;/li>
&lt;li>输入/出缓冲区：内存中的缓冲区&lt;/li>
&lt;/ul>
&lt;h2 id="设备的分配与回收">设备的分配与回收&lt;/h2>
&lt;ul>
&lt;li>分配算法：先来先服务、优先级、短任务优先等&lt;/li>
&lt;li>动(静)态分配：进程运行时(前)分配(全部)资源&lt;/li>
&lt;li>数据结构：DCT(设备控制表)、COCT(控制器控制表)、CHCT(通道控制表)、SDT(系统设备表)。状态、等待队列指针&lt;/li>
&lt;li>分配步骤：设备名-&amp;gt;SDT-&amp;gt;DCT-&amp;gt;COCT-&amp;gt;CHCT-&amp;gt;分配通道&lt;/li>
&lt;li>改进：LUT(逻辑设备表：逻辑设备名-&amp;gt;物理设备名)&lt;/li>
&lt;/ul>
&lt;h2 id="缓冲区管理">缓冲区管理&lt;/h2>
&lt;blockquote>
&lt;p>一般利用内存作为缓冲区，缓解CPU与设备的矛盾&lt;/p>
&lt;/blockquote>
&lt;p>单/双/循环缓冲区、缓冲池(空缓冲队列、输入/出队列)&lt;/p></description></item><item><title>第四章 文件管理</title><link>https://yzlc.github.io/post/read/base/os/4/</link><pubDate>Sat, 28 May 2022 15:08:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/os/4/</guid><description>&lt;h2 id="文件的逻辑结构">文件的逻辑结构&lt;/h2>
&lt;ul>
&lt;li>顺序文件：可变长记录文件无法实现随机存储、定长记录、顺序结构文件可以快速检索&lt;/li>
&lt;li>索引文件：索引表就是定长记录的顺序文件，若按关键字排列，可支持快速检索&lt;/li>
&lt;li>索引顺序文件：将记录分组，每组对应一个索引表项，多级索引&lt;/li>
&lt;/ul>
&lt;h2 id="文件目录">文件目录&lt;/h2>
&lt;ul>
&lt;li>一个文件对应一个FCB(目录项)，多个组成目录&lt;/li>
&lt;li>无环图目录结构：在树形基础上，增加指向同一节点的有向边，为共享节点设置一个计数器，为0时删除&lt;/li>
&lt;li>索引节点：目录项只放文件名+索引节点指针，检索时磁盘I/O就少了&lt;/li>
&lt;/ul>
&lt;h2 id="文件物理结构">文件物理结构&lt;/h2>
&lt;ul>
&lt;li>磁盘块一般与内存块、页面大小相同&lt;/li>
&lt;li>分配方式
&lt;ul>
&lt;li>连续分配：支持随机访问，碎片&lt;/li>
&lt;li>链接分配：隐式链接(每块指向下一块指针)不支持随机访问；显示链接(FAT)分配表常驻内存，支持随机访问&lt;/li>
&lt;li>索引分配：多级索引表，支持随机访问&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="文件存储空间管理">文件存储空间管理&lt;/h2>
&lt;ul>
&lt;li>空闲表法：记录每个连续空闲区的起始盘块号、盘块数。分配采用首次适应、最佳适应等；回收时表项合并&lt;/li>
&lt;li>空闲链表法：以盘块/盘区为单位组成一条空闲链&lt;/li>
&lt;li>位示图法：一个二进制位对应一个盘块。行号+列号与盘块号对应&lt;/li>
&lt;li>成组链接法(UNIX)：超级快：链表指向下一组 空闲盘快数+空闲块号。在磁盘目录区设置超级快，放入内存&lt;/li>
&lt;/ul>
&lt;h2 id="文件的基本操作">文件的基本操作&lt;/h2>
&lt;ul>
&lt;li>创建：分配外存空间，创建目录项&lt;/li>
&lt;li>删除：回收外存空间，删除目录项&lt;/li>
&lt;li>打开：把目录项复制到内存的打开文件表(打开计数器)，进程有自己的打开文件表(读写指针、访问权限)&lt;/li>
&lt;li>关闭：删除进程和内存(计数器为0)的打开文件表&lt;/li>
&lt;li>读：根据读指针、读入数据量、内存位置将文件数据从外存读入内存&lt;/li>
&lt;li>写：根据写指针、写出数据量、内存位置将文件数据从内存写出外存&lt;/li>
&lt;/ul>
&lt;h2 id="文件共享">文件共享&lt;/h2>
&lt;ul>
&lt;li>硬链接：每个用户目录项指向同一个索引节点，count为0时删除&lt;/li>
&lt;li>软链接：link型文件(Windows快捷方式)，多次磁盘I/O&lt;/li>
&lt;/ul>
&lt;h2 id="磁盘调度算法寻道">磁盘调度算法(寻道)&lt;/h2>
&lt;p>FCFS(先来先服务)、SSTF(最短寻找时间优先 贪心算法) -&amp;gt; SCAN(扫描算法 电梯算法) -&amp;gt; LOOK(边移动边观察)&lt;/p>
&lt;h2 id="减少磁盘延迟时间转圈的方法">减少磁盘延迟时间(转圈)的方法&lt;/h2>
&lt;p>扇区交替编号、错位命名、地址结构(柱面号，盘面号，扇区号)&lt;/p></description></item><item><title>第三章 内存</title><link>https://yzlc.github.io/post/read/base/os/3/</link><pubDate>Sat, 28 May 2022 14:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/os/3/</guid><description>&lt;h2 id="进程运行基本原理">进程运行基本原理&lt;/h2>
&lt;ol>
&lt;li>编译：高级语言 -&amp;gt; 机器语言&lt;/li>
&lt;li>链接：把编译后的一组模块+库函数 链接在一起&lt;/li>
&lt;li>装入：把链接后的装入模块 装入内存&lt;/li>
&lt;/ol>
&lt;h2 id="覆盖与交换">覆盖与交换&lt;/h2>
&lt;ul>
&lt;li>覆盖：覆盖区、固定区(不会调入调出)&lt;/li>
&lt;li>交换：对换区(更快，离散分配)、文件区(连续分配)&lt;/li>
&lt;/ul>
&lt;h2 id="分页存储">分页存储&lt;/h2>
&lt;blockquote>
&lt;p>把进程分页，离散放到内存块&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>页表：页号+块号。记录进程页面和实际内存块对应关系&lt;/li>
&lt;li>快表(TLB)：局部性原理，高速缓存，存放当前访问的页表&lt;/li>
&lt;li>多级页表：页表过大时需要连续空间和常驻内存&lt;/li>
&lt;/ul>
&lt;h2 id="虚拟内存">虚拟内存&lt;/h2>
&lt;ul>
&lt;li>局部性原理：时间、空间、高速缓存&lt;/li>
&lt;li>特征：多次(调入)性、对换性、虚拟性&lt;/li>
&lt;li>页表机制：状态位(是否在内存)、访问字段(供置换算法参考)、修改位(写回外存)、外存地址&lt;/li>
&lt;/ul>
&lt;h3 id="置换算法">置换算法&lt;/h3>
&lt;ul>
&lt;li>OPT：最长时间不会被访问。发生在未来，无法实现&lt;/li>
&lt;li>FIFO：先进先出&lt;/li>
&lt;li>LRU：最近最久未访问&lt;/li>
&lt;li>CLOCK(NRU)：循环扫描，淘汰访问位=0的，其他的改为1&lt;/li>
&lt;li>改CLOCK，循环扫描
&lt;ul>
&lt;li>
&lt;ol>
&lt;li>淘汰访问0、修改0&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="2">
&lt;li>淘汰访问0、修改1，其他页面访问改为0&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>第二章 进程</title><link>https://yzlc.github.io/post/read/base/os/2/</link><pubDate>Tue, 10 May 2022 21:22:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/os/2/</guid><description>&lt;h2 id="定义">定义&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>PCB(系统分配用来描述进程信息)：PID(唯一标识)、UID(用户)、状态、优先级、资源分配清单(程序(数据)段指针、键盘、鼠标)、处理机相关信息(各种寄存器值。进程切换时记录运行情况。如程序计数器值等)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>程序段、数据段&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多个进程组织方式：链表、数组&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="状态">状态&lt;/h2>
&lt;ul>
&lt;li>创建 -&amp;gt; 就绪(处理机×其他√) &amp;lt;-&amp;gt; 运行((处理机√其他√)) -&amp;gt; 终止&lt;/li>
&lt;li>运行 -&amp;gt;(主动) 阻塞(处理机×其他×) -&amp;gt;(被动) 就绪&lt;/li>
&lt;/ul>
&lt;h2 id="进程控制">进程控制&lt;/h2>
&lt;blockquote>
&lt;p>用原语实现进程状态转换&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>更新PCB信息(修改进程状态标志、运行环境保存到PCB、从PCB恢复)&lt;/li>
&lt;li>将PCB插入合适队列&lt;/li>
&lt;li>分配/回收资源&lt;/li>
&lt;/ol>
&lt;h2 id="进程通信">进程通信&lt;/h2>
&lt;ul>
&lt;li>共享存储：设置一个共享空间，互斥访问&lt;/li>
&lt;li>管道通信：设置一个特殊的共享文件(管道)，其实就是一个缓冲区。半双工、互斥、没写满不能读，没读空不能写&lt;/li>
&lt;li>消息传递：传递结构化消息(消息头/消息体)，系统提供&amp;quot;发送/接受原语&amp;quot;&lt;/li>
&lt;/ul>
&lt;h2 id="线程">线程&lt;/h2>
&lt;blockquote>
&lt;p>CPU执行单元，调度的基本单位，进程作为除CPU外的资源分配基本单位&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>同进程线程切换，不需要切换进程环境&lt;/li>
&lt;li>多线程模型：用户级线程-内核级线程(处理机分配单位) 多(开销小)对多(并发高)&lt;/li>
&lt;/ul>
&lt;h2 id="处理机调度">处理机调度&lt;/h2>
&lt;ul>
&lt;li>高级(作业)调度：后备队列(外存)-&amp;gt;内存，发生频率最低，无-&amp;gt;创建态-&amp;gt;就绪态&lt;/li>
&lt;li>中级(内存)调度：挂起队列(外存)-&amp;gt;内存，发生频率中等，挂起态-&amp;gt;就绪态 (阻塞挂起-&amp;gt;阻塞态)&lt;/li>
&lt;li>低级(进程)调度：就绪队列(内存)-&amp;gt;CPU，发生频率最高，就绪态-&amp;gt;运行态&lt;/li>
&lt;/ul>
&lt;h2 id="调度时机">调度时机&lt;/h2>
&lt;ul>
&lt;li>主动(非抢占式)：进程正常终止、异常终止、阻塞（I/O）&lt;/li>
&lt;li>被动(抢占式)：时间片用完、更紧急(I/O中断)、更高优先级进程进入就绪队列&lt;/li>
&lt;li>不能调度：中断、进程在系统内核临界区(锁住的内核数据结构需要尽快操作完释放)、原语&lt;/li>
&lt;/ul>
&lt;h2 id="调度算法">调度算法&lt;/h2>
&lt;ul>
&lt;li>先来先服务(FCFS) + 短作业优先(SJF) = 高响应比优先(HRRN)&lt;/li>
&lt;li>时间片轮转(RR) + 优先级调度 = 多级反馈队列&lt;/li>
&lt;/ul>
&lt;h2 id="进程同步先后互斥临界资源">进程同步(先后)、互斥(临界资源)&lt;/h2>
&lt;ul>
&lt;li>进程互斥四部分：进入区(检查是否可进入和上锁) -&amp;gt; 临界区(访问临界资源) -&amp;gt; 退出区(解锁) -&amp;gt; 剩余区(其余代码)&lt;/li>
&lt;li>原则：空闲让进、忙则(有限(饥饿)、让权(CPU))等待&lt;/li>
&lt;/ul>
&lt;h2 id="互斥软件实现方法">互斥软件实现方法&lt;/h2>
&lt;ul>
&lt;li>单标志法：进入区只检查，不上锁，退出区转交。不遵循空闲让进原则&lt;/li>
&lt;li>双标志先检查法：进入区先检查后上锁，退出区解锁。不遵循忙则等待原则&lt;/li>
&lt;li>双标志后检查法：进入区先上锁后检查，退出区解锁。不遵循空闲让进、有限等待原则&lt;/li>
&lt;li>peterson算法：进入区主动争取-主动谦让-检查对方是否想进、己方是否谦让。不遵循让权等待原则&lt;/li>
&lt;/ul>
&lt;h2 id="互斥硬件实现方法">互斥硬件实现方法&lt;/h2>
&lt;ul>
&lt;li>中断屏蔽方法：使用“开/关中断”指令实现。只适用于单处理机、操作系统内核进程&lt;/li>
&lt;li>TestAndSet(TS指令/TSL指令)、Swap指令(XCHG指令)：old记录是否已被上锁，再将lock设为true，检查临界区是否已被上锁，若已上锁循环重复前几步&lt;/li>
&lt;/ul>
&lt;h2 id="信号量机制">信号量机制&lt;/h2>
&lt;ul>
&lt;li>整型信号量：用数值表示资源数(S)。
&lt;ul>
&lt;li>P：while(S&amp;lt;=0); S=S-1;&lt;/li>
&lt;li>V：S=S+1;&lt;/li>
&lt;li>不满足让权等待&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>记录型信号量(semaphore)S：剩余资源数(value) + 等待队列(L)
&lt;ul>
&lt;li>P(S)：S.value&amp;ndash;; if(S.value&amp;lt;0) block(S.L);&lt;/li>
&lt;li>V(S)：S.value++; if(S.value&amp;lt;=0) wakeup(S.L);&lt;/li>
&lt;li>进程互斥：信号量初值为1，P-&amp;gt;临界区-&amp;gt;V&lt;/li>
&lt;li>进程同步(保证一前一后)、前驱关系：信号量初值为0，在每个前操作之后执行V，在每个后操作之前执行P。从前后事件角度考虑&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="互斥同步问题">互斥同步问题&lt;/h2>
&lt;h3 id="生产者-消费者问题">生产者-消费者问题&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">semaphore&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//缓冲区互斥
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">semaphore&lt;/span> &lt;span class="n">empty&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//空闲缓冲区同步，等生产者放
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">semaphore&lt;/span> &lt;span class="n">full&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//非空缓冲区同步，等消费者取
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">producer&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">生产一个产品&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">P&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//消耗一个空闲缓冲区
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">把产品放入缓冲区&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">V&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">V&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">full&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//增加一个非空缓冲区
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">consumer&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">P&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">full&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//消耗一个非空缓冲区
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">从缓冲区取出一个产品&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">V&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">V&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//增加一个空闲缓冲区
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">使用产品&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="读者-写者问题">读者-写者问题&lt;/h3>
&lt;blockquote>
&lt;p>允许读-读&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">semaphore&lt;/span> &lt;span class="n">rw&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//文件互斥访问
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//记录几个读进程在访问文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">semaphore&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//对count互斥
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">semaphore&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//实现写优先
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">writer&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">P&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">P&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rw&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">写&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">V&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rw&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">V&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">reader&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">P&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">P&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rw&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">V&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">V&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">读&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">P&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rw&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">V&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="哲学家进餐问题">哲学家进餐问题&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">semaphore&lt;/span> &lt;span class="n">chopstick&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="o">]={&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">semaphore&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//互斥取筷子
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Pi&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="c1">//i号哲学家进程
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">P&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">P&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">chopstick&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]);&lt;/span>&lt;span class="c1">//拿左
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">chopstick&lt;/span>&lt;span class="o">[(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">)%&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="o">]);&lt;/span>&lt;span class="c1">//拿右
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">吃&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">V&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">chopstick&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]);&lt;/span>&lt;span class="c1">//放左
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">chopstick&lt;/span>&lt;span class="o">[(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">)%&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="o">]);&lt;/span>&lt;span class="c1">//放右
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">思考&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="管程">管程&lt;/h2>
&lt;blockquote>
&lt;p>synchronized&lt;/p>
&lt;/blockquote>
&lt;h2 id="死锁">死锁&lt;/h2>
&lt;ul>
&lt;li>预防死锁(破坏四个条件)：互斥、不剥夺、请求和保持、循环等待&lt;/li>
&lt;li>避免死锁(银行家算法)：检查需求，试探分配，检查安全序列(剩余资源能满足某个进程需求)&lt;/li>
&lt;li>检测和解除：用资源分配图(进程/资源节点)检测。解除：资源剥夺、终止进程、进程回退&lt;/li>
&lt;/ul></description></item><item><title>第一章 操作系统</title><link>https://yzlc.github.io/post/read/base/os/1/</link><pubDate>Tue, 10 May 2022 20:44:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/os/1/</guid><description>&lt;h2 id="功能">功能&lt;/h2>
&lt;ul>
&lt;li>资源管理：处理机、存储器、文件、设备&lt;/li>
&lt;li>提供服务：命令、程序接口、图形界面&lt;/li>
&lt;/ul>
&lt;h2 id="特征">特征&lt;/h2>
&lt;ul>
&lt;li>并发：间隔发生，宏观上是同时，微观上是交替。VS 多核并行：同时&lt;/li>
&lt;li>共享：互斥、同时&lt;/li>
&lt;li>虚拟：空分复用(虚拟存储器)、时分复用(虚拟处理器)&lt;/li>
&lt;li>异步&lt;/li>
&lt;/ul>
&lt;h2 id="运行机制与体系结构">运行机制与体系结构&lt;/h2>
&lt;ul>
&lt;li>(非)特权指令&lt;/li>
&lt;li>处理器：核心(用户)态，寄存器PSW标识&lt;/li>
&lt;li>内核(应用)程序&lt;/li>
&lt;/ul>
&lt;p>内核：时钟管理、中断处理、原语(设备驱动、CPU切换等，最接近硬件的具有原子性的特殊程序)、资源管理(大内核)&lt;/p>
&lt;p>大(微)内核：高(低)性能、不好(好)维护&lt;/p>
&lt;h2 id="中断">中断&lt;/h2>
&lt;blockquote>
&lt;p>为了实现并发，用户态-&amp;gt;核心态唯一途径&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>内中断(与当前指令有关)：自愿中断(系统调用)、强迫中断(硬件故障-缺页、软件中断-除0)&lt;/li>
&lt;li>外中断(与当前指令无关)：外设请求(IO)、人工干预(结束进程)&lt;/li>
&lt;/ul>
&lt;h2 id="系统调用">系统调用&lt;/h2>
&lt;blockquote>
&lt;p>保证系统的安全性&lt;/p>
&lt;/blockquote>
&lt;p>传递系统调用参数-&amp;gt;执行陷入指令(只能是用户态)-&amp;gt;执行系统调用(核心态)-&amp;gt;返回用户程序&lt;/p></description></item><item><title>第五章 中央处理器</title><link>https://yzlc.github.io/post/read/base/organization/5/</link><pubDate>Sun, 01 May 2022 11:39:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/organization/5/</guid><description>&lt;h2 id="cpu的功能和结构">CPU的功能和结构&lt;/h2>
&lt;ul>
&lt;li>功能：指令控制、操作控制、时间控制、数据加工、中断处理&lt;/li>
&lt;li>基本结构：ALU、寄存器、中断系统、CU&lt;/li>
&lt;li>运算器：算术逻辑单元(ALU)、通用寄存器组、暂存寄存器、累加寄存器(ACC)、程序状态字寄存器(PSW)、移位器、计数器&lt;/li>
&lt;li>控制器：程序计数器(PC)、指令寄存器(IR)、指令译码器、微操作信号发生器、时序系统、存储器地址寄存器(MAR)、存储器地址寄存器(MDR)&lt;/li>
&lt;/ul>
&lt;h2 id="指令执行过程">指令执行过程&lt;/h2>
&lt;ul>
&lt;li>指令周期：机器周期-&amp;gt;时钟周期&lt;/li>
&lt;li>数据流：取值周期、间指周期、执行周期、中断周期&lt;/li>
&lt;li>执行方案：单指令周期、多指令周期、流水线方案&lt;/li>
&lt;/ul>
&lt;h2 id="数据通路的功能和基本结构">数据通路的功能和基本结构&lt;/h2>
&lt;p>专用通路(多路选择器MUX、三态门)、内部总线(ALU需要配合暂存器使用)&lt;/p>
&lt;h2 id="控制器的功能和工作原理">控制器的功能和工作原理&lt;/h2>
&lt;ul>
&lt;li>功能：取指令、分析指令、执行指令&lt;/li>
&lt;li>硬布线(RISC)：微操作控制信号即时产生。分析每个阶段的微操作序列、选择CPU的控制方式、安排微操作时序、电路设计&lt;/li>
&lt;li>微程序(CISC)：微操作控制信号存储在控制存储器。微地址形成部件、微地址寄存器(CMAR)、控制存储器(CM)、微指令寄存器(CMDR)&lt;/li>
&lt;/ul>
&lt;h2 id="指令流水线">指令流水线&lt;/h2>
&lt;ul>
&lt;li>定义：取指、分析、执行&lt;/li>
&lt;/ul>
&lt;p>影响因素&lt;/p>
&lt;ul>
&lt;li>结构相关(资源冲突)：暂停相关指令、资源重复配置&lt;/li>
&lt;li>数据相关：暂停相关指令：硬件stall、软件NOP、数据旁路技术、编译优化，调整指令顺序&lt;/li>
&lt;li>控制相关：分支预测、预取两个方向的指令、加快和提前形成条件码、提高转移方向的猜准率&lt;/li>
&lt;/ul>
&lt;p>多发技术：超标量流水线、超流水线、超长指令字&lt;/p></description></item><item><title>第四章 指令系统</title><link>https://yzlc.github.io/post/read/base/organization/4/</link><pubDate>Sun, 01 May 2022 10:22:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/organization/4/</guid><description>&lt;h2 id="指令格式">指令格式&lt;/h2>
&lt;ul>
&lt;li>操作码：定长、变长(扩展)&lt;/li>
&lt;li>地址码：定长、变长。四地址-零地址&lt;/li>
&lt;/ul>
&lt;h2 id="指令寻址">指令寻址&lt;/h2>
&lt;blockquote>
&lt;p>程序计数器PC&lt;/p>
&lt;/blockquote>
&lt;h3 id="指令寻址-1">指令寻址&lt;/h3>
&lt;ul>
&lt;li>顺序寻址&lt;/li>
&lt;li>跳跃寻址&lt;/li>
&lt;/ul>
&lt;h3 id="数据寻址">数据寻址&lt;/h3>
&lt;ul>
&lt;li>寻址特征：隐含(程序指定)、立即(A即是操作数)、堆栈；直接(EA=A)、间接(EA=(A))、寄存器(EA=R)、寄存器间接(EA=(R))&lt;/li>
&lt;/ul>
&lt;p>偏移寻址&lt;/p>
&lt;ul>
&lt;li>基址(EA=(BR)+A)：多道程序&lt;/li>
&lt;li>变址(EA=(IX)+A)：循环程序&lt;/li>
&lt;li>相对(EA=(PC)+A)：转移指令&lt;/li>
&lt;/ul>
&lt;h2 id="cisc和risc">CISC和RISC&lt;/h2>
&lt;ul>
&lt;li>CISC(complex)：x86架构，笔记本、台式&lt;/li>
&lt;li>RISC(reduced 2-8定律)：ARM架构，手机、平板。&lt;/li>
&lt;/ul></description></item><item><title>第三章 存储系统</title><link>https://yzlc.github.io/post/read/base/organization/3/</link><pubDate>Sat, 23 Apr 2022 10:29:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/organization/3/</guid><description>&lt;h2 id="主存">主存&lt;/h2>
&lt;ul>
&lt;li>译码驱动：地址信号(地址总线) -&amp;gt; 选通信号(存储单元)。MAR(Memory Address Register)：地址寄存器。实际放CPU&lt;/li>
&lt;li>存储矩阵：存储元-&amp;gt;存储单元-&amp;gt;存储体&lt;/li>
&lt;li>读写电路：MDR(Memory Data Register)：数据寄存器。实际放CPU&lt;/li>
&lt;li>地址线、数据线、片选线(选存储芯片)、读写控制线&lt;/li>
&lt;/ul>
&lt;h2 id="局部性原理">局部性原理&lt;/h2>
&lt;ul>
&lt;li>空间局部性：要用的信息在存储空间上邻近&lt;/li>
&lt;li>时间局部性：要用的信息正在使用&lt;/li>
&lt;/ul>
&lt;h2 id="cache">Cache&lt;/h2>
&lt;blockquote>
&lt;p>高速缓冲存储器，Cache-主存层次，硬件实现，解决速度不匹配问题&lt;/p>
&lt;/blockquote>
&lt;h3 id="地址映射">地址映射&lt;/h3>
&lt;blockquote>
&lt;p>怎么放&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>全相联：主存字块标记|字块内地址&lt;/li>
&lt;li>直接映射：主存字块标记|Cache字块地址|字块内地址&lt;/li>
&lt;li>组相联：主存字块标记|组地址|字块内地址&lt;/li>
&lt;li>标记项：有效位、标记位(主存字块标记)&lt;/li>
&lt;/ul>
&lt;h3 id="替换算法">替换算法&lt;/h3>
&lt;blockquote>
&lt;p>满了如何处理&lt;/p>
&lt;/blockquote>
&lt;p>RAND、FIFO、LRU(时间局部性)、LFU&lt;/p>
&lt;h3 id="写策略">写策略&lt;/h3>
&lt;blockquote>
&lt;p>一致性&lt;/p>
&lt;/blockquote>
&lt;p>命中：&lt;/p>
&lt;ul>
&lt;li>全写法(write-through)：同时写入Cache和主存&lt;/li>
&lt;li>写回法(write-back)：块被换出时才写回主存。搭配写分配法&lt;/li>
&lt;/ul>
&lt;p>未命中：&lt;/p>
&lt;ul>
&lt;li>写分配法(write-allocate)：把主存中的块调入Cache修改&lt;/li>
&lt;li>非写分配法(not-write-allocate)：只写主存&lt;/li>
&lt;/ul>
&lt;h2 id="虚拟存储器">虚拟存储器&lt;/h2>
&lt;blockquote>
&lt;p>逻辑模型，主存-辅存层次，硬件+操作系统实现，解决容量问题&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>页式存储：虚拟空间与主存空间都被划分成同样大小的页，主存的页称为实页，虚存的页称为虚页&lt;/li>
&lt;li>段式存储：按程序的逻辑结构划分，段长度因程序而异。分为段号和段内地址&lt;/li>
&lt;li>慢表(Page)：主存中的页表&lt;/li>
&lt;li>快表(TLB)：提高变换速度，用高速缓冲存储器存放常用的页表项&lt;/li>
&lt;/ul>
&lt;h2 id="半导体存储器">半导体存储器&lt;/h2>
&lt;ul>
&lt;li>SRAM(Static Random Access Memory)：触发器，作高速缓存&lt;/li>
&lt;li>DRAM(Dynamic Random Access Memory)：电容，需刷新，作主存&lt;/li>
&lt;/ul></description></item><item><title>第二章 数据的表示和运算</title><link>https://yzlc.github.io/post/read/base/organization/2/</link><pubDate>Sat, 26 Mar 2022 13:07:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/base/organization/2/</guid><description>&lt;h2 id="进制转换">进制转换&lt;/h2>
&lt;h3 id="十进制k进制">十进制→K进制&lt;/h3>
&lt;blockquote>
&lt;p>按权展开相加法：通过分析十进制75位权r为10 推导出K进制→十进制&lt;/p>
&lt;/blockquote>
&lt;p>$K_{n} \times r_{n} + \dots + k_{0} \times r^{0} $&lt;/p>
&lt;h3 id="十进制k进制-1">十进制→K进制&lt;/h3>
&lt;ul>
&lt;li>除基取余法：尝试除r得到余数 发现取出了最低位的值 重复操作得到K进制&lt;/li>
&lt;/ul>
&lt;p>十进制小数0.3→K进制&lt;/p>
&lt;ul>
&lt;li>乘基取整法：同理 对于小数 乘r得到整数部分 重复操作&lt;/li>
&lt;/ul>
&lt;h3 id="二进制2n与四八十六进制转换">二进制$2^{n}$与四、八、十六进制转换&lt;/h3>
&lt;p>分组转换：n位一组，每组转成对应进制，不足补0&lt;/p>
&lt;h2 id="字符与字符串">字符与字符串&lt;/h2>
&lt;p>大(小)端模式：存储单元内高(低)位字节 -&amp;gt; 低(高)位字节的顺序。ABC(CBA)&lt;/p>
&lt;p>ASCII码：数字、字母、符号共128个字符 -&amp;gt; 7位二进制编码。数字、大写字母、小写字母各自连续，三者之间不连续&lt;/p>
&lt;h2 id="校验码">校验码&lt;/h2>
&lt;ul>
&lt;li>码距：几位编码不同，用于检错和纠错&lt;/li>
&lt;li>奇(偶)校验：补高位，保证奇(偶)数个1&lt;/li>
&lt;li>海明码：二分分组校验。检两位错，纠一位错
&lt;ol>
&lt;li>确认校验位数k：信息位n，则状态有$2^{k}≥n+k+1$种&lt;/li>
&lt;li>确认校验位置：2的次幂(唯一定位校验码出错)&lt;/li>
&lt;li>分组数据位：校验位负责该位置的数据位(定位到出错位置)&lt;/li>
&lt;li>校验规则：奇偶校验(校验位与数据位异或)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="定点数">定点数&lt;/h2>
&lt;ul>
&lt;li>补码：简化加减运算。负数：数值位取反加1&lt;/li>
&lt;li>反码：原、补码转换的中间过渡&lt;/li>
&lt;li>移码：易于比较大小&lt;/li>
&lt;/ul>
&lt;h2 id="浮点数">浮点数&lt;/h2>
&lt;ul>
&lt;li>阶码(E)：范围和小数点实际位置。用移码(补码)表示&lt;/li>
&lt;li>尾数(M)：精度。用原码(补码)表示&lt;/li>
&lt;li>IEEE754标准：科学计数法。$N = r^E × M$&lt;/li>
&lt;/ul>
&lt;h2 id="算术逻辑单元">算术逻辑单元&lt;/h2>
&lt;blockquote>
&lt;p>ALU：算术运算、逻辑运算、移位求补等&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>与门天然逻辑：屏蔽，异或天然逻辑：加法、奇偶&lt;/li>
&lt;/ul></description></item><item><title>网络</title><link>https://yzlc.github.io/post/read/net/</link><pubDate>Tue, 11 Jan 2022 21:43:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/net/</guid><description>&lt;h2 id="应用层">应用层&lt;/h2>
&lt;h3 id="dns">dns&lt;/h3>
&lt;blockquote>
&lt;p>isp-&amp;gt;根名称服务器-&amp;gt;tld名称服务器-&amp;gt;ip&lt;/p>
&lt;/blockquote>
&lt;h3 id="http">http&lt;/h3>
&lt;h3 id="ftp">ftp&lt;/h3>
&lt;blockquote>
&lt;p>客户端 -&amp;gt; 服务端(21)&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>主动：服务端(20) -&amp;gt; 客户端(防火墙需要开放端口)&lt;/li>
&lt;li>被动：客户端 -&amp;gt; 服务端&lt;/li>
&lt;/ul>
&lt;h2 id="传输层">传输层&lt;/h2>
&lt;h3 id="tcp">tcp&lt;/h3>
&lt;h3 id="udp">udp&lt;/h3>
&lt;h3 id="socket接口">socket接口&lt;/h3>
&lt;blockquote>
&lt;p>tcp/ip的封装&lt;/p>
&lt;/blockquote></description></item><item><title>spring</title><link>https://yzlc.github.io/post/read/spring/spring/</link><pubDate>Thu, 10 Dec 2020 18:58:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/spring/spring/</guid><description>&lt;h2 id="aop">AOP&lt;/h2>
&lt;p>动态代理&lt;/p>
&lt;ul>
&lt;li>有接口：jdk，代理接口实现类&lt;/li>
&lt;li>无接口：cglib，代理子类&lt;/li>
&lt;/ul>
&lt;h2 id="事务">事务&lt;/h2>
&lt;p>propagation&lt;/p>
&lt;ul>
&lt;li>REQUIRED（default）：有则追加，无则创建&lt;/li>
&lt;li>REQUIRES_NEW：创建&lt;/li>
&lt;/ul>
&lt;h2 id="webflux">webflux&lt;/h2>
&lt;blockquote>
&lt;p>异步：调用者发送请求，不等待回应就做事情&lt;br>
非阻塞：被调用者收到请求，先反馈再做事情&lt;/p>
&lt;/blockquote>
&lt;h3 id="响应式编程">响应式编程&lt;/h3>
&lt;blockquote>
&lt;p>观察者模式，jdk8：Observale，jdk9：Flow&lt;/p>
&lt;/blockquote>
&lt;h4 id="reactor">Reactor&lt;/h4>
&lt;blockquote>
&lt;p>Reactive规范&lt;/p>
&lt;/blockquote>
&lt;p>核心类：发布者Mono（返回0或1个元素）、Flux（返回N个元素）实现Publisher接口。发出三种数据信号：元素值，终止信号（错误、完成）&lt;/p></description></item><item><title>springIOC</title><link>https://yzlc.github.io/post/read/spring/ioc/</link><pubDate>Mon, 07 Dec 2020 22:08:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/spring/ioc/</guid><description>&lt;p>参考&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developer.ibm.com/zh/articles/j-lo-spring-principle/" target="_blank" rel="noopener"
>Spring分析&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.jianshu.com/p/1dec08d290c1" target="_blank" rel="noopener"
>请别再问Spring Bean的生命周期了！&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>思想：把对象创建和调用交给spring管理，降低耦合&lt;/p>
&lt;p>实现：配置解析-&amp;gt;工厂-&amp;gt;创建对象(反射)-&amp;gt;DI(注入属性)&lt;/p>
&lt;h2 id="beans演员">beans（演员）&lt;/h2>
&lt;p>创建&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/spring/image003.png"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>BeanFactory：IOC容器基本实现，懒加载&lt;/li>
&lt;li>ListableBeanFactory：Bean是可列表的&lt;/li>
&lt;li>HierarchicalBeanFactory：Bean有继承关系&lt;/li>
&lt;li>AutowireCapableBeanFactory：Bean的自动装配规则&lt;/li>
&lt;li>DefaultListableBeanFactory：默认实现&lt;/li>
&lt;/ul>
&lt;p>定义&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/spring/image004.png"
loading="lazy"
>&lt;/p>
&lt;p>解析&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/spring/image005.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="context舞台">context（舞台）&lt;/h2>
&lt;blockquote>
&lt;p>给Spring提供运行时的环境（Ioc容器），用以保存各个对象的状态。整合了大部分功能&lt;/p>
&lt;/blockquote>
&lt;p>Context类图&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/spring/image006.png"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>ResourceLoader：访问外部资源&lt;/li>
&lt;li>ConfigurableApplicationContext：可动态添加或修改已有的配置信息
&lt;ul>
&lt;li>AbstractRefreshableApplicationContext（常用）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>作用&lt;/p>
&lt;ul>
&lt;li>标识应用环境&lt;/li>
&lt;li>创建Bean对象&lt;/li>
&lt;li>保存对象关系表&lt;/li>
&lt;li>捕获各种事件&lt;/li>
&lt;/ul>
&lt;h2 id="core道具">core（道具）&lt;/h2>
&lt;blockquote>
&lt;p>定义了资源的访问方式&lt;/p>
&lt;/blockquote>
&lt;p>Resource类图&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/spring/image007.png"
loading="lazy"
>&lt;/p>
&lt;p>Context和Resource类关系图&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/spring/image008.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="ioc">ioc&lt;/h2>
&lt;p>&lt;code>AbstractApplicationContext&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">refresh&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">BeansException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IllegalStateException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">startupShutdownMonitor&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Prepare this context for refreshing.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">prepareRefresh&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Tell the subclass to refresh the internal bean factory.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">ConfigurableListableBeanFactory&lt;/span> &lt;span class="n">beanFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">obtainFreshBeanFactory&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//创建BeanFactory
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Prepare the bean factory for use in this context.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">prepareBeanFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanFactory&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//配置BeanFactory：添加一些Spring本身需要的一些工具类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Allows post-processing of the bean factory in context subclasses.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">postProcessBeanFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanFactory&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Invoke factory processors registered as beans in the context.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">invokeBeanFactoryPostProcessors&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanFactory&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//对已经构建的 BeanFactory 的配置做修改（实现BeanFactoryPostProcessor接口）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Register bean processors that intercept bean creation.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">registerBeanPostProcessors&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanFactory&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//对以后再创建 Bean 的实例对象时添加一些自定义的操作（实现BeanPostProcessor接口）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Initialize message source for this context.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">initMessageSource&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Initialize event multicaster for this context.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">initApplicationEventMulticaster&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//初始化监听事件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Initialize other special beans in specific context subclasses.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">onRefresh&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Check for listener beans and register them.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">registerListeners&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//对系统的其他监听者的注册（实现ApplicationListener接口）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Instantiate all remaining (non-lazy-init) singletons.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">finishBeanFactoryInitialization&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanFactory&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//创建 Bean 实例并构建 Bean 的关系网
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Last step: publish corresponding event.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">finishRefresh&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">BeansException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Destroy already created singletons to avoid dangling resources.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">destroyBeans&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Reset &amp;#39;active&amp;#39; flag.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cancelRefresh&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Propagate exception to caller.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Reset common introspection caches in Spring&amp;#39;s core, since we
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// might not ever need metadata for singleton beans anymore...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">resetCommonCaches&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="构建beanfactory">构建BeanFactory&lt;/h3>
&lt;p>&lt;code>AbstractRefreshableApplicationContext&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">protected&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">refreshBeanFactory&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">BeansException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">hasBeanFactory&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">destroyBeans&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">closeBeanFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DefaultListableBeanFactory&lt;/span> &lt;span class="n">beanFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createBeanFactory&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//BeanFactory的原始对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">beanFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSerializationId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">getId&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">customizeBeanFactory&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanFactory&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">loadBeanDefinitions&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanFactory&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//加载、解析Bean的定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">beanFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">beanFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IOException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ApplicationContextException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;I/O error parsing bean definition source for &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">getDisplayName&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>DefaultListableBeanFactory&lt;/code>类图&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/spring/image009.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="bean的实例化">Bean的实例化&lt;/h3>
&lt;p>&lt;code>DefaultListableBeanFactory&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">preInstantiateSingletons&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">BeansException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Iterate over a copy to allow for init methods which in turn register new bean definitions.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">beanNames&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">beanDefinitionNames&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Trigger initialization of all non-lazy singleton beans...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">beanName&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">beanNames&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RootBeanDefinition&lt;/span> &lt;span class="n">bd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getMergedLocalBeanDefinition&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">bd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isAbstract&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">bd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isSingleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">bd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isLazyInit&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isFactoryBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Object&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">FACTORY_BEAN_PREFIX&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bean&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">FactoryBean&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FactoryBean&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">factory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">FactoryBean&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;)&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">isEagerInit&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSecurityManager&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">factory&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">SmartFactoryBean&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">isEagerInit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AccessController&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doPrivileged&lt;/span>&lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>&lt;span class="n">PrivilegedAction&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Boolean&lt;/span>&lt;span class="o">&amp;gt;)&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">SmartFactoryBean&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;)&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">)::&lt;/span>&lt;span class="n">isEagerInit&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">getAccessControlContext&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">isEagerInit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">factory&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">SmartFactoryBean&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">((&lt;/span>&lt;span class="n">SmartFactoryBean&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;)&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">isEagerInit&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isEagerInit&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">getBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//创建实例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>AbstractAutowireCapableBeanFactory&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">protected&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">doCreateBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RootBeanDefinition&lt;/span> &lt;span class="n">mbd&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nd">@Nullable&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">BeanCreationException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Instantiate the bean.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">BeanWrapper&lt;/span> &lt;span class="n">instanceWrapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">instanceWrapper&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instanceWrapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">createBeanInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mbd&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//实例化阶段
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Initialize the bean instance.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">exposedObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">populateBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mbd&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">instanceWrapper&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//属性赋值阶段
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">exposedObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">initializeBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">exposedObject&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mbd&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//初始化阶段
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="扩展点">扩展点&lt;/h2>
&lt;h3 id="第一大类影响多个bean的接口">第一大类：影响多个Bean的接口&lt;/h3>
&lt;h4 id="instantiationawarebeanpostprocessor">&lt;code>InstantiationAwareBeanPostProcessor&lt;/code>&lt;/h4>
&lt;blockquote>
&lt;p>作用于实例化阶段的前后&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">protected&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">createBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RootBeanDefinition&lt;/span> &lt;span class="n">mbd&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nd">@Nullable&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">BeanCreationException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">bean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">resolveBeforeInstantiation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mbdToUse&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">// postProcessBeforeInstantiation方法调用点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bean&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Object&lt;/span> &lt;span class="n">beanInstance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">doCreateBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mbdToUse&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isTraceEnabled&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">trace&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Finished creating instance of bean &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">beanName&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;&amp;#39;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">beanInstance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">populateBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RootBeanDefinition&lt;/span> &lt;span class="n">mbd&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nd">@Nullable&lt;/span> &lt;span class="n">BeanWrapper&lt;/span> &lt;span class="n">bw&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// state of the bean before properties are set. This can be used, for example,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// to support styles of field injection.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">continueWithPropertyPopulation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">mbd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isSynthetic&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">hasInstantiationAwareBeanPostProcessors&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">BeanPostProcessor&lt;/span> &lt;span class="n">bp&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">getBeanPostProcessors&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bp&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">InstantiationAwareBeanPostProcessor&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">InstantiationAwareBeanPostProcessor&lt;/span> &lt;span class="n">ibp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InstantiationAwareBeanPostProcessor&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">bp&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">ibp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">postProcessAfterInstantiation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bw&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getWrappedInstance&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">// postProcessAfterInstantiation方法调用点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">continueWithPropertyPopulation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="beanpostprocessor">&lt;code>BeanPostProcessor&lt;/code>&lt;/h4>
&lt;blockquote>
&lt;p>作用于初始化阶段的前后&lt;/p>
&lt;/blockquote>
&lt;p>执行顺序：PriorityOrdered &amp;gt; Ordered&lt;/p>
&lt;h3 id="第二大类只调用一次的接口">第二大类：只调用一次的接口&lt;/h3>
&lt;h4 id="aware">Aware&lt;/h4>
&lt;blockquote>
&lt;p>让我们能够拿到Spring容器中的一些资源&lt;/p>
&lt;/blockquote>
&lt;p>Aware Group1&lt;/p>
&lt;ul>
&lt;li>BeanNameAware&lt;/li>
&lt;li>BeanClassLoaderAware&lt;/li>
&lt;li>BeanFactoryAware&lt;/li>
&lt;/ul>
&lt;p>Aware Group2&lt;/p>
&lt;ul>
&lt;li>EnvironmentAware&lt;/li>
&lt;li>EmbeddedValueResolverAware：实现该接口能够获取Spring EL解析器，用户的自定义注解需要支持spel表达式的时候使用&lt;/li>
&lt;li>ApplicationContextAware(ResourceLoaderAware\ApplicationEventPublisherAware\MessageSourceAware)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化阶段
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">protected&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">initializeBean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nd">@Nullable&lt;/span> &lt;span class="n">RootBeanDefinition&lt;/span> &lt;span class="n">mbd&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">invokeAwareMethods&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">// Group1中的三个Bean开头的Aware
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Object&lt;/span> &lt;span class="n">wrappedBean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 这里调用的是Group2中的几个Aware，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 而实质上这里就是前面所说的BeanPostProcessor的调用点！
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 这里是通过BeanPostProcessor（ApplicationContextAwareProcessor）实现的。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">wrappedBean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">applyBeanPostProcessorsBeforeInitialization&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">wrappedBean&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">invokeInitMethods&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">beanName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">wrappedBean&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mbd&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">// InitializingBean调用点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">wrappedBean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">applyBeanPostProcessorsAfterInitialization&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">wrappedBean&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">beanName&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">// BeanPostProcessor的另一个调用点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">wrappedBean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="生命周期接口">生命周期接口&lt;/h4>
&lt;p>&lt;code>InitializingBean&lt;/code>：对应生命周期的初始化阶段&lt;/p>
&lt;p>&lt;code>DisposableBean&lt;/code>：对应生命周期的销毁阶段，以ConfigurableApplicationContext#close()方法作为入口&lt;/p></description></item><item><title>5.2　单词查找树</title><link>https://yzlc.github.io/post/read/algorithms/5.2/</link><pubDate>Tue, 01 Sep 2020 13:41:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/5.2/</guid><description>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class StringST&lt;!-- raw HTML omitted -->&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>StringST()&lt;/td>
&lt;td>创建一个符号表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>void put(String key, Value val)&lt;/td>
&lt;td>向表中插入键值对（如果值为 null 则删除键key ）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Value get(String key)&lt;/td>
&lt;td>键 key 所对应的值（如果键不存在则返回 null）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>void delete(String key)&lt;/td>
&lt;td>删除键 key （和它的值）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean contains(String key)&lt;/td>
&lt;td>表中是否保存着 key 的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean isEmpty()&lt;/td>
&lt;td>符号表是否为空&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>String longestPrefixOf(String s)&lt;/td>
&lt;td>s 的前缀中最长的键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> keysWithPrefix(String s)&lt;/td>
&lt;td>所有以 s 为前缀的键&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> keysThatMatch(String s)&lt;/td>
&lt;td>所有和 s 匹配的键（其中“ . ”能够匹配任意字符）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int size()&lt;/td>
&lt;td>键值对的数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> keys()&lt;/td>
&lt;td>符号表中的所有键&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="521单词查找树">5.2.1　单词查找树&lt;/h2>
&lt;h3 id="5211基本性质">5.2.1.1　基本性质&lt;/h3>
&lt;p>值为空的结点在符号表中没有对应的键，它们的存在是为了简化单词查找树中的查找操作&lt;/p>
&lt;h3 id="5212单词查找树中的查找操作">5.2.1.2　单词查找树中的查找操作&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00874.gif"
loading="lazy"
>&lt;/p>
&lt;h3 id="5213单词查找树中的插入操作">5.2.1.3　单词查找树中的插入操作&lt;/h3></description></item><item><title>第 5 章　字符串</title><link>https://yzlc.github.io/post/read/algorithms/5/</link><pubDate>Tue, 01 Sep 2020 09:11:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/5/</guid><description>&lt;h2 id="51字符串排序">5.1　字符串排序&lt;/h2>
&lt;h3 id="511键索引计数法">5.1.1　键索引计数法&lt;/h3>
&lt;h4 id="5111频率统计">5.1.1.1　频率统计&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00832.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="5112将频率转换为索引">5.1.1.2　将频率转换为索引&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00833.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="5113数据分类">5.1.1.3　数据分类&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00834.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="5114回写">5.1.1.4　回写&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">aux&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 计算出现频率
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">]++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 将频率转换为索引
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">R&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">];&lt;/span>&lt;span class="c1">//键的起始索引为所有较小键频率之和
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 将元素分类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">aux&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">()]++]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>&lt;span class="c1">//每个元素在 aux[] 中的位置是由它的键（组别）对应的 count[] 值决定，在移动之后将 count[] 中对应元素的值加 1，以保证 count[r] 总是下一个键为 r 的元素在 aux[] 中的索引位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 回写
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">aux&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="512低位优先的字符串排序">5.1.2　低位优先的字符串排序&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LSD&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">W&lt;/span>&lt;span class="o">){&lt;/span> &lt;span class="c1">// 通过前W个字符将a[]排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">R&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">256&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">aux&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">W&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">--){&lt;/span> &lt;span class="c1">// 根据第d个字符用键索引计数法排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="c1">// 计算出现频率
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">]++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">R&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="c1">// 将频率转换为索引
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="c1">// 将元素分类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">aux&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">)]++]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="c1">// 回写
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">aux&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="513高位优先的字符串排序">5.1.3　高位优先的字符串排序&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MSD&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">R&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">256&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 基数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">M&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 小数组的切换阈值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">aux&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 数据分类的辅助数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">d&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">aux&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">){&lt;/span> &lt;span class="c1">// 以第d个字符为键将a[lo]至a[hi]排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">hi&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">lo&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">){&lt;/span> &lt;span class="n">Insertion&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="c1">// 计算频率
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">]++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">R&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="c1">// 将频率转换为索引
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="c1">// 数据分类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">aux&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">]++]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="c1">// 回写
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">aux&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 递归的以每个字符为键进行排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">R&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lo&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">lo&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="514三向字符串快速排序">5.1.4　三向字符串快速排序&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Quick3string&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">){&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">);}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hi&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">lo&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">lt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">gt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">hi&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">lo&lt;/span>&lt;span class="o">],&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">lo&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">gt&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">],&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">exch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">lt&lt;/span>&lt;span class="o">++,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">exch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">gt&lt;/span>&lt;span class="o">--);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">lt&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">&amp;gt;=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">lt&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">gt&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">gt&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">hi&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>4.4　最短路径</title><link>https://yzlc.github.io/post/read/algorithms/4.4/</link><pubDate>Tue, 11 Aug 2020 15:53:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/4.4/</guid><description>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>应用&lt;/th>
&lt;th>顶点&lt;/th>
&lt;th>边&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>地图&lt;/td>
&lt;td>交叉路口&lt;/td>
&lt;td>公路&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>网络&lt;/td>
&lt;td>路由器&lt;/td>
&lt;td>网络连接&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>任务调度&lt;/td>
&lt;td>任务&lt;/td>
&lt;td>优先级限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>套汇&lt;/td>
&lt;td>货币&lt;/td>
&lt;td>汇率&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="442加权有向图的数据结构">4.4.2　加权有向图的数据结构&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class DirectedEdge&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>DirectedEdge(int v, int w, double weight) double weight()&lt;/td>
&lt;td>边的权重&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int from()&lt;/td>
&lt;td>指出这条边的顶点&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int to()&lt;/td>
&lt;td>这条边指向的顶点&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>String toString()&lt;/td>
&lt;td>对象的字符串表示&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class EdgeWeightedDigraph&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>EdgeWeightedDigraph(int V)&lt;/td>
&lt;td>含有 V 个顶点的空有向图&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>EdgeWeightedDigraph(In in)&lt;/td>
&lt;td>从输入流中读取图的构造函数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int V()&lt;/td>
&lt;td>顶点总数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int E()&lt;/td>
&lt;td>边的总数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>void addEdge(DirectedEdge e)&lt;/td>
&lt;td>将 e 添加到该有向图中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> adj(int v)&lt;/td>
&lt;td>从 v 指出的边&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> edges()&lt;/td>
&lt;td>该有向图中的所有边&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>String toString()&lt;/td>
&lt;td>对象的字符串表示&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DirectedEdge&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 边的起点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 边的终点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">weight&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 边的权重
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">DirectedEdge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">weight&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">w&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">weight&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">weight&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">weight&lt;/span>&lt;span class="o">(){&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">weight&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">from&lt;/span>&lt;span class="o">(){&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">to&lt;/span>&lt;span class="o">(){&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">toString&lt;/span>&lt;span class="o">(){&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%d-&amp;gt;%d %.2f&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">weight&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EdgeWeightedDigraph&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//顶点总数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//边的总数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DirectedEdge&lt;/span>&lt;span class="o">&amp;gt;[]&lt;/span> &lt;span class="n">adj&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//邻接表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">EdgeWeightedDigraph&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">E&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adj&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DirectedEdge&lt;/span>&lt;span class="o">&amp;gt;[])&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Bag&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DirectedEdge&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">EdgeWeightedDigraph&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">In&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">V&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">E&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addEdge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DirectedEdge&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">from&lt;/span>&lt;span class="o">()].&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">E&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DirectedEdge&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">adj&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">];}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DirectedEdge&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">edges&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DirectedEdge&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">DirectedEdge&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DirectedEdge&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bag&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">bag&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00788.gif"
loading="lazy"
>&lt;/p>
&lt;h3 id="4421最短路径的-api">4.4.2.1　最短路径的 API&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class SP&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>SP(EdgeWeightedDigraph G, int s)&lt;/td>
&lt;td>构造函数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double distTo(int v)&lt;/td>
&lt;td>从顶点 s 到 v 的距离，如果不存在则路径为无穷大&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean hasPathTo(int v)&lt;/td>
&lt;td>是否存在从顶点 s 到 v 的路径&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> pathTo(int v)&lt;/td>
&lt;td>从顶点 s 到 v 的路径，如果不存在则为null&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="4423最短路径的数据结构">4.4.2.3　最短路径的数据结构&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00789.gif"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>最短路径树中的边。和深度优先搜索、广度优先搜索和 Prim 算法一样，使用一个由顶点索引的 DirectedEdge 对象的父链接数组 edgeTo[] ，其中 edgeTo[v] 的值为树中连接 v 和它的父结点的边（也是从 s 到 v 的最短路径上的最后一条边）。&lt;/li>
&lt;li>到达起点的距离 。我们需要一个由顶点索引的数组 distTo[] ，其中distTo[v] 为从 s 到 v 的已知最短路径的长度。&lt;/li>
&lt;/ul>
&lt;h3 id="4424边的松弛">4.4.2.4　边的松弛&lt;/h3>
&lt;h3 id="4425顶点的松弛">4.4.2.5　顶点的松弛&lt;/h3></description></item><item><title>4.3　最小生成树</title><link>https://yzlc.github.io/post/read/algorithms/4.3/</link><pubDate>Tue, 11 Aug 2020 14:46:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/4.3/</guid><description>&lt;blockquote>
&lt;p>权值（树中所有边的权值之和）最小的生成树&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>加权图：为每条边关联一个权值或是成本的图模型&lt;/li>
&lt;li>图的生成树：含有其所有顶点的无环连通子图&lt;/li>
&lt;/ul>
&lt;h2 id="431原理">4.3.1　原理&lt;/h2>
&lt;h3 id="4311切分定理">4.3.1.1　切分定理&lt;/h3>
&lt;blockquote>
&lt;p>将图的所有顶点分为两个非空且不重叠的两个集合。横切边是一条连接两个属于不同集合的顶点的边&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00757.gif"
loading="lazy"
>&lt;/p>
&lt;h3 id="4312贪心算法">4.3.1.2　贪心算法&lt;/h3>
&lt;blockquote>
&lt;p>使用切分定理找到最小生成树的一条边，不断重复直到找到最小生成树的所有边&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00761.gif"
loading="lazy"
>&lt;/p>
&lt;h2 id="432加权无向图的数据类型">4.3.2　加权无向图的数据类型&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class Edge implements Comparable&lt;!-- raw HTML omitted -->&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Edge(int v, int w, double weight)&lt;/td>
&lt;td>用于初始化的构造函数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double weight()&lt;/td>
&lt;td>边的权重&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int either()&lt;/td>
&lt;td>边两端的顶点之一&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int other(int v)&lt;/td>
&lt;td>另一个顶点&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int compareTo(Edge that)&lt;/td>
&lt;td>将这条边与 that 比较&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>String toString()&lt;/td>
&lt;td>对象的字符串表示&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class EdgeWeightedGraph&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>EdgeWeightedGraph(int V)&lt;/td>
&lt;td>创建一幅含有 V 个顶点的空图&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>EdgeWeightedGraph(In in)&lt;/td>
&lt;td>从输入流中读取图&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int V()&lt;/td>
&lt;td>图的顶点数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int E()&lt;/td>
&lt;td>图的边数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>void addEdge(Edge e)&lt;/td>
&lt;td>向图中添加一条边 e&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> adj(int v)&lt;/td>
&lt;td>和 v 相关联的所有边&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> edges()&lt;/td>
&lt;td>图的所有边&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>String toString()&lt;/td>
&lt;td>对象的字符串表示&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Edge&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//顶点之一
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//另一个顶点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">weight&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//边的权重
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Edge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">weight&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">v&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">w&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">weight&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">weight&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">weight&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">weight&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">either&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">other&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">vertex&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">vertex&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">vertex&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Inconsistent edge&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Edge&lt;/span> &lt;span class="n">that&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">weight&lt;/span>&lt;span class="o">()&amp;lt;&lt;/span>&lt;span class="n">that&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">weight&lt;/span>&lt;span class="o">())&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">weight&lt;/span>&lt;span class="o">()&amp;gt;&lt;/span>&lt;span class="n">that&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">weight&lt;/span>&lt;span class="o">())&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">toString&lt;/span>&lt;span class="o">(){&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%d-%d %.2f&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">weight&lt;/span>&lt;span class="o">);}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EdgeWeightedGraph&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//顶点总数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//边的总数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;[]&lt;/span> &lt;span class="n">adj&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//邻接表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Edge&lt;/span> &lt;span class="n">Weighted&lt;/span> &lt;span class="nf">Graph&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">E&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;[])&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Bag&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">EdgeWeightedGraph&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">In&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">V&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">itn&lt;/span> &lt;span class="nf">E&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addEdge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Edge&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">either&lt;/span>&lt;span class="o">(),&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">other&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">E&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">adj&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">];}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">edges&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Edge&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">other&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="433最小生成树的-api-和测试用例">4.3.3　最小生成树的 API 和测试用例&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class MST&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>MST(EdgeWeightedGraph G)&lt;/td>
&lt;td>构造函数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> edges()&lt;/td>
&lt;td>最小生成树的所有边&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double weight()&lt;/td>
&lt;td>最小生成树的权重&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="434prim-算法">4.3.4　Prim 算法&lt;/h2>
&lt;blockquote>
&lt;p>每一步都会为一棵生长中的树添加一条边&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00766.jpg"
loading="lazy"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LazyPrimMST&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 最小生成树的顶点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">mst&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 最小生成树的边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">MinPQ&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 横切边（包括失效的边）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">LazyPrimMST&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EdgeWeightedGraph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pq&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MinPQ&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">visit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 假设G是连通的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">pq&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Edge&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">delMin&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// 从pq中得到权重最小的边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">either&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">other&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 跳过失效的边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">enqueue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 将边添加到树中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="n">visit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 将顶点（v或w）添加到树中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="n">visit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">visit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EdgeWeightedGraph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 标记顶点v并将所有连接v和未被标记顶点的边加入pq
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Edge&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">adj&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">other&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">)])&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">edges&lt;/span>&lt;span class="o">(){&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">mst&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">weight&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="435prim-算法的即时实现">4.3.5　Prim 算法的即时实现&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PrimMST&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Edge&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">edgeTo&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 距离树最近的边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">distTo&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// distTo[w]=edgeTo[w].weight()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 如果v在树中则为true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">IndexMinPQ&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Double&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 有效的横切边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">PrimMST&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EdgeWeightedGraph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">edgeTo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Edge&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">distTo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">distTo&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Double&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">POSITIVE_INFINITY&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pq&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IndexMinPQ&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Double&lt;/span>&lt;span class="o">&amp;gt;(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">distTo&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pq&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">0&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 用顶点0和权重0初始化pq
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">pq&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">visit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">delMin&lt;/span>&lt;span class="o">());&lt;/span> &lt;span class="c1">// 将最近的顶点添加到树中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">visit&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EdgeWeightedGraph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">){&lt;/span> &lt;span class="c1">// 将顶点v添加到树中，更新数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Edge&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">adj&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">other&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// v-w失效
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">weight&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">distTo&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">]){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 连接w和树的最佳边Edge变为e
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">edgeTo&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">distTo&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">weight&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">pq&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">change&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">distTo&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">distTo&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">edges&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">weight&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="436kruskal-算法">4.3.6　Kruskal 算法&lt;/h2>
&lt;blockquote>
&lt;p>按照边的权重顺序（从小到大）处理它们，将边加入最小生成树中，加入的边不会与已经加入的边构成环，直到树中含有V-1条边为止&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00776.jpg"
loading="lazy"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">KruskalMST&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">mst&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">KruskalMST&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EdgeWeightedGraph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MinPQ&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pq&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MinPQ&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Edge&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">edges&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UF&lt;/span> &lt;span class="n">uf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UF&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">pq&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">mst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Edge&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">delMin&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// 从pq得到权重最小的边和它的顶点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">either&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">other&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">uf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">connected&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 忽略失效的边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">uf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">union&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 合并分量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">enqueue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 将边添加到最小生成树中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Edge&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">edges&lt;/span>&lt;span class="o">(){&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">mst&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">weight&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>4.2　有向图</title><link>https://yzlc.github.io/post/read/algorithms/4.2/</link><pubDate>Mon, 10 Aug 2020 13:24:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/4.2/</guid><description>&lt;h2 id="421术语">4.2.1　术语&lt;/h2>
&lt;blockquote>
&lt;p>由一组顶点和一组有方向的边组成的，每条有方向的边都连接着有序的一对顶点&lt;/p>
&lt;/blockquote>
&lt;h2 id="422有向图的数据类型">4.2.2　有向图的数据类型&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class Digraph&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Digraph(int V)&lt;/td>
&lt;td>创建一幅含有V个顶点但没有边的有向图&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Digraph(In in)&lt;/td>
&lt;td>从输入流 in 中读取一幅有向图&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int V()&lt;/td>
&lt;td>顶点总数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int E()&lt;/td>
&lt;td>边的总数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>void addEdge(int v, int w)&lt;/td>
&lt;td>向有向图中添加一条边 v → w&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> adj(int v)&lt;/td>
&lt;td>由 v 指出的边所连接的所有顶点&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Digraph reverse()&lt;/td>
&lt;td>该图的反向图&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>String toString()&lt;/td>
&lt;td>对象的字符串表示&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Digraph&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;[]&lt;/span> &lt;span class="n">adj&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Digraph&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">E&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;[])&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Bag&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">V&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">:}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">E&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addEdge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">E&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">adj&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">];}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Digraph&lt;/span> &lt;span class="nf">reverse&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Digraph&lt;/span> &lt;span class="n">R&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Digraph&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">adj&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">R&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addEdge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">R&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="423有向图中的可达性">4.2.3　有向图中的可达性&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class DirectedDFS&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>DirectedDFS(Digraph G, int s)&lt;/td>
&lt;td>在 G 中找到从s可达的所有顶点&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DirectedDFS(Digraph G,Iterable&lt;!-- raw HTML omitted --> sources)&lt;/td>
&lt;td>在 G 中找到从sources中的所有顶点可达的所有顶点&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean marked(int v)&lt;/td>
&lt;td>v 是可达的吗&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DirectedDFS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">DirectedDFS&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Digraph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">DirectedDFS&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Digraph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sources&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">sources&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="n">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Digraph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">adj&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="n">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">marked&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4231标记---清除的垃圾收集">4.2.3.1　标记 - 清除的垃圾收集&lt;/h3>
&lt;h2 id="424环和有向无环图">4.2.4　环和有向无环图&lt;/h2>
&lt;h3 id="4241调度问题">4.2.4.1　调度问题&lt;/h3>
&lt;p>拓扑排序：给定一幅有向图，将所有的顶点排序，使得所有的有向边均从排在前面的元素指向排在后面的元素（或者说明无法做到这一点）&lt;/p>
&lt;h3 id="4242有向图中的环">4.2.4.2　有向图中的环&lt;/h3>
&lt;p>有向环检测：给定的有向图中包含有向环吗？如果有，按照路径的方向从某个顶点并返回自己来找到环上的所有顶点&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class DirectedCycle&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>DirectedCycle(Digraph G)&lt;/td>
&lt;td>寻找有向环的构造函数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean hasCycle()&lt;/td>
&lt;td>G 是否含有有向环&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> cycle()&lt;/td>
&lt;td>有向环中的所有顶点（如果存在的话）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DirectedCycle&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">edgeTo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">cycle&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//有向环中的所有顶点（如果存在）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">onStack&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//递归调用的栈上的所有顶点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">DirectedCycle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Digraph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">onStack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">edgeTo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(!&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="n">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Digraph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">onStack&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">adj&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasCycle&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(!&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">edgeTo&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">);}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">onStack&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">]){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cycle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">edgeTo&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cycle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">push&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cycle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">push&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cycle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">push&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">onStack&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">hasCycle&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">cycle&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">cycle&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">cycle&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4243顶点的深度优先次序与拓扑排序">4.2.4.3　顶点的深度优先次序与拓扑排序&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class Topological&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Topological(Digraph G)&lt;/td>
&lt;td>拓扑排序的构造函数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean isDAG()&lt;/td>
&lt;td>G 是有向无环图吗&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> order()&lt;/td>
&lt;td>拓扑有序的所有顶点&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DepthFirstOrder&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pre&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//所有顶点的前序排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">post&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//所有顶点的后序排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">reversePost&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//所有顶点的递后序排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">DepthFirstOrder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Digraph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pre&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">post&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">reversePost&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(!&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="n">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Digraph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pre&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">enqueue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">adj&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(!&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">);}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">post&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">enqueue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">reversePost&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">push&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">pre&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">pre&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">post&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">post&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">reversePost&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">reversePost&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Topological&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 顶点的拓扑顺序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Topological&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Digraph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DirectedCycle&lt;/span> &lt;span class="n">cyclefinder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DirectedCycle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">cyclefinder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasCycle&lt;/span>&lt;span class="o">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DepthFirstOrder&lt;/span> &lt;span class="n">dfs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DepthFirstOrder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">order&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dfs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">reversePost&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">order&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isDAG&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">order&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="425有向图中的强连通性">4.2.5　有向图中的强连通性&lt;/h2>
&lt;blockquote>
&lt;p>两个顶点v和w互相可达&lt;/p>
&lt;/blockquote></description></item><item><title>第4章　图</title><link>https://yzlc.github.io/post/read/algorithms/4.1/</link><pubDate>Fri, 07 Aug 2020 09:58:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/4.1/</guid><description>&lt;h2 id="41无向图">4.1　无向图&lt;/h2>
&lt;blockquote>
&lt;p>图是由一组顶点和一组能够将两个顶点相连的边组成的&lt;/p>
&lt;/blockquote>
&lt;h3 id="412表示无向图的数据类型">4.1.2　表示无向图的数据类型&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class Graph&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Graph(int V)&lt;/td>
&lt;td>创建一个含有V个顶点但不含有边的图&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Graph(In in)&lt;/td>
&lt;td>从标准输入流 in 读入一幅图&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int V()&lt;/td>
&lt;td>顶点数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int E()&lt;/td>
&lt;td>边数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>void addEdge(int v, int w)&lt;/td>
&lt;td>向图中添加一条边 v-w&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> adj(int v)&lt;/td>
&lt;td>和 v 相邻的所有顶点&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>String toString()&lt;/td>
&lt;td>对象的字符串表示&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="4121图的几种表示方法">4.1.2.1　图的几种表示方法&lt;/h4>
&lt;p>邻接表数组：以顶点为索引的列表数组，其中的每个元素都是和该顶点相邻的顶点列表&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00689.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="4122邻接表的数据结构">4.1.2.2　邻接表的数据结构&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Graph&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 顶点数目
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 边的数目
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;[]&lt;/span> &lt;span class="n">adj&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 邻接表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Graph&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">E&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;[])&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Bag&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="c1">// 创建邻接表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="c1">// 将所有链表初始化为空
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Bag&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Graph&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">In&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readInt&lt;/span>&lt;span class="o">());&lt;/span> &lt;span class="c1">// 读取V并将图初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">E&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readInt&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// 读取E
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 添加一条边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readInt&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// 读取一个顶点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readInt&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// 读取另一个顶点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">addEdge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 添加一条连接它们的边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">V&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">E&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addEdge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 将w添加到v的链表中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 将v添加到w的链表中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">adj&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">adj&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="4123图的处理算法的设计模式">4.1.2.3　图的处理算法的设计模式&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class Search&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Search(Graph G, int s)&lt;/td>
&lt;td>找到和起点 s 连通的所有顶点&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean marked(int v)&lt;/td>
&lt;td>v 和 s 是连通的吗&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int count()&lt;/td>
&lt;td>与 s 连通的顶点总数&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="413深度优先搜索dfs通道">4.1.3　深度优先搜索（DFS）通道&lt;/h3>
&lt;h4 id="4131走迷宫">4.1.3.1　走迷宫&lt;/h4>
&lt;p>Tremaux 搜索&lt;/p>
&lt;ul>
&lt;li>选择一条没有标记过的通道，在你走过的路上铺一条绳子&lt;/li>
&lt;li>标记所有你第一次路过的路口和通道&lt;/li>
&lt;li>当来到一个标记过的路口时（用绳子）回退到上个路口&lt;/li>
&lt;li>当回退到的路口已没有可走的通道时继续回退&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DepthFirstSearch&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">DepthFirstSearch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Graph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Graph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">adj&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="n">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">marked&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">count&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="4132热身">4.1.3.2　热身&lt;/h4>
&lt;p>深度优先搜索：在访问其中一个顶点时&lt;/p>
&lt;ul>
&lt;li>将它标记为已访问&lt;/li>
&lt;li>递归地访问它的所有没有被标记过的邻居顶点&lt;/li>
&lt;/ul>
&lt;h4 id="4135深度优先搜索的详细轨迹">4.1.3.5　深度优先搜索的详细轨迹&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00701.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="414寻找路径">4.1.4　寻找路径&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class Paths&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Paths(Graph G, int s)&lt;/td>
&lt;td>在 G 中找出所有起点为 s 的路径&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean hasPathTo(int v)&lt;/td>
&lt;td>是否存在从 s 到 v 的路径&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> pathTo(int v)&lt;/td>
&lt;td>s 到 v 的路径，如果不存在则返回 null&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="4141实现">4.1.4.1　实现&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DepthFirstPaths&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//这个顶点上调用过dfs()了吗？
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">edgeTo&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//从起点到一个顶点的已知路径上的最后一个顶点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//起点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">DepthFirstPaths&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Graph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Graph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">adj&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(!&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">edgeTo&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">hasPathTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">];}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">pathTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(!&lt;/span>&lt;span class="n">hasPathTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">edgeTo&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">push&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">push&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="4142详细轨迹">4.1.4.2　详细轨迹&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00704.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="415广度优先搜索bfs">4.1.5　广度优先搜索（BFS)&lt;/h3>
&lt;blockquote>
&lt;p>按照与起点的距离的顺序来遍历所有顶点：使用（FIFO，先进先出）队列&lt;/p>
&lt;/blockquote>
&lt;p>先将起点加入队列，然后重复以下步骤直到队列为空&lt;/p>
&lt;ul>
&lt;li>取队列中的下一个顶点 v 并标记它&lt;/li>
&lt;li>将与 v 相邻的所有未被标记过的顶点加入队列&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00707.jpg"
loading="lazy"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">BreadthFirstPaths&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 到达该顶点的最短路径已知吗？
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">edgeTo&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 到达该顶点的已知路径上的最后一个顶点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 起点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">BreadthFirstPaths&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Graph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">edgeTo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">bfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Graph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 标记起点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">enqueue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 将它加入队列
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dequeue&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// 从队列中删去下一顶点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">adj&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="c1">// 对于每个未被标记的相邻顶点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">edgeTo&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 保存最短路径的最后一条边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 标记它，因为最短路径已知
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">enqueue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 并将它添加到队列中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">hasPathTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">pathTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="416连通分量">4.1.6　连通分量&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class CC&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CC(Graph G)&lt;/td>
&lt;td>预处理构造函数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean connected(int v, int w)&lt;/td>
&lt;td>v 和 w 连通吗&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int count()&lt;/td>
&lt;td>连通分量数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int id(int v)&lt;/td>
&lt;td>v 所在的连通分量的标识符（ 0 ～ count()-1 ）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="4161实现">4.1.6.1　实现&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CC&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">marked&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">CC&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Graph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">v&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(!&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Graph&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">id&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">adj&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(!&lt;/span>&lt;span class="n">marked&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dfs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">connected&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">];}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">id&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">];}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">count&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>3.4 散列表</title><link>https://yzlc.github.io/post/read/algorithms/3.4/</link><pubDate>Wed, 05 Aug 2020 10:28:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/3.4/</guid><description>&lt;ol>
&lt;li>用散列函数将被查找的键转化为数组的一个索引&lt;/li>
&lt;li>处理碰撞冲突：拉链法和线性探测法&lt;/li>
&lt;/ol>
&lt;h2 id="341散列函数">3.4.1　散列函数&lt;/h2>
&lt;h3 id="3412正整数">3.4.1.2　正整数&lt;/h3>
&lt;blockquote>
&lt;p>除留余数法(k%M，M是素数)&lt;/p>
&lt;/blockquote>
&lt;h3 id="3413浮点数">3.4.1.3　浮点数&lt;/h3>
&lt;blockquote>
&lt;p>将键表示为二进制数然后再使用除留余数法&lt;/p>
&lt;/blockquote>
&lt;h3 id="3414字符串">3.4.1.4　字符串&lt;/h3>
&lt;blockquote>
&lt;p>除留余数法也可以处理较长的键，例如字符串，我们只需将它们当作大整数即可&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">R&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">hash&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//R进制值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3415组合键">3.4.1.5　组合键&lt;/h3>
&lt;blockquote>
&lt;p>如果键的类型含有多个整型变量，我们可以和 String 类型一样将它们混合起来&lt;/p>
&lt;/blockquote>
&lt;h3 id="3416java-的约定">3.4.1.6　Java 的约定&lt;/h3>
&lt;blockquote>
&lt;p>hashCode() 方法必须和 equals() 方法一致&lt;/p>
&lt;/blockquote>
&lt;h3 id="3417将-hashcode-的返回值转化为一个数组索引">3.4.1.7　将 hashCode() 的返回值转化为一个数组索引&lt;/h3>
&lt;blockquote>
&lt;p>将默认的 hashCode() 方法和除留余数法结合起来产生一个0到M-1的整数&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">x7fffffff&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>&lt;span class="c1">//将符号位屏蔽（将一个 32 位整数变为一个 31 位非负整数）
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3418自定义的-hashcode-方法">3.4.1.8　自定义的 hashCode() 方法&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Transaction&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">who&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Date&lt;/span> &lt;span class="n">when&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hashCode&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">17&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">31&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">hash&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">who&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">31&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">hash&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">when&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">31&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">hash&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">Double&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3419软缓存">3.4.1.9　软缓存&lt;/h3>
&lt;blockquote>
&lt;p>每个键的散列值缓存起来&lt;/p>
&lt;/blockquote>
&lt;h2 id="342基于拉链法的散列表">3.4.2　基于拉链法的散列表&lt;/h2>
&lt;blockquote>
&lt;p>将大小为M的数组中的每个元素指向一条链表，链表中的每个结点都存储了散列值为该元素的索引的键值对&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SeparateChainingHashST&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 键值对总数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 散列表的大小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">SequentialSearchST&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="o">&amp;gt;[]&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 存放链表对象的数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">SeparateChainingHashST&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">997&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">SeparateChainingHashST&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 创建M条链表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">M&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">st&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SequentialSearchST&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="o">&amp;gt;[])&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SequentialSearchST&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">st&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SequentialSearchST&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">x7fffffff&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">)].&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">){&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">)].&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">keys&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="343基于线性探测法的散列表">3.4.3　基于线性探测法的散列表&lt;/h2>
&lt;blockquote>
&lt;p>用大小为M的数组保存N个键值对，其中M&amp;gt;N。我们需要依靠数组中的空位解决碰撞冲突。基于这种策略的所有方法被统称为开放地址散列表。开放地址散列表中最简单的方法叫做线性探测法：当碰撞发生时（当一个键的散列值已经被另一个不同的键占用），我们直接检查散列表中的下一个位置（将索引值加 1）&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LinearProbingHashST&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 符号表中键值对的总数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">M&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 线性探测表的大小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Key&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 键
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">vals&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">LinearProbingHashST&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">keys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vals&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">x7fffffff&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">resize&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">cap&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LinearProbingHashST&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinearProbingHashST&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="o">&amp;gt;(&lt;/span>&lt;span class="n">cap&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">vals&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">keys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">keys&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vals&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">vals&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">M&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">M&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">N&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">resize&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 将M加倍
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">vals&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vals&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">N&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">vals&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">delete&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vals&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Key&lt;/span> &lt;span class="n">keyToRedo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Value&lt;/span> &lt;span class="n">valToRedo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vals&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vals&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">N&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">keyToRedo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">valToRedo&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">N&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">N&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">resize&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">M&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>3.3　平衡查找树</title><link>https://yzlc.github.io/post/read/algorithms/3.3/</link><pubDate>Wed, 15 Jul 2020 15:28:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/3.3/</guid><description>&lt;h2 id="3312-3-查找树">3.3.1　2-3 查找树&lt;/h2>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00546.gif"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>2-结点，含有一个键（及其对应的值）和两条链接，左链接指向的2-3树中的键都小于该结点，右链接指向的2-3树中的键都大于该结点。&lt;/li>
&lt;li>3- 结点，含有两个键（及其对应的值）和三条链接，左链接指向的2-3树中的键都小于该结点，中链接指向的2-3树中的键都位于该结点的两个键之间，右链接指向的 2-3 树中的键都大于该结点。&lt;/li>
&lt;/ul>
&lt;h3 id="3311查找">3.3.1.1　查找&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00547.gif"
loading="lazy"
>&lt;/p>
&lt;h3 id="3312向-2-结点中插入新键">3.3.1.2　向 2-结点中插入新键&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00548.gif"
loading="lazy"
>&lt;/p>
&lt;h3 id="3313向一棵只含有一个3-结点的树中插入新键">3.3.1.3　向一棵只含有一个3-结点的树中插入新键&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00549.gif"
loading="lazy"
>&lt;/p>
&lt;h3 id="3314向一个父结点为2-结点的3-结点中插入新键">3.3.1.4　向一个父结点为2-结点的3-结点中插入新键&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00550.gif"
loading="lazy"
>&lt;/p>
&lt;h3 id="3315向一个父结点为3-结点的3-结点中插入新键">3.3.1.5　向一个父结点为3-结点的3-结点中插入新键&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00551.gif"
loading="lazy"
>&lt;/p>
&lt;h3 id="3316分解根结点">3.3.1.6　分解根结点&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00552.gif"
loading="lazy"
>&lt;/p>
&lt;h3 id="3317局部变换">3.3.1.7　局部变换&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00553.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="3318全局性质">3.3.1.8　全局性质&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00554.gif"
loading="lazy"
>&lt;/p>
&lt;h2 id="332红黑二叉查找树">3.3.2　红黑二叉查找树&lt;/h2>
&lt;blockquote>
&lt;p>2-3树数据结构，用标准的二叉查找树（完全由2-结点构成）和一些额外的信息（替换3-结点）来表示 2-3树&lt;/p>
&lt;/blockquote>
&lt;h3 id="3321替换3-结点">3.3.2.1　替换3-结点&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00558.gif"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>红链接：将两个2-结点连接起来构成一个3-结点&lt;/li>
&lt;li>黑链接：2-3树中的普通链接&lt;/li>
&lt;/ul>
&lt;h3 id="3322一种等价的定义">3.3.2.2　一种等价的定义&lt;/h3>
&lt;ul>
&lt;li>红链接均为左链接&lt;/li>
&lt;li>没有任何一个结点同时和两条红链接相连&lt;/li>
&lt;li>该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同&lt;/li>
&lt;/ul>
&lt;h3 id="3323一一对应">3.3.2.3　一一对应&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00559.jpg"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00560.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="3324颜色表示">3.3.2.4　颜色表示&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00561.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="3325旋转">3.3.2.5　旋转&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00562.jpg"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00563.gif"
loading="lazy"
>&lt;/p>
&lt;h3 id="3326在旋转后重置父结点的链接">3.3.2.6　在旋转后重置父结点的链接&lt;/h3>
&lt;h3 id="3327向单个2-结点中插入新键">3.3.2.7　向单个2-结点中插入新键&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00564.gif"
loading="lazy"
>&lt;/p>
&lt;h3 id="3328向树底部的2-结点插入新键">3.3.2.8　向树底部的2-结点插入新键&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00565.gif"
loading="lazy"
>&lt;/p>
&lt;h3 id="3329向一棵双键树即一个3-结点中插入新键">3.3.2.9　向一棵双键树（即一个3-结点）中插入新键&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00566.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="33210颜色转换">3.3.2.10　颜色转换&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00567.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="33211根结点总是黑色">3.3.2.11　根结点总是黑色&lt;/h3>
&lt;h3 id="33212向树底部的3-结点插入新键">3.3.2.12　向树底部的3-结点插入新键&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00568.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="33213将红链接在树中向上传递">3.3.2.13　将红链接在树中向上传递&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00569.jpg"
loading="lazy"
>&lt;/p>
&lt;h2 id="333实现">3.3.3　实现&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RedBlackBST&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Node&lt;/span> &lt;span class="c1">// 含有color变量的Node对象（请见3.3.2.4节）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isRed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="nf">rotateLeft&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="nf">rotateRight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">flipColors&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 查找key，找到则更新其值，否则为它新建一个结点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BLACK&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// 标准的插入操作，和父结点用红链接相连
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RED&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">cmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cmp&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cmp&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isRed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">isRed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rotateLeft&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isRed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">isRed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rotateRight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isRed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">isRed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="n">flipColors&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>3.2　二叉查找树</title><link>https://yzlc.github.io/post/read/algorithms/3.2/</link><pubDate>Wed, 15 Jul 2020 14:28:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/3.2/</guid><description>&lt;blockquote>
&lt;p>一棵二叉查找树 （BST）是一棵二叉树，其中每个结点都含有一个Comparable 的键（以及相关联的值）且每个结点的键都大于其左子树中
的任意结点的键而小于右子树的任意结点的键&lt;/p>
&lt;/blockquote>
&lt;h2 id="321基本实现">3.2.1　基本实现&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">BST&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 二叉查找树的根结点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 键
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="n">left&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 指向子树的链接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 以该结点为根的子树中的结点总数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Node&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">N&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 在以x为根结点的子树中查找并返回key所对应的值；
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 如果找不到则返回null
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">cmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cmp&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cmp&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">val&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 查找key，找到则更新它的值，否则为它创建一个新的结点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果key存在于以x为根结点的子树中则更新它的值；
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 否则将以key和val为键值对的新结点插入到该子树中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">cmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cmp&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cmp&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="33平衡查找树">3.3　平衡查找树&lt;/h2>
&lt;h3 id="3312-3-查找树">3.3.1　2-3 查找树&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00546.gif"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>2-结点，含有一个键（及其对应的值）和两条链接，左链接指向的2-3树中的键都小于该结点，右链接指向的2-3树中的键都大于该结点。&lt;/li>
&lt;li>3- 结点，含有两个键（及其对应的值）和三条链接，左链接指向的2-3树中的键都小于该结点，中链接指向的2-3树中的键都位于该结点的两个键之间，右链接指向的 2-3 树中的键都大于该结点。&lt;/li>
&lt;/ul>
&lt;h4 id="3311查找">3.3.1.1　查找&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00547.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="3312向-2-结点中插入新键">3.3.1.2　向 2-结点中插入新键&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00548.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="3313向一棵只含有一个3-结点的树中插入新键">3.3.1.3　向一棵只含有一个3-结点的树中插入新键&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00549.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="3314向一个父结点为2-结点的3-结点中插入新键">3.3.1.4　向一个父结点为2-结点的3-结点中插入新键&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00550.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="3315向一个父结点为3-结点的3-结点中插入新键">3.3.1.5　向一个父结点为3-结点的3-结点中插入新键&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00551.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="3316分解根结点">3.3.1.6　分解根结点&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00552.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="3317局部变换">3.3.1.7　局部变换&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00553.jpg"
loading="lazy"
>&lt;/p>
&lt;h4 id="3318全局性质">3.3.1.8　全局性质&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00554.gif"
loading="lazy"
>&lt;/p>
&lt;h3 id="332红黑二叉查找树">3.3.2　红黑二叉查找树&lt;/h3>
&lt;blockquote>
&lt;p>2-3树数据结构，用标准的二叉查找树（完全由2-结点构成）和一些额外的信息（替换3-结点）来表示 2-3树&lt;/p>
&lt;/blockquote>
&lt;h4 id="3321替换3-结点">3.3.2.1　替换3-结点&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00558.gif"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>红链接：将两个2-结点连接起来构成一个3-结点&lt;/li>
&lt;li>黑链接：2-3树中的普通链接&lt;/li>
&lt;/ul>
&lt;h4 id="3322一种等价的定义">3.3.2.2　一种等价的定义&lt;/h4>
&lt;ul>
&lt;li>红链接均为左链接&lt;/li>
&lt;li>没有任何一个结点同时和两条红链接相连&lt;/li>
&lt;li>该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同&lt;/li>
&lt;/ul>
&lt;h4 id="3323一一对应">3.3.2.3　一一对应&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00559.jpg"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00560.jpg"
loading="lazy"
>&lt;/p>
&lt;h4 id="3324颜色表示">3.3.2.4　颜色表示&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00561.jpg"
loading="lazy"
>&lt;/p>
&lt;h4 id="3325旋转">3.3.2.5　旋转&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00562.jpg"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00563.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="3326在旋转后重置父结点的链接">3.3.2.6　在旋转后重置父结点的链接&lt;/h4>
&lt;h4 id="3327向单个2-结点中插入新键">3.3.2.7　向单个2-结点中插入新键&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00564.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="3328向树底部的2-结点插入新键">3.3.2.8　向树底部的2-结点插入新键&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00565.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="3329向一棵双键树即一个3-结点中插入新键">3.3.2.9　向一棵双键树（即一个3-结点）中插入新键&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00566.jpg"
loading="lazy"
>&lt;/p>
&lt;h4 id="33210颜色转换">3.3.2.10　颜色转换&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00567.jpg"
loading="lazy"
>&lt;/p>
&lt;h4 id="33211根结点总是黑色">3.3.2.11　根结点总是黑色&lt;/h4>
&lt;h4 id="33212向树底部的3-结点插入新键">3.3.2.12　向树底部的3-结点插入新键&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00568.jpg"
loading="lazy"
>&lt;/p>
&lt;h4 id="33213将红链接在树中向上传递">3.3.2.13　将红链接在树中向上传递&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00569.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="333实现">3.3.3　实现&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RedBlackBST&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Node&lt;/span> &lt;span class="c1">// 含有color变量的Node对象（请见3.3.2.4节）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isRed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="nf">rotateLeft&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="nf">rotateRight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">flipColors&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 查找key，找到则更新其值，否则为它新建一个结点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BLACK&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// 标准的插入操作，和父结点用红链接相连
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">RED&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">cmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cmp&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cmp&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isRed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">isRed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rotateLeft&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isRed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">isRed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rotateRight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isRed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">isRed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="n">flipColors&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>第3章　查找</title><link>https://yzlc.github.io/post/read/algorithms/3.1/</link><pubDate>Wed, 15 Jul 2020 13:28:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/3.1/</guid><description>&lt;h2 id="31符号表">3.1　符号表&lt;/h2>
&lt;blockquote>
&lt;p>符号表是一种存储键值对的数据结构，支持两种操作：插入（put），即将一组新的键值对存入表中；查找 （get），即根据给定的键得到相应的值&lt;/p>
&lt;/blockquote>
&lt;h3 id="311api">3.1.1　API&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class ST &amp;lt;Key, Value&amp;gt;&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ST()&lt;/td>
&lt;td>创建一张符号表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>void put(Key key, Value val)&lt;/td>
&lt;td>将键值对存入表中（若值为空则将键 key 从表中删除）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Value get(Key key)&lt;/td>
&lt;td>获取键 key 对应的值（若键 key 不存在则返回 null）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>void delete(Key key)&lt;/td>
&lt;td>从表中删去键 key （及其对应的值）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean contains(Key key)&lt;/td>
&lt;td>键 key 在表中是否有对应的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean isEmpty()&lt;/td>
&lt;td>表是否为空&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int size()&lt;/td>
&lt;td>表中的键值对数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterable&lt;!-- raw HTML omitted --> keys()&lt;/td>
&lt;td>表中的所有键的集合&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>void delete(Key key)&lt;/td>
&lt;td>put(key, null);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean contains(key key)&lt;/td>
&lt;td>return get(key) != null;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean isEmpty()&lt;/td>
&lt;td>return size() == 0;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="314无序链表中的顺序查找">3.1.4　无序链表中的顺序查找&lt;/h3>
&lt;blockquote>
&lt;p>适用于小型问题；对于大型符号表很慢&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SequentialSearchST&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 链表首结点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 链表结点的定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Value&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Node&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 查找给定的键，返回相关联的值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">val&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 命中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 未名中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 查找给定的键，找到则更新其值，否则在表中新建结点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="c1">// 命中，更新
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 未命中，新建结点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="315有序数组中的二分查找">3.1.5　有序数组中的二分查找&lt;/h3>
&lt;blockquote>
&lt;p>最优的查找效率和空间需求，能够进行有序性相关的操作；插入操作很慢&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">BinarySearchST&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Key&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">vals&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">BinarySearchST&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">capacity&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">keys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">capacity&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vals&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">capacity&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rank&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">vals&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">rank&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">lo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">lo&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lo&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">hi&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">cmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cmp&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">hi&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cmp&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">lo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">mid&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 查找键，找到则更新值，否则创建新的元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rank&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">vals&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">--)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="n">vals&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vals&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">keys&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">vals&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">N&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>第2章　排序</title><link>https://yzlc.github.io/post/read/algorithms/2/</link><pubDate>Tue, 07 Jul 2020 10:27:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/2/</guid><description>&lt;h2 id="21初级排序算法">2.1　初级排序算法&lt;/h2>
&lt;h3 id="212选择排序">2.1.2　选择排序&lt;/h3>
&lt;blockquote>
&lt;p>不断地选择剩余元素之中的最小者&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Selection&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">less&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Comparable&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Comparable&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">exch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Comparable&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 将a[]按升序排列
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 数组长度
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 将a[i]和a[i+1..N]中最小的元素交换
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">min&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 最小元素的索引
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">less&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="o">]))&lt;/span> &lt;span class="n">min&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">min&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="213插入排序">2.1.3　插入排序&lt;/h3>
&lt;blockquote>
&lt;p>将其余所有元素在插入之前都向右移动一位&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Insertion&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 将a[]按升序排列
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 将 a[i] 插入到 a[i-1]、a[i-2]、a[i-3]...之中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">less&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">]);&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">--)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="216希尔排序">2.1.6　希尔排序&lt;/h3>
&lt;blockquote>
&lt;p>基于插入排序的快速的排序算法，使数组中任意间隔为h的元素有序&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Shell&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 将a[]按升序排列
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 1, 4, 13, 40, 121, 364, 1093, ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 将数组变为h有序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 将a[i]插入到a[i-h], a[i-2*h], a[i-3*h]... 之中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">less&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">]);&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="22归并排序">2.2　归并排序&lt;/h2>
&lt;blockquote>
&lt;p>将两个有序的数组归并成一个更大的有序数组&lt;/p>
&lt;/blockquote>
&lt;h3 id="221原地归并的抽象方法">2.2.1　原地归并的抽象方法&lt;/h3>
&lt;blockquote>
&lt;p>将两个不同的有序数组归并到第三个数组中&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">merge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">mid&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span> &lt;span class="c1">// 将a[lo..mid] 和 a[mid+1..hi] 归并
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="c1">// 将a[lo..hi]复制到aux[lo..hi]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">aux&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="c1">// 归并回到a[lo..hi]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">mid&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">aux&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">++];&lt;/span>&lt;span class="c1">// 左半边用尽取右半边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">hi&lt;/span> &lt;span class="o">)&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">aux&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++];&lt;/span>&lt;span class="c1">// 右半边用尽取左半边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">less&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">aux&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">aux&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]))&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">aux&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">++];&lt;/span>&lt;span class="c1">// 右半边小于左半边取右半边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">aux&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++];&lt;/span>&lt;span class="c1">// 右半边大于等于左半边取左半边
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="222自顶向下的归并排序">2.2.2　自顶向下的归并排序&lt;/h3>
&lt;blockquote>
&lt;p>如果它能将两个子数组排序，它就能够通过归并两个子数组来将整个数组排序&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Merge&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">aux&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 归并所需的辅助数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">aux&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="c1">// 一次性分配空间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 将数组a[lo..hi]排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">hi&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lo&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">hi&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">)/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mid&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 将左半边排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mid&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 将右半边排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">merge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mid&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 归并结果（代码见“原地归并的抽象方法”）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="223自底向上的归并排序">2.2.3　自底向上的归并排序&lt;/h3>
&lt;blockquote>
&lt;p>先归并那些微型数组，然后再成对归并得到的子数组&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MergeBU&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">aux&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 归并所需的辅助数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// merge()方法的代码请见“原地归并的抽象方法”
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 进行lgN次两两归并
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">aux&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">sz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">sz&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">sz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sz&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">sz&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// sz子数组大小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">lo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">lo&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">sz&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">lo&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sz&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">sz&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// lo:子数组索引
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">merge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">sz&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">min&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">lo&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">sz&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">sz&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="23快速排序">2.3　快速排序&lt;/h2>
&lt;blockquote>
&lt;p>是一种分治的排序算法。它将一个数组分成两个子数组，将两部分独立地排序&lt;/p>
&lt;/blockquote>
&lt;p>快速排序和归并排序是互补的&lt;/p>
&lt;ul>
&lt;li>归并排序：分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序。递归调用发生在处理整个数组之前。一个数组被等分为两半&lt;/li>
&lt;li>快速排序：当两个子数组都有序时整个数组也就自然有序了。递归调用发生在处理整个数组之后 。切分（partition）的位置取决于数组的内容&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Quick&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">hi&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">partition&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 切分
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 将左半部分a[lo .. j-1]排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 将右半部分a[j+1 .. hi]排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">partition&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 将数组切分为a[lo..i-1], a[i], a[i+1..hi]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 左右扫描指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Comparable&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">lo&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="c1">// 切分元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span> &lt;span class="c1">// 扫描左右，检查扫描是否结束并交换元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">less&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">[++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">],&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">less&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[--&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">]))&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 将v = a[j]放入正确的位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// a[lo..j-1] &amp;lt;= a[j] &amp;lt;= a[j+1..hi] 达成
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="233算法改进">2.3.3　算法改进&lt;/h3>
&lt;h4 id="2331切换到插入排序">2.3.3.1　切换到插入排序&lt;/h4>
&lt;h4 id="2332三取样切分">2.3.3.2　三取样切分&lt;/h4>
&lt;h4 id="2333熵最优的排序">2.3.3.3　熵最优的排序&lt;/h4>
&lt;blockquote>
&lt;p>适用于含有大量重复元素的数组。将数组切分为三部分，分别对应小于、等于和大于切分元素的数组元素&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Quick3way&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">hi&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">lt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">gt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Comparable&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">lo&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">gt&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">cmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cmp&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">exch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lt&lt;/span>&lt;span class="o">++,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">cmp&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">exch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">gt&lt;/span>&lt;span class="o">--);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="c1">// 现在 a[lo..lt-1] &amp;lt; v = a[lt..gt] &amp;lt; a[gt+1..hi]成立
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lt&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">gt&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hi&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="24优先队列">2.4　优先队列&lt;/h2>
&lt;blockquote>
&lt;p>删除最大元素和插入元素&lt;/p>
&lt;/blockquote>
&lt;h3 id="241api">2.4.1　API&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class MaxPQ &amp;lt;Key extends Comparable&lt;!-- raw HTML omitted -->&amp;gt;&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>MaxPQ()&lt;/td>
&lt;td>创建一个优先队列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MaxPQ(int max)&lt;/td>
&lt;td>创建一个初始容量为 max 的优先队列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MaxPQ(Key[] a)&lt;/td>
&lt;td>用 a[] 中的元素创建一个优先队列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>void Insert(Key v)&lt;/td>
&lt;td>向优先队列中插入一个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Key max()&lt;/td>
&lt;td>返回最大元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Key delMax()&lt;/td>
&lt;td>删除并返回最大元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean isEmpty()&lt;/td>
&lt;td>返回队列是否为空&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int size()&lt;/td>
&lt;td>返回优先队列中的元素个数&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="243堆的定义">2.4.3　堆的定义&lt;/h3>
&lt;blockquote>
&lt;p>当一棵二叉树的每个结点都大于等于它的两个子结点时，它被称为堆有序&lt;/p>
&lt;/blockquote>
&lt;p>二叉堆：一组能够用堆有序的完全二叉树排序的元素，并在数组中按照层级储存（不使用数组的第一个位置）&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00420.gif"
loading="lazy"
>&lt;/p>
&lt;h3 id="244堆的算法">2.4.4　堆的算法&lt;/h3>
&lt;p>上浮：当某个结点的优先级上升（或是在堆底加入一个新的元素）&lt;/p>
&lt;p>下沉：当某个结点的优先级下降（例如，将根结点替换为一个较小的元素）&lt;/p>
&lt;h4 id="2441由下至上的堆有序化上浮">2.4.4.1　由下至上的堆有序化（上浮）&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">swim&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">less&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00426.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="2442由上至下的堆有序化下沉">2.4.4.2　由上至下的堆有序化（下沉）&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sink&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">less&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">less&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00427.gif"
loading="lazy"
>&lt;/p>
&lt;p>插入元素：将新元素加到数组末尾，增加堆的大小并让这个新元素上浮到合适的位置&lt;/p>
&lt;p>删除最大元素：从数组顶端删去最大的元素并将数组的最后一个元素放到顶端，减小堆的大小并让这个元素下沉到合适的位置&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00428.gif"
loading="lazy"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MaxPQ&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Key&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 基于堆的完全二叉树
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 存储于pq[1..N]中，pq[0]没有使用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">MaxPQ&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">maxN&lt;/span>&lt;span class="o">){&lt;/span> &lt;span class="n">pq&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Comparable&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">maxN&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pq&lt;/span>&lt;span class="o">[++&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">swim&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Key&lt;/span> &lt;span class="nf">delMax&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Key&lt;/span> &lt;span class="n">max&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="c1">// 从根结点得到最大元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">exch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">--);&lt;/span> &lt;span class="c1">// 将其和最后一个结点交换
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">pq&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 防止对象游离
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">sink&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// 恢复堆的有序性
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="245堆排序">2.4.5　堆排序&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sort&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">--)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sink&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">N&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">--);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sink&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00438.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>第1章　基础</title><link>https://yzlc.github.io/post/read/algorithms/1/</link><pubDate>Thu, 02 Jul 2020 14:01:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/algorithms/1/</guid><description>&lt;h2 id="13背包队列和栈">1.3　背包、队列和栈&lt;/h2>
&lt;h3 id="131api">1.3.1　API&lt;/h3>
&lt;h4 id="1314背包">1.3.1.4　背包&lt;/h4>
&lt;blockquote>
&lt;p>不支持从中删除元素的集合数据类型——它的目的就是帮助用例收集元素并迭代遍历所有收集到的元素&lt;/p>
&lt;/blockquote>
&lt;h4 id="1315先进先出队列">1.3.1.5　先进先出队列&lt;/h4>
&lt;blockquote>
&lt;p>先进先出队列 （或简称队列 ）是一种基于先进先出 （FIFO）策略的集合类型&lt;/p>
&lt;/blockquote>
&lt;p>在应用程序中使用队列的主要原因是在用集合保存元素的同时保存它们的相对顺序&lt;/p>
&lt;h4 id="1316下压栈">1.3.1.6　下压栈&lt;/h4>
&lt;blockquote>
&lt;p>下压栈 （或简称栈 ）是一种基于后进先出 （LIFO）策略的集合类型&lt;/p>
&lt;/blockquote>
&lt;p>在应用程序中使用栈迭代器的一个典型原因是在用集合保存元素的同时颠倒它们的相对顺序&lt;/p>
&lt;h3 id="133链表">1.3.3　链表&lt;/h3>
&lt;blockquote>
&lt;p>链表是一种递归的数据结构，它或者为空（null ），或者是指向一个结点 （node）的引用，该结点含有一个泛型的元素和一个指向另一条
链表的引用。&lt;/p>
&lt;/blockquote>
&lt;h4 id="1331结点记录">1.3.3.1　结点记录&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Item&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="1333在表头插入结点">1.3.3.3　在表头插入结点&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00078.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="1334从表头删除结点">1.3.3.4　从表头删除结点&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00079.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="1335在表尾插入结点">1.3.3.5　在表尾插入结点&lt;/h4>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00080.gif"
loading="lazy"
>&lt;/p>
&lt;h4 id="1336其他位置的插入和删除操作">1.3.3.6　其他位置的插入和删除操作&lt;/h4>
&lt;p>实现任意插入和删除操作的标准解决方案是使用双向链表 ，其中每个结点都含有两个链接，分别指向不同的方向&lt;/p>
&lt;h4 id="1337遍历">1.3.3.7　遍历&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Node&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 处理x.item
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="1338栈的实现">1.3.3.8　栈的实现&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Item&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Item&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//栈顶（最近添加的元素）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//元素数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Node&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Item&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isEmpty&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">push&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Item&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span> &lt;span class="n">oldFirst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">first&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">first&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">oldFirst&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">n&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Item&lt;/span> &lt;span class="nf">pop&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Item&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">item&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">n&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ListIterator&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Item&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">hasNext&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Item&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Item&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">item&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Item&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">iterator&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ListIterator&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="1339队列的实现">1.3.3.9　队列的实现&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Item&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//指向最早添加的节点的链接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//指向最近添加的节点的链接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Node&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Item&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isEmpty&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">(){&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">enQueue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Item&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span> &lt;span class="n">oldLast&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">last&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">last&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isEmpty&lt;/span>&lt;span class="o">())&lt;/span>&lt;span class="n">first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//链表为空时将first和last都指向新结点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="n">oldLast&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">n&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Item&lt;/span> &lt;span class="nf">deQueue&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Item&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">item&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isEmpty&lt;/span>&lt;span class="o">())&lt;/span>&lt;span class="n">last&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//链表为空时更新last的值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="15案例研究union-find-算法">1.5　案例研究：union-find 算法&lt;/h2>
&lt;h3 id="151动态连通性">1.5.1　动态连通性&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/algorithms/Image00263.jpg"
loading="lazy"
>&lt;/p>
&lt;h4 id="1513数学集合">1.5.1.3　数学集合&lt;/h4>
&lt;p>将对象称为触点，将整数对称为连接，将等价类称为连通分量或是简称分量&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>public class UF&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>UF(int N)&lt;/td>
&lt;td>以整数标识（0到N-1）初始化N个触点&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>void union(int p, int q)&lt;/td>
&lt;td>在p和q之间添加一条连接&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int find(int p)&lt;/td>
&lt;td>p（0到N-1）所在的分量的标识符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean connected(int p, int q)&lt;/td>
&lt;td>如果p和q存在于同一个分量中则返回true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int count()&lt;/td>
&lt;td>连通分量的数量&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="152实现">1.5.2　实现&lt;/h3>
&lt;h4 id="1521quick-find-算法">1.5.2.1　quick-find 算法&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">){&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">union&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span> &lt;span class="c1">// 将p和q归并到相同的分量中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">pID&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">qID&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果p和q已经在相同的分量之中则不需要采取任何行动
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">pID&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">qID&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将p的分量重命名为q的名称
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">pID&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">qID&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="1523quick-union-算法">1.5.2.3　quick-union 算法&lt;/h4>
&lt;p>每个触点所对应的id[]元素都是同一个分量中的另一个触点的名称（也可能是它自己）——我们将这种联系称为链接。在实现find()方法时，我们从给定的触点开始，由它的链接得到另一个触点，再由这个触点的链接到达第三个触点，如此继续跟随着链接直到到达一个根触点，即链接指向自己的触点&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span> &lt;span class="c1">// 找出分量的名称
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">union&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span> &lt;span class="c1">// 将p和q的根节点统一
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">pRoot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">qRoot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">pRoot&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">qRoot&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">id&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">pRoot&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">qRoot&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="1528最优算法">1.5.2.8　最优算法&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">WeightedQuickUnionPathCompressionUF&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//父链接数组（由触点索引）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//各个根节点所对应的分量的大小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">WeightedQuickUnionPathCompressionUF&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">];&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//跟随链接找到根节点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//将在路径上遇到的所有节点都直接链接到根节点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">newp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parent&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">newp&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">union&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">rootP&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">rootQ&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rootP&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">rootQ&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//将小树的根节点连接到大树的根节点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">rootP&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">rootQ&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">rootP&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rootQ&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">rootQ&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">rootP&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">rootQ&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rootP&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">rootP&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">rootQ&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>read</title><link>https://yzlc.github.io/post/read/read/</link><pubDate>Wed, 24 Jun 2020 09:13:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/read/</guid><description>&lt;p>基础
 &lt;a class="link" href="https://yzlc.github.io/tags/csapp" >《深入理解计算机系统》&lt;/a>
 《tcp/ip详解》
 &lt;a class="link" href="https://yzlc.github.io/tags/%e7%ae%97%e6%b3%95" >《数据结构与算法》&lt;/a>
 &lt;a class="link" href="https://yzlc.github.io/tags/linux" >《快乐的Linux命令行》&lt;/a> &lt;a class="link" href="https://billie66.github.io/TLCL/book/" target="_blank" rel="noopener"
>原书&lt;/a>&lt;/p>
&lt;p>王道
 &lt;a class="link" href="https://yzlc.github.io/tags/organization" >计算机组成原理&lt;/a>
 &lt;a class="link" href="https://yzlc.github.io/tags/os" >操作系统&lt;/a>&lt;/p>
&lt;p>设计
 《Java编程思想》
 &lt;a class="link" href="https://yzlc.github.io/tags/%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f" >《大话设计模式》&lt;/a>
 《重构 改善既有代码的设计》
 &lt;a class="link" href="https://yzlc.github.io/post/read/effectivejava/effectivejava" >《effective java》&lt;/a>&lt;/p>
&lt;p>虚拟机
 &lt;a class="link" href="https://yzlc.github.io/tags/jvm" >《深入理解Java虚拟机》&lt;/a>&lt;/p>
&lt;p>并发
 &lt;a class="link" href="https://yzlc.github.io/tags/%e5%b9%b6%e5%8f%91" >《Java并发编程实战》&lt;/a>
 &lt;a class="link" href="http://www.blogjava.net/xylz/archive/2010/07/08/325587.html" target="_blank" rel="noopener"
>深入浅出Java Concurrency&lt;/a>&lt;/p>
&lt;p>源码
 JVM
 JDK
 框架&lt;/p>
&lt;p>造轮子
 &amp;hellip;&lt;/p>
&lt;p>新技术
 大数据
 分布式缓存
 分布式消息服务
 分布式计算
 软负载均衡&lt;/p></description></item><item><title>第11章　性能与可伸缩性</title><link>https://yzlc.github.io/post/read/concurrency/11/</link><pubDate>Tue, 23 Jun 2020 13:33:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/11/</guid><description>&lt;h2 id="113-线程引入的开销">11.3 线程引入的开销&lt;/h2>
&lt;h3 id="1131-上下文切换">11.3.1 上下文切换&lt;/h3>
&lt;h3 id="1132-内存同步">11.3.2 内存同步&lt;/h3>
&lt;h3 id="1133-阻塞">11.3.3 阻塞&lt;/h3>
&lt;h2 id="114-减少锁的竞争">11.4 减少锁的竞争&lt;/h2>
&lt;ul>
&lt;li>减少锁的持有时间&lt;/li>
&lt;li>降低锁的请求频率&lt;/li>
&lt;li>使用带有协调机制的独占锁，这些机制允许更高的并发性&lt;/li>
&lt;/ul>
&lt;h3 id="1141-缩小锁的范围">11.4.1 缩小锁的范围&lt;/h3>
&lt;h3 id="1142-减小锁的粒度">11.4.2 减小锁的粒度&lt;/h3>
&lt;h3 id="1143-锁分段">11.4.3 锁分段&lt;/h3>
&lt;h3 id="1144-避免热点域">11.4.4 避免热点域&lt;/h3>
&lt;blockquote>
&lt;p>例如将一些反复计算的结果缓存起来&lt;/p>
&lt;/blockquote>
&lt;h3 id="1145-一些替代独占锁的方法">11.4.5 一些替代独占锁的方法&lt;/h3>
&lt;h3 id="1146-监测cpu的利用率">11.4.6 监测CPU的利用率&lt;/h3>
&lt;h3 id="1147-向对象池说不">11.4.7 向对象池说不&lt;/h3>
&lt;p>通常，对象分配操作的开销比同步的开销更低&lt;/p></description></item><item><title>第10章　避免活跃性危险</title><link>https://yzlc.github.io/post/read/concurrency/10/</link><pubDate>Tue, 23 Jun 2020 13:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/10/</guid><description>&lt;h2 id="101-死锁">10.1 死锁&lt;/h2>
&lt;h3 id="1011-锁顺序死锁">10.1.1 锁顺序死锁&lt;/h3>
&lt;p>如果所有线程以固定的顺序来获得锁，那么在程序中就不会出现锁顺序死锁问题&lt;/p>
&lt;h3 id="1012-动态的锁顺序死锁">10.1.2 动态的锁顺序死锁&lt;/h3>
&lt;h3 id="1013-在协作对象之间发生的死锁">10.1.3 在协作对象之间发生的死锁&lt;/h3>
&lt;p>如果在持有锁时调用某个外部方法，那么将出现活跃性问题。在这个外部方法中可能会获取其他锁，或者阻塞时间过长，导致其他线程无法及时获得当前被持有的锁&lt;/p>
&lt;h3 id="1014-开放调用">10.1.4 开放调用&lt;/h3>
&lt;blockquote>
&lt;p>在调用某个方法时不需要持有锁&lt;/p>
&lt;/blockquote>
&lt;h3 id="1015-资源死锁">10.1.5 资源死锁&lt;/h3>
&lt;h2 id="102-死锁的避免与诊断">10.2 死锁的避免与诊断&lt;/h2>
&lt;h3 id="1021-支持定时的锁">10.2.1 支持定时的锁&lt;/h3>
&lt;h3 id="1022-通过线程转储信息来分析死锁">10.2.2 通过线程转储信息来分析死锁&lt;/h3>
&lt;h2 id="103-其他活跃性危险">10.3 其他活跃性危险&lt;/h2>
&lt;h3 id="1031-饥饿">10.3.1 饥饿&lt;/h3>
&lt;h3 id="1032-糟糕的响应性">10.3.2 糟糕的响应性&lt;/h3>
&lt;h3 id="1033-活锁">10.3.3 活锁&lt;/h3></description></item><item><title>第8章　线程池的使用</title><link>https://yzlc.github.io/post/read/concurrency/8/</link><pubDate>Tue, 23 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/8/</guid><description>&lt;h2 id="81-在任务与执行策略之间的隐性耦合">8.1 在任务与执行策略之间的隐性耦合&lt;/h2>
&lt;p>有些类型的任务需要明确地指定执行策略&lt;/p>
&lt;ul>
&lt;li>依赖性任务&lt;/li>
&lt;li>使用线程封封闭机制的任务&lt;/li>
&lt;li>对响应时间敏感的任务&lt;/li>
&lt;/ul>
&lt;h3 id="811-线程饥饿死锁">8.1.1 线程饥饿死锁&lt;/h3>
&lt;blockquote>
&lt;p>线程池中的任务需要无限期地等待一些必须由池中其他任务才能提供的资源或条件&lt;/p>
&lt;/blockquote>
&lt;h3 id="812-运行时间较长的任务">8.1.2 运行时间较长的任务&lt;/h3>
&lt;h2 id="82-设置线程池的大小">8.2 设置线程池的大小&lt;/h2>
&lt;h2 id="83-配置threadpoolexecutor">8.3 配置ThreadPoolExecutor&lt;/h2>
&lt;h3 id="831-线程的创建与销毁">8.3.1 线程的创建与销毁&lt;/h3>
&lt;h3 id="832-管理队列任务">8.3.2 管理队列任务&lt;/h3>
&lt;p>对于Executor，newCachedThreadPool工厂方法是一种很好的默认选择，它能提供比固定大小的线程池更好的排队性能。当需要限制当前任务的数量以满足资源管理需求时，那么可以选择固定大小的线程池，就像在接受网络客户请求的服务器应用程序中。如果不进行限制，那么很容易发生过载问题&lt;/p>
&lt;h3 id="833-饱和策略">8.3.3 饱和策略&lt;/h3>
&lt;h3 id="834-线程工厂">8.3.4 线程工厂&lt;/h3>
&lt;h3 id="835-在调用构造函数后再定制threadpoolexecutor">8.3.5 在调用构造函数后再定制ThreadPoolExecutor&lt;/h3></description></item><item><title>第7章　取消与关闭</title><link>https://yzlc.github.io/post/read/concurrency/7/</link><pubDate>Mon, 22 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/7/</guid><description>&lt;h2 id="71-任务取消">7.1 任务取消&lt;/h2>
&lt;ul>
&lt;li>用户请求取消&lt;/li>
&lt;li>有时间限制的操作&lt;/li>
&lt;li>应用程序事件&lt;/li>
&lt;li>错误&lt;/li>
&lt;li>关闭&lt;/li>
&lt;/ul>
&lt;h3 id="711-中断">7.1.1 中断&lt;/h3>
&lt;p>调用interrupt并不意味着立即停止目标线程正在进行的工作，而只是传递了请求中断的消息&lt;/p>
&lt;p>通常，中断是实现取消的最合理方式&lt;/p>
&lt;h3 id="712-中断策略">7.1.2 中断策略&lt;/h3>
&lt;p>由于每个线程拥有各自的中断策略，因此除非你知道中断对该线程的含义，否则就不应该中断这个线程&lt;/p>
&lt;h3 id="713-响应中断">7.1.3 响应中断&lt;/h3>
&lt;p>只有实现了线程中断策略的代码才可以屏蔽中断请求，在常规的任务和库代码中都不应该屏蔽中断请求&lt;/p>
&lt;h3 id="715-通过future来实现取消">7.1.5 通过Future来实现取消&lt;/h3>
&lt;p>当Future.get抛出InterruptedException或TimeoutException时，如果你知道不再需要结果，那么就可以调用Future.cancel来取消任务&lt;/p>
&lt;h3 id="716-处理不可中断的阻塞">7.1.6 处理不可中断的阻塞&lt;/h3>
&lt;p>线程阻塞的原因&lt;/p>
&lt;ul>
&lt;li>Java.io包中的同步Socket I/O。&lt;/li>
&lt;li>Java.io包中的同步I/O&lt;/li>
&lt;li>Selector的异步I/O&lt;/li>
&lt;li>获取某个锁&lt;/li>
&lt;/ul>
&lt;h3 id="717-采用newtaskfor来封装非标准的取消">7.1.7 采用newTaskFor来封装非标准的取消&lt;/h3>
&lt;h2 id="72-停止基于线程的服务">7.2 停止基于线程的服务&lt;/h2>
&lt;p>对于持有线程的服务，只要服务的存在时间大于创建线程的方法的存在时间，那么就应该提供生命周期方法&lt;/p>
&lt;h3 id="722-关闭executorservice">7.2.2 关闭ExecutorService&lt;/h3>
&lt;h3 id="723-毒丸对象">7.2.3 毒丸对象&lt;/h3>
&lt;p>毒丸是指一个放在队列上的对象，其含义是：当得到这个对象时，立即停止&lt;/p>
&lt;h3 id="725-shutdownnow的局限性">7.2.5 shutdownNow的局限性&lt;/h3>
&lt;p>使用TrackingExecutorService来保存未完成的任务以备后续执行&lt;/p>
&lt;h2 id="73-处理非正常的线程终止">7.3 处理非正常的线程终止&lt;/h2>
&lt;h2 id="74-jvm关闭">7.4 JVM关闭&lt;/h2>
&lt;h3 id="741-关闭钩子">7.4.1 关闭钩子&lt;/h3>
&lt;blockquote>
&lt;p>通过Runtime.addShutdownHook注册的但尚未开始的线程&lt;/p>
&lt;/blockquote>
&lt;h3 id="742-守护线程">7.4.2 守护线程&lt;/h3>
&lt;p>创建一个线程来执行一些辅助工作，但又不希望这个线程阻碍JVM的关闭&lt;/p>
&lt;h3 id="743-终结器">7.4.3 终结器&lt;/h3></description></item><item><title>第6章　任务执行</title><link>https://yzlc.github.io/post/read/concurrency/6/</link><pubDate>Thu, 18 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/6/</guid><description>&lt;h2 id="61-在线程中执行任务">6.1 在线程中执行任务&lt;/h2>
&lt;h2 id="611-串行地执行任务">6.1.1 串行地执行任务&lt;/h2>
&lt;h2 id="612-显式地为任务创建线程">6.1.2 显式地为任务创建线程&lt;/h2>
&lt;h2 id="613-无限制创建线程的不足">6.1.3 无限制创建线程的不足&lt;/h2>
&lt;ul>
&lt;li>线程生命周期的开销非常高&lt;/li>
&lt;li>资源消耗&lt;/li>
&lt;li>稳定性&lt;/li>
&lt;/ul>
&lt;h2 id="62-executor框架">6.2 Executor框架&lt;/h2>
&lt;blockquote>
&lt;p>基于生产者 - 消费者模式&lt;/p>
&lt;/blockquote>
&lt;h3 id="622-执行策略">6.2.2 执行策略&lt;/h3>
&lt;h3 id="623-线程池">6.2.3 线程池&lt;/h3>
&lt;p>通过调用Executors静态工厂方法创建线程池：&lt;/p>
&lt;ul>
&lt;li>newFixedThreadPool。固定长度的线程池，每提交任务时创建，直到最大数量&lt;/li>
&lt;li>newCachedThreadPool。可缓存线程池，线程池规模超过需求时回收，需求增加时添加线程，线程池规模无限制&lt;/li>
&lt;li>newSingleThreadExecutor。单线程。确保任务在队列中顺序串行执行&lt;/li>
&lt;li>newScheduledThreadPool。固定长度线程池，延迟或定时方式执行&lt;/li>
&lt;/ul>
&lt;h3 id="624-executor的生命周期">6.2.4 Executor的生命周期&lt;/h3>
&lt;h3 id="625-延迟任务与周期任务">6.2.5 延迟任务与周期任务&lt;/h3>
&lt;h2 id="63-找出可利用的并行性">6.3 找出可利用的并行性&lt;/h2>
&lt;h3 id="632-携带结果的任务callable与future">6.3.2 携带结果的任务Callable与Future&lt;/h3>
&lt;ul>
&lt;li>Callable：抽象的计算任务&lt;/li>
&lt;li>Future：任务的生命周期，提供方法判断是否完成或取消，获取任务的结果和取消任务等&lt;/li>
&lt;/ul>
&lt;h3 id="634-在异构任务并行化中存在的局限">6.3.4 在异构任务并行化中存在的局限&lt;/h3>
&lt;h3 id="635-completionserviceexecutor与blockingqueue">6.3.5 CompletionService：Executor与BlockingQueue&lt;/h3>
&lt;blockquote>
&lt;p>将Callable任务提交给它执行，使用类似队列操作的take和poll等方法获得已完成的结果&lt;/p>
&lt;/blockquote>
&lt;h3 id="637-为任务设置时限">6.3.7 为任务设置时限&lt;/h3></description></item><item><title>第4章　对象的组合</title><link>https://yzlc.github.io/post/read/concurrency/4/</link><pubDate>Tue, 16 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/4/</guid><description>&lt;h2 id="41设计线程安全的类">4.1　设计线程安全的类&lt;/h2>
&lt;p>在设计线程安全类的过程中，需要包含以下三个基本要素：&lt;/p>
&lt;ul>
&lt;li>找出构成对象状态的所有变量。&lt;/li>
&lt;li>找出约束状态变量的不变性条件。&lt;/li>
&lt;li>建立对象状态的并发访问管理策略。&lt;/li>
&lt;/ul>
&lt;h3 id="411收集同步需求">4.1.1　收集同步需求&lt;/h3>
&lt;h3 id="412依赖状态的操作">4.1.2　依赖状态的操作&lt;/h3>
&lt;blockquote>
&lt;p>在某个操作中包含有基于状态的先验条件&lt;/p>
&lt;/blockquote>
&lt;h3 id="413状态的所有权">4.1.3　状态的所有权&lt;/h3>
&lt;h2 id="42实例封闭">4.2　实例封闭&lt;/h2>
&lt;h3 id="421java监视器模式">4.2.1　Java监视器模式&lt;/h3>
&lt;blockquote>
&lt;p>把对象的所有可变状态都封装起来，并由对象自己的内置锁来保护&lt;/p>
&lt;/blockquote>
&lt;h2 id="43线程安全性的委托">4.3　线程安全性的委托&lt;/h2>
&lt;h3 id="432独立的状态变量">4.3.2　独立的状态变量&lt;/h3>
&lt;h3 id="433当委托失效时">4.3.3　当委托失效时&lt;/h3>
&lt;h3 id="434发布底层的状态变量">4.3.4　发布底层的状态变量&lt;/h3>
&lt;h2 id="44在现有的线程安全类中添加功能">4.4　在现有的线程安全类中添加功能&lt;/h2>
&lt;h3 id="441客户端加锁机制">4.4.1　客户端加锁机制&lt;/h3>
&lt;h3 id="442组合">4.4.2　组合&lt;/h3></description></item><item><title>第5章　基础构建模块</title><link>https://yzlc.github.io/post/read/concurrency/5/</link><pubDate>Tue, 16 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/5/</guid><description>&lt;h2 id="51同步容器类">5.1　同步容器类&lt;/h2>
&lt;h3 id="511同步容器类的问题">5.1.1　同步容器类的问题&lt;/h3>
&lt;h3 id="512迭代器与concurrentmodificationexception">5.1.2　迭代器与ConcurrentModificationException&lt;/h3>
&lt;h3 id="513隐藏迭代器">5.1.3　隐藏迭代器&lt;/h3>
&lt;h2 id="52并发容器">5.2　并发容器&lt;/h2>
&lt;h3 id="521concurrenthashmap">5.2.1　ConcurrentHashMap&lt;/h3>
&lt;blockquote>
&lt;p>只有当应用程序需要加锁Map以进行独占访问时，才应该放弃使用ConcurrentHashMap&lt;/p>
&lt;/blockquote>
&lt;h3 id="522额外的原子map操作">5.2.2　额外的原子Map操作&lt;/h3>
&lt;h3 id="523copyonwritearraylist">5.2.3　CopyOnWriteArrayList&lt;/h3>
&lt;blockquote>
&lt;p>仅当迭代操作远远多于修改操作时，才应该使用“写入时复制”容器&lt;/p>
&lt;/blockquote>
&lt;h2 id="53阻塞队列和生产者-消费者模式">5.3　阻塞队列和生产者-消费者模式&lt;/h2>
&lt;p>BlockingQueue&lt;/p>
&lt;ul>
&lt;li>LinkedBlockingQueue和ArrayBlocking-Queue是FIFO队列，二者分别与LinkedList和ArrayList类似，但比同步List拥有更好的并发性能&lt;/li>
&lt;li>PriorityBlockingQueue是一个按优先级排序的队列，当你希望按照某种顺序而不是FIFO来处理元素时，这个队列将非常有用&lt;/li>
&lt;li>SynchronousQueue实际上不是一个真正的队列，因为它不会为队列中元素维护存储空间。与其他队列不同的是，它维护一组线程，这些线程在等待着把元素加入或移出队列。仅当有足够多的消费者，并且总是有一个消费者准备好获取交付的工作时，才适合使用同步队列&lt;/li>
&lt;/ul>
&lt;h3 id="532串行线程封闭">5.3.2　串行线程封闭&lt;/h3>
&lt;blockquote>
&lt;p>线程封闭对象只能由单个线程拥有，但可以通过安全地发布该对象来转移所有权。阻塞队列、ConcurrentMap#remove、AtomicReference#compareAndSet&lt;/p>
&lt;/blockquote>
&lt;h3 id="533-双端队列与工作密取work-stealing">5.3.3 双端队列与工作密取（Work Stealing）&lt;/h3>
&lt;p>Deque：队头队尾插入移除&lt;/p>
&lt;ul>
&lt;li>ArrayDeque&lt;/li>
&lt;li>BlockingDeque
&lt;ul>
&lt;li>LinkedBlockingDeque&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>工作密取：每个消费者都有各自的双端队列，如果它完成了自己双端队列中的全部工作，那么它可以从其他消费者双端队列末尾秘密地获取工作。适用于既是消费者也是生产者问题&lt;/p>
&lt;h2 id="54-阻塞方法与中断方法">5.4 阻塞方法与中断方法&lt;/h2>
&lt;h2 id="55-同步工具类">5.5 同步工具类&lt;/h2>
&lt;h3 id="551-闭锁">5.5.1 闭锁&lt;/h3>
&lt;blockquote>
&lt;p>延迟进程的进度直到其到达终止状态。用来确保某些活动直到其他活动都完成后才继续执行&lt;/p>
&lt;/blockquote>
&lt;p>CountDownLatch(int count)&lt;/p>
&lt;ul>
&lt;li>count：计数器，需要等待的事件数&lt;/li>
&lt;li>countDown：递减计数器，表示有一个事件已经发生&lt;/li>
&lt;li>await：等待计数器达到零，表示所有事件都已经发生&lt;/li>
&lt;/ul>
&lt;h3 id="552-funturetask">5.5.2 FuntureTask&lt;/h3>
&lt;blockquote>
&lt;p>也可以用做闭锁。通过Callable实现，相当于可生成结果的Runnable，可处于等待运行、正在运行、运行完成状态&lt;/p>
&lt;/blockquote>
&lt;h3 id="553-信号量">5.5.3 信号量&lt;/h3>
&lt;blockquote>
&lt;p>计数信号量（Counting Semaphore）用来控制同时访问某个特定资源的操作数量，或者同时执行某个指定操作的数量。可用来实现资源池或对容器施加边界
Semaphore(int permits)&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>permits：许可，执行操作时先获得许可，使用后释放许可&lt;/li>
&lt;li>acquire：阻塞直到有许可&lt;/li>
&lt;li>release：返回一个许可给信号量&lt;/li>
&lt;/ul>
&lt;h3 id="554-栅栏">5.5.4 栅栏&lt;/h3>
&lt;blockquote>
&lt;p>阻塞一组线程直到某个事件发生&lt;/p>
&lt;/blockquote>
&lt;p>区别：闭锁等待事件，栅栏等待其他线程&lt;/p>
&lt;p>CyclicBarrier：并行迭代算法、模拟程序&lt;/p>
&lt;p>Exchanger：两方栅栏，各方在栅栏位置交换数据。两方执行不对称操作（缓冲区写、读数据）&lt;/p>
&lt;h2 id="56-构建高效且可伸缩的结果缓存">5.6 构建高效且可伸缩的结果缓存&lt;/h2></description></item><item><title>第2章　线程安全性</title><link>https://yzlc.github.io/post/read/concurrency/2/</link><pubDate>Mon, 15 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/2/</guid><description>&lt;h2 id="21什么是线程安全性">2.1　什么是线程安全性&lt;/h2>
&lt;blockquote>
&lt;p>当多个线程访问某个类时，这个类始终都能表现出正确的行为&lt;/p>
&lt;/blockquote>
&lt;h2 id="22原子性">2.2　原子性&lt;/h2>
&lt;h3 id="221竞态条件race-condition">2.2.1　竞态条件（Race Condition）&lt;/h3>
&lt;blockquote>
&lt;p>由于不恰当的执行时序而出现不正确的结果&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>最常见的竞态条件类型就是“先检查后执行（Check-Then-Act）”操作，即通过一个可能失效的观测结果来决定下一步的动作&lt;/li>
&lt;/ul>
&lt;h3 id="复合操作">复合操作&lt;/h3>
&lt;blockquote>
&lt;p>包含了一组必须以原子方式执行的操作以确保线程安全性&lt;/p>
&lt;/blockquote>
&lt;h2 id="23加锁机制">2.3　加锁机制&lt;/h2>
&lt;h3 id="231内置锁">2.3.1　内置锁&lt;/h3>
&lt;blockquote>
&lt;p>同步代码块（Synchronized Block）。包括两部分：一个作为锁的对象引用，一个作为由这个锁保护的代码块。以关键字synchronized来修饰的方法就是一种横跨整个方法体的同步代码块，其中该同步代码块的锁就是方法调用所在的对象。静态的synchronized方法以Class对象作为锁。&lt;/p>
&lt;/blockquote>
&lt;h3 id="232重入">2.3.2　重入&lt;/h3>
&lt;blockquote>
&lt;p>如果某个线程试图获得一个已经由它自己持有的锁，那么这个请求就会成功&lt;/p>
&lt;/blockquote></description></item><item><title>第3章　对象的共享</title><link>https://yzlc.github.io/post/read/concurrency/3/</link><pubDate>Mon, 15 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/concurrency/3/</guid><description>&lt;h2 id="31可见性">3.1　可见性&lt;/h2>
&lt;h3 id="311失效数据">3.1.1　失效数据&lt;/h3>
&lt;h3 id="312非原子的64位操作">3.1.2　非原子的64位操作&lt;/h3>
&lt;h3 id="313加锁与可见性">3.1.3　加锁与可见性&lt;/h3>
&lt;h3 id="314volatile变量">3.1.4　Volatile变量&lt;/h3>
&lt;p>当且仅当满足以下所有条件时使用：&lt;/p>
&lt;ul>
&lt;li>对变量的写入操作不依赖变量的当前值，或者你能确保只有单个线程更新变量的值&lt;/li>
&lt;li>该变量不会与其他状态变量一起纳入不变性条件中&lt;/li>
&lt;li>在访问变量时不需要加锁&lt;/li>
&lt;/ul>
&lt;h2 id="32发布与逸出">3.2　发布与逸出&lt;/h2>
&lt;blockquote>
&lt;p>发布（Publish）：使对象能够在当前作用域之外的代码中使用。当某个不应该发布的对象被发布时，这种情况就被称为逸出（Escape）&lt;/p>
&lt;/blockquote>
&lt;h2 id="33线程封闭thread-confinement">3.3　线程封闭（Thread Confinement）&lt;/h2>
&lt;blockquote>
&lt;p>仅在单线程内访问数据&lt;/p>
&lt;/blockquote>
&lt;h3 id="331ad-hoc线程封闭">3.3.1　Ad-hoc线程封闭&lt;/h3>
&lt;blockquote>
&lt;p>维护线程封闭性的职责完全由程序实现来承担&lt;/p>
&lt;/blockquote>
&lt;h3 id="332栈封闭">3.3.2　栈封闭&lt;/h3>
&lt;blockquote>
&lt;p>只能通过局部变量才能访问对象&lt;/p>
&lt;/blockquote>
&lt;h3 id="333threadlocal类">3.3.3　ThreadLocal类&lt;/h3>
&lt;blockquote>
&lt;p>使线程中的某个值与保存值的对象关联起来&lt;/p>
&lt;/blockquote>
&lt;h2 id="34不变性">3.4　不变性&lt;/h2>
&lt;p>当满足以下条件时，对象才是不可变的：&lt;/p>
&lt;ul>
&lt;li>对象创建以后其状态就不能修改&lt;/li>
&lt;li>对象的所有域都是final类型&lt;/li>
&lt;li>对象是正确创建的（在对象的创建期间，this引用没有逸出）&lt;/li>
&lt;/ul>
&lt;h3 id="341final域">3.4.1　Final域&lt;/h3>
&lt;h2 id="35安全发布">3.5　安全发布&lt;/h2>
&lt;h3 id="351不正确的发布正确的对象被破坏">3.5.1　不正确的发布：正确的对象被破坏&lt;/h3>
&lt;blockquote>
&lt;p>不能指望一个尚未被完全创建的对象拥有完整性&lt;/p>
&lt;/blockquote>
&lt;h3 id="352不可变对象与初始化安全性">3.5.2　不可变对象与初始化安全性&lt;/h3>
&lt;blockquote>
&lt;p>状态不可修改，所有域都是final类型，以及正确的构造过程&lt;/p>
&lt;/blockquote>
&lt;h3 id="353安全发布的常用模式">3.5.3　安全发布的常用模式&lt;/h3>
&lt;p>一个正确构造的对象可以通过以下方式来安全地发布：&lt;/p>
&lt;ul>
&lt;li>在静态初始化函数中初始化一个对象引用&lt;/li>
&lt;li>将对象的引用保存到volatile类型的域或者AtomicReferance对象中&lt;/li>
&lt;li>将对象的引用保存到某个正确构造对象的final类型域中&lt;/li>
&lt;li>将对象的引用保存到一个由锁保护的域中&lt;/li>
&lt;/ul>
&lt;p>线程安全库中的容器类提供了以下的安全发布保证：&lt;/p>
&lt;ul>
&lt;li>通过将一个键或者值放入Hashtable、synchronizedMap或者ConcurrentMap中，可以安全地将它发布给任何从这些容器中访问它的线程（无论是直接访问还是通过迭代器访问）&lt;/li>
&lt;li>通过将某个元素放入Vector、CopyOnWriteArrayList、CopyOnWriteArraySet、synchronizedList或synchronizedSet中，可以将该元素安全地发布到任何从这些容器中访问该元素的线程&lt;/li>
&lt;li>通过将某个元素放入BlockingQueue或者ConcurrentLinkedQueue中，可以将该元素安全地发布到任何从这些队列中访问该元素的线程&lt;/li>
&lt;/ul>
&lt;h3 id="354事实不可变对象effectively-immutable-object">3.5.4　事实不可变对象（Effectively Immutable Object）&lt;/h3>
&lt;blockquote>
&lt;p>对象从技术上来看是可变的，但其状态在发布后不会再改变&lt;/p>
&lt;/blockquote>
&lt;h3 id="355可变对象">3.5.5　可变对象&lt;/h3>
&lt;p>对象的发布需求取决于它的可变性：&lt;/p>
&lt;ul>
&lt;li>不可变对象可以通过任意机制来发布&lt;/li>
&lt;li>事实不可变对象必须通过安全方式来发布&lt;/li>
&lt;li>可变对象必须通过安全方式来发布，并且必须是线程安全的或者由某个锁保护起来&lt;/li>
&lt;/ul>
&lt;h3 id="356安全地共享对象">3.5.6　安全地共享对象&lt;/h3>
&lt;p>在并发程序中使用和共享对象时，可以使用一些实用的策略，包括：&lt;/p>
&lt;ul>
&lt;li>线程封闭。线程封闭的对象只能由一个线程拥有，对象被封闭在该线程中，并且只能由这个线程修改&lt;/li>
&lt;li>只读共享。在没有额外同步的情况下，共享的只读对象可以由多个线程并发访问，但任何线程都不能修改它。共享的只读对象包括不可变对象和事实不可变对象&lt;/li>
&lt;li>线程安全共享。线程安全的对象在其内部实现同步，因此多个线程可以通过对象的公有接口来进行访问而不需要进一步的同步&lt;/li>
&lt;li>保护对象。被保护的对象只能通过持有特定的锁来访问。保护对象包括封装在其他线程安全对象中的对象，以及已发布的并且由某个特定锁保护的对象&lt;/li>
&lt;/ul></description></item><item><title>第12章　Java内存模型与线程</title><link>https://yzlc.github.io/post/read/jvm/12/</link><pubDate>Wed, 03 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/12/</guid><description>&lt;h2 id="121概述">12.1　概述&lt;/h2>
&lt;p>每秒事务处理数（Transactions Per Second，TPS）&lt;/p>
&lt;h2 id="123java内存模型">12.3　Java内存模型&lt;/h2>
&lt;blockquote>
&lt;p>定义程序中各种变量的访问规则，即关注在虚拟机中把变量值存储到内存和从内存中取出变量值这样的底层细节&lt;/p>
&lt;/blockquote>
&lt;p>变量（Variables）包括实例字段、静态字段和构成数组对象的元素，但是不包括局部变量与方法参数(线程私有)&lt;/p>
&lt;h3 id="1231主内存与工作内存">12.3.1　主内存与工作内存&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/12-2.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="1232内存间交互操作">12.3.2　内存间交互操作&lt;/h3>
&lt;p>操作&lt;/p>
&lt;ul>
&lt;li>lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态&lt;/li>
&lt;li>unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定&lt;/li>
&lt;li>read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用&lt;/li>
&lt;li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中&lt;/li>
&lt;li>use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作&lt;/li>
&lt;li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作&lt;/li>
&lt;li>store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用&lt;/li>
&lt;li>write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中&lt;/li>
&lt;/ul>
&lt;p>规定&lt;/p>
&lt;ul>
&lt;li>不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者工作内存发起回写了但主内存不接受的情况出现&lt;/li>
&lt;li>不允许一个线程丢弃它最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存&lt;/li>
&lt;li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中&lt;/li>
&lt;li>一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量，换句话说就是对一个变量实施use、store操作之前，必须先执行assign和load操作&lt;/li>
&lt;li>一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁&lt;/li>
&lt;li>如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作以初始化变量的值&lt;/li>
&lt;li>如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定的变量&lt;/li>
&lt;li>对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）&lt;/li>
&lt;/ul>
&lt;h3 id="1233对于volatile型变量的特殊规则">12.3.3　对于volatile型变量的特殊规则&lt;/h3>
&lt;blockquote>
&lt;p>可见性、禁止指令重排序优化。选择依据仅仅是volatile的语义能否满足使用场景的需求&lt;/p>
&lt;/blockquote>
&lt;p>可见性规则&lt;/p>
&lt;ul>
&lt;li>运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值&lt;/li>
&lt;li>变量不需要与其他的状态变量共同参与不变约束&lt;/li>
&lt;/ul>
&lt;h3 id="1234针对long和double型变量的特殊规则">12.3.4　针对long和double型变量的特殊规则&lt;/h3>
&lt;blockquote>
&lt;p>非原子性协定（Non-Atomic Treatment of double and long Variables）：虚拟机自行选择是否要保证64位数据类型的load、store、read和write操作的原子性。除非该数据有明确可知的线程竞争，否则不需要把long和double声明为volatile&lt;/p>
&lt;/blockquote>
&lt;h3 id="1235原子性可见性与有序性">12.3.5　原子性、可见性与有序性&lt;/h3>
&lt;ol>
&lt;li>原子性（Atomicity）：基本数据类型的访问、读写都是具备原子性的，synchronized块&lt;/li>
&lt;li>可见性（Visibility）：volatile、synchronized和final（被final修饰的字段在构造器中一旦被初始化完成，并且构造器没有把“this”的引用传递出去）&lt;/li>
&lt;li>有序性（Ordering）：volatile和synchronized&lt;/li>
&lt;/ol>
&lt;h3 id="1236先行发生原则happens-before">12.3.6　先行发生原则（Happens-Before）&lt;/h3>
&lt;p>程序次序规则（Program Order Rule）：在一个线程内，按照控制流顺序，书写在前面的操作先行发生于书写在后面的操作。注意，这里说的是控制流顺序而不是程序代码顺序，因为要考虑分支、循环等结构&lt;/p>
&lt;p>管程锁定规则（Monitor Lock Rule）：一个unlock操作先行发生于后面对同一个锁的lock操作。这里必须强调的是“同一个锁”，而“后面”是指时间上的先后&lt;/p>
&lt;p>volatile变量规则（Volatile Variable Rule）：对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的“后面”同样是指时间上的先后&lt;/p>
&lt;p>线程启动规则（Thread Start Rule）：Thread对象的start()方法先行发生于此线程的每一个动作&lt;/p>
&lt;p>线程终止规则（Thread Termination Rule）：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread::join()方法是否结束、Thread::isAlive()的返回值等手段检测线程是否已经终止执行&lt;/p>
&lt;p>线程中断规则（Thread Interruption Rule）：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread::interrupted()方法检测到是否有中断发生&lt;/p>
&lt;p>对象终结规则（Finalizer Rule）：一个对象的初始化完成（构造函数执行结束）先行发生于它的finalize()方法的开始&lt;/p>
&lt;p>传递性（Transitivity）：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论&lt;/p>
&lt;h3 id="124java与线程">12.4　Java与线程&lt;/h3>
&lt;h4 id="1241线程的实现">12.4.1　线程的实现&lt;/h4>
&lt;ol>
&lt;li>内核线程实现（Kernel-Level Thread，KLT）：1(轻量级进程)：1(内核线程)
&lt;ul>
&lt;li>内核线程：是直接由操作系统内核（Kernel，下称内核）支持的线程，内核通过操纵调度器（Scheduler）对线程进行调度，并负责将线程的任务映射到各个处理器上。&lt;/li>
&lt;li>轻量级进程（Light Weight Process，LWP）：程序一般不会直接使用内核线程，而是使用内核线程的一种高级接口——轻量级进程，轻量级进程就是我们通常意义上所讲的线程
&lt;ul>
&lt;li>系统调用的代价相对较高：基于内核线程实现的，所以各种线程操作，如创建、析构及同步，都需要进行系统调用,需要在用户态（User Mode）和内核态（Kernel Mode）中来回切换。&lt;/li>
&lt;li>系统支持轻量级进程的数量是有限的：轻量级进程都需要有一个内核线程的支持，因此轻量级进程要消耗一定的内核资源（如内核线程的栈空间）
&lt;img src="https://yzlc.github.io/images/read/jvm/12-3.jpg"
loading="lazy"
>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用户线程实现（User Thread，UT）：1（进程）：N（用户线程）
&lt;img src="https://yzlc.github.io/images/read/jvm/12-4.jpg"
loading="lazy"
>&lt;/li>
&lt;li>混合实现：N（内核线程）：M（用户线程）
&lt;img src="https://yzlc.github.io/images/read/jvm/12-5.jpg"
loading="lazy"
>&lt;/li>
&lt;li>Java线程的实现
1:1模型，线程模型只对线程的并发规模和操作成本产生影响，对Java程序的编码和运行过程来说，这些差异都是完全透明的&lt;/li>
&lt;/ol>
&lt;h4 id="1242java线程调度">12.4.2　Java线程调度&lt;/h4>
&lt;blockquote>
&lt;p>系统为线程分配处理器使用权的过程&lt;/p>
&lt;/blockquote>
&lt;p>调度方式&lt;/p>
&lt;ul>
&lt;li>协同式（Cooperative Threads-Scheduling）线程调度：执行时间由线程本身来控制，工作执行完之后，主动通知系统切换到另外一个线程上去
&lt;ul>
&lt;li>实现简单&lt;/li>
&lt;li>切换操作对线程自己是可知的，一般没有线程同步问题&lt;/li>
&lt;li>线程执行时间不可控制&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>抢占式（Preemptive Threads-Scheduling）线程调度：由系统来分配执行时间
&lt;ul>
&lt;li>线程的执行时间是系统可控&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="1243状态转换">12.4.3　状态转换&lt;/h4>
&lt;p>新建（New）：创建后尚未启动的线程处于这种状态&lt;br>
运行（Runnable）：包括操作系统线程状态中的Running和Ready，可能正在执行，也有可能正在等待着操作系统为它分配执行时间&lt;br>
无限期等待（Waiting）：不会被分配处理器执行时间，等待被其他线程显式唤醒&lt;/p>
&lt;ul>
&lt;li>没有设置Timeout参数的Object::wait()方法&lt;/li>
&lt;li>没有设置Timeout参数的Thread::join()方法&lt;/li>
&lt;li>LockSupport::park()方法&lt;/li>
&lt;/ul>
&lt;p>限期等待（Timed Waiting）：不会被分配处理器执行时间，在一定时间之后由系统自动唤醒&lt;/p>
&lt;ul>
&lt;li>Thread::sleep()方法&lt;/li>
&lt;li>设置了Timeout参数的Object::wait()方法&lt;/li>
&lt;li>设置了Timeout参数的Thread::join()方法&lt;/li>
&lt;li>LockSupport::parkNanos()方法&lt;/li>
&lt;li>LockSupport::parkUntil()方法&lt;/li>
&lt;/ul>
&lt;p>阻塞（Blocked）：线程被阻塞了，等待着获取到一个排它锁，这个事件将在另外一个线程放弃这个锁的时候发生&lt;br>
结束（Terminated）：已终止线程的线程状态，线程已经结束执行
&lt;img src="https://yzlc.github.io/images/read/jvm/12-6.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="125java与协程">12.5　Java与协程&lt;/h3>
&lt;h4 id="1251内核线程的局限">12.5.1　内核线程的局限&lt;/h4>
&lt;h4 id="1252协程的复苏">12.5.2　协程的复苏&lt;/h4>
&lt;p>协程（Coroutine）：用户线程设计成协同式调度（Cooperative Scheduling）&lt;/p>
&lt;ul>
&lt;li>有栈协程（Stackfull Coroutine）：完整地做调用栈的保护、恢复工作&lt;/li>
&lt;li>无栈协程（Stackless Coroutine）：各种语言中的await、async、yield这类关键字。本质上是一种有限状态机，状态保存在闭包里，比有栈协程恢复调用栈要轻量得多，但功能也相对更有限&lt;/li>
&lt;/ul>
&lt;p>特点：比传统内核线程要轻量，需要在应用层面实现的内容（调用栈、调度器）特别多&lt;/p>
&lt;h4 id="1253java的解决方案">12.5.3　Java的解决方案&lt;/h4></description></item><item><title>第13章　线程安全与锁优化</title><link>https://yzlc.github.io/post/read/jvm/13/</link><pubDate>Wed, 03 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/13/</guid><description>&lt;h2 id="132线程安全">13.2　线程安全&lt;/h2>
&lt;h3 id="1321java语言中的线程安全">13.2.1　Java语言中的线程安全&lt;/h3>
&lt;ol>
&lt;li>不可变
&lt;ul>
&lt;li>基本数据类型：在定义时使用final关键字修饰&lt;/li>
&lt;li>对象：需要保证其行为不会对其状态产生任何影响(String)，最简单的方法就是把对象里面带有状态的变量都声明为final&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>绝对线程安全&lt;br>
付出的时间和空间成本都非常大&lt;/li>
&lt;li>相对线程安全&lt;br>
大部分声称线程安全的类都属于这种类型&lt;/li>
&lt;li>线程兼容&lt;br>
对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用&lt;/li>
&lt;li>线程对立&lt;br>
线程对立是指不管调用端是否采取了同步措施，都无法在多线程环境中并发使用代码&lt;/li>
&lt;/ol>
&lt;h3 id="1322线程安全的实现方法">13.2.2　线程安全的实现方法&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>互斥同步（Mutual Exclusion &amp;amp; Synchronization）：最常见也是最主要的并发正确性保障手段,悲观的并发策略,也被称为阻塞同步（Blocking Synchronization）&lt;/p>
&lt;p>概念&lt;/p>
&lt;ul>
&lt;li>同步：在多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一条（或者是一些，当使用信号量的时候）线程使用&lt;/li>
&lt;li>互斥：实现同步的一种手段，临界区（Critical Section）、互斥量（Mutex）和信号量（Semaphore）都是常见的互斥实现方式&lt;/li>
&lt;/ul>
&lt;p>使用&lt;/p>
&lt;ul>
&lt;li>
&lt;p>synchronized（推荐）&lt;/p>
&lt;ul>
&lt;li>被synchronized修饰的同步块对同一条线程来说是可重入的&lt;/li>
&lt;li>被synchronized修饰的同步块在持有锁的线程执行完毕并释放锁之前，会无条件地阻塞后面其他线程的进入&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>重入锁（ReentrantLock）&lt;/p>
&lt;ul>
&lt;li>等待可中断：当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情&lt;/li>
&lt;li>公平锁：多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁&lt;/li>
&lt;li>锁绑定多个条件：一个ReentrantLock对象可以同时绑定多个Condition对象&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>区别&lt;/p>
&lt;ul>
&lt;li>synchronized是在Java语法层面的同步，清晰，简单&lt;/li>
&lt;li>Lock应该确保在finally块中释放锁，否则一旦受同步保护的代码块中抛出异常，则有可能永远不会释放持有的锁&lt;/li>
&lt;li>Java虚拟机更容易针对synchronized来进行优化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>非阻塞同步：共享数据冲突，再进行补偿措施，最常用的补偿措施是不断地重试，直到出现没有竞争的共享数据为止。这种乐观并发策略的实现不再需要把线程阻塞挂起，使用这种措施的代码也常被称为无锁（Lock-Free）编程&lt;/p>
&lt;p>处理器指令&lt;/p>
&lt;ul>
&lt;li>测试并设置（Test-and-Set）&lt;/li>
&lt;li>获取并增加（Fetch-and-Increment）&lt;/li>
&lt;li>交换（Swap）&lt;/li>
&lt;li>比较并交换（Compare-and-Swap，下文称CAS）&lt;/li>
&lt;li>加载链接/条件储存（Load-Linked/Store-Conditional，下文称LL/SC）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>无同步方案&lt;/p>
&lt;p>可重入代码（Reentrant Code）：这种代码又称纯代码（Pure Code），是指可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身），而在控制权返回后，原来的程序不会出现任何错误，也不会对结果有所影响
如果一个方法的返回结果是可以预测的，只要输入了相同的数据，就都能返回相同的结果，那它就满足可重入性的要求，当然也就是线程安全的&lt;/p>
&lt;p>线程本地存储（Thread Local Storage）：如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行。如果能保证，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题.ThreadLocal&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="133锁优化">13.3　锁优化&lt;/h2>
&lt;h3 id="1331自旋锁与自适应自旋">13.3.1　自旋锁与自适应自旋&lt;/h3>
&lt;blockquote>
&lt;p>自旋锁：为了让线程等待，我们只须让线程执行一个忙循环（自旋）
自适应：由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定的&lt;/p>
&lt;/blockquote>
&lt;h3 id="1332锁消除">13.3.2　锁消除&lt;/h3>
&lt;blockquote>
&lt;p>即时编译器在运行时，对一些代码要求同步，但是对被检测到不可能存在共享数据竞争的锁进行消除(逃逸分析)&lt;/p>
&lt;/blockquote>
&lt;h3 id="1333锁粗化">13.3.3　锁粗化&lt;/h3>
&lt;blockquote>
&lt;p>将同步块的作用范围限制得尽量小——只在共享数据的实际作用域中才进行同步&lt;/p>
&lt;/blockquote>
&lt;h3 id="1334轻量级锁">13.3.4　轻量级锁&lt;/h3>
&lt;p>不同状态下对象头的存储内容
&lt;img src="https://yzlc.github.io/images/read/jvm/13-1.jpg"
loading="lazy"
>&lt;/p>
&lt;p>工作过程&lt;/p>
&lt;ol>
&lt;li>在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝（这份拷贝加了Displaced前缀，即Displaced Mark Word）&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/13-3.jpg"
loading="lazy"
>&lt;/p>
&lt;ol start="2">
&lt;li>使用CAS操作尝试把对象的Mark Word更新为指向Lock Record的指针。Mark Word的锁标志位将转变为“00”&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/13-4.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="1335偏向锁">13.3.5　偏向锁&lt;/h3>
&lt;blockquote>
&lt;p>偏向于第一个获得它的线程，如果在接下来的执行过程中，该锁一直没有被其他的线程获取，则持有偏向锁的线程将永远不需
要再进行同步&lt;/p>
&lt;/blockquote>
&lt;p>状态转换关系
&lt;img src="https://yzlc.github.io/images/read/jvm/13-5.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>第11章　后端编译与优化</title><link>https://yzlc.github.io/post/read/jvm/11/</link><pubDate>Tue, 02 Jun 2020 11:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/11/</guid><description>&lt;h2 id="112即时编译器">11.2　即时编译器&lt;/h2>
&lt;blockquote>
&lt;p>Java程序最初都是通过解释器（Interpreter）进行解释执行的，当虚拟机发现某个方法或代码块的运行特别频繁，就会把这些代码认定为“热点代码”（Hot Spot Code），虚拟机将会把这些代码编译成本地机器码，并以各种手段尽可能地进行代码优化，运行时完成这个任务的后端编译器被称为即时编译器&lt;/p>
&lt;/blockquote>
&lt;h3 id="1121解释器与编译器">11.2.1　解释器与编译器&lt;/h3>
&lt;p>解释器&lt;/p>
&lt;ul>
&lt;li>省去编译的时间，立即运行&lt;/li>
&lt;li>节约内存&lt;/li>
&lt;li>作为编译器激进优化时后备的逃生门&lt;/li>
&lt;/ul>
&lt;p>编译器&lt;/p>
&lt;ul>
&lt;li>编译成本地代码，减少解释器的中间损耗，获得更高的执行效率&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/11-1.jpg"
loading="lazy"
>&lt;/p>
&lt;p>分层编译&lt;/p>
&lt;ul>
&lt;li>第0层。程序纯解释执行，不开启性能监控功能（Profiling）&lt;/li>
&lt;li>第1层。使用客户端编译器将字节码编译为本地代码来运行，进行简单可靠的稳定优化，不开启性能监控功能&lt;/li>
&lt;li>第2层。仍然使用客户端编译器执行，仅开启方法及回边次数统计等有限的性能监控功能&lt;/li>
&lt;li>第3层。仍然使用客户端编译器执行，开启全部性能监控，除了第2层的统计信息外，还会收集如分支跳转、虚方法调用版本等全部的统计信息&lt;/li>
&lt;li>第4层。使用服务端编译器将字节码编译为本地代码，相比起客户端编译器，服务端编译器会启用更多编译耗时更长的优化，还会根据性能监控信息进行一些不可靠的激进优化&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/11-2.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="1122编译对象与触发条件">11.2.2　编译对象与触发条件&lt;/h3>
&lt;p>热点代码（编译对象都是方法）&lt;/p>
&lt;ul>
&lt;li>被多次调用的方法&lt;/li>
&lt;li>被多次执行的循环体
&lt;ul>
&lt;li>栈上替换（On Stack Replacement，OSR）： 编译时传入执行入口点字节码序号（Byte Code Index，BCI）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>热点探测&lt;/p>
&lt;ul>
&lt;li>基于采样的热点探测（Sample Based Hot Spot Code Detection）。周期性地检查各个线程的调用栈顶，如果发现某个（或某些）方法经常出现在栈顶，那这个方法就是“热点方法”
&lt;ul>
&lt;li>实现简单高效，还可以很容易地获取方法调用关系&lt;/li>
&lt;li>很难精确地确认一个方法的热度，容易受到线程阻塞或别的外界因素的影响&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>基于计数器的热点探测（Counter Based Hot Spot Code Detection）。为每个方法（甚至是代码块）建立计数器，统计方法的执行次数，如果执行次数超过一定的阈值就认为它是“热点方法”
&lt;ul>
&lt;li>实现起来要麻烦一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系&lt;/li>
&lt;li>统计结果相对来说更加精确严谨&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>计数器&lt;/p>
&lt;ul>
&lt;li>方法调用计数器（Invocation Counter）： 统计方法被调用的次数
&lt;ul>
&lt;li>热度的衰减（Counter Decay）： 当超过一定的时间限度，如果方法的调用次数仍然不足以让它提交给即时编译器编译，那该方法的调用计数器就会被减少一半，这段时间就称为此方法统计的半衰周期（Counter Half Life Time）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>回边计数器（Back Edge Counter，“回边”的意思就是指在循环边界往回跳转）&lt;/li>
&lt;/ul>
&lt;h3 id="1123编译过程">11.2.3　编译过程&lt;/h3>
&lt;p>高级中间代码表示（High-Level Intermediate Representation，HIR，即与目标机器指令集无关的中间表示）。&lt;/p>
&lt;p>静态单分配（Static Single Assignment，SSA）&lt;/p>
&lt;p>低级中间代码表示（Low-Level IntermediateRepresentation，LIR，即与目标机器指令集相关的中间表示）&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/11-5.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="113提前编译器">11.3　提前编译器&lt;/h3>
&lt;h4 id="1131提前编译的优劣得失">11.3.1　提前编译的优劣得失&lt;/h4>
&lt;h3 id="114编译器优化技术">11.4　编译器优化技术&lt;/h3>
&lt;h4 id="1142方法内联">11.4.2　方法内联&lt;/h4>
&lt;blockquote>
&lt;p>把目标方法的代码原封不动地“复制”到发起调用的方法之中，避免发生真实的方法调用&lt;/p>
&lt;/blockquote>
&lt;p>虚方法内联问题&lt;/p>
&lt;ul>
&lt;li>类型继承关系分析（Class HierarchyAnalysis，CHA）: 这是整个应用程序范围内的类型分析技术，用于确定在目前已加载的类中，某个接口是否有多于一种的实现、某个类是否存在子类、某个子类是否覆盖了父类的某个虚方法等信息
&lt;ul>
&lt;li>守护内联（Guarded Inlining）: 查询到只有一个版本&lt;/li>
&lt;li>内联缓存（Inline Cache）: 查询到多个版本，建立在目标方法正常入口之前的缓存,记录下方法接收者的版本信息
&lt;ul>
&lt;li>单态内联缓存（Monomorphic Inline Cache）： 每次调用的方法接收者版本都是一样的&lt;/li>
&lt;li>超多态内联缓存（Megamorphic Inline Cache）： 方法接收者不一致&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="1143逃逸分析escape-analysis">11.4.3　逃逸分析（Escape Analysis）&lt;/h4>
&lt;p>基本原理&lt;/p>
&lt;ul>
&lt;li>方法逃逸： 当一个对象在方法里面被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他方法中&lt;/li>
&lt;li>线程逃逸： 被外部线程访问，譬如赋值给可以在其他线程中访问的实例变量&lt;/li>
&lt;/ul>
&lt;p>优化&lt;/p>
&lt;ul>
&lt;li>栈上分配（Stack Allocations）：如果确定一个对象不会逃逸出线程之外，那让这个对象在栈上分配内存将会是一个很不错的主意，对象所占用的内存
空间就可以随栈帧出栈而销毁。支持方法逃逸，不支持线程逃逸&lt;/li>
&lt;li>标量替换（Scalar Replacement）：把一个Java对象拆散，根据程序访问的情况，将其用到的成员变量恢复为原始类型来访问。它不允许对象逃逸出方法范围内。
&lt;ul>
&lt;li>标量: 一个数据已经无法再分解成更小的数据来表示了（int、long等数值类型及reference类型等）&lt;/li>
&lt;li>聚合量（Aggregate）: 一个数据可以继续分解(对象)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>同步消除（Synchronization Elimination）：如果确定一个变量不会逃逸出线程，无法被其他线程访问，对这个变量实施的同步措施也就可以安全地消除掉。&lt;/li>
&lt;/ul>
&lt;h4 id="1144公共子表达式消除">11.4.4　公共子表达式消除&lt;/h4>
&lt;blockquote>
&lt;p>如果一个表达式E之前已经被计算过了，并且从先前的计算到现在E中所有变量的值都没有发生变化&lt;/p>
&lt;/blockquote>
&lt;p>局部公共子表达式消除（Local Common Subexpression Elimination）: 优化仅限于程序基本块内&lt;br>
全局公共子表达式消除（Global Common Subexpression Elimination）: 优化的范围涵盖了多个基本块&lt;/p>
&lt;h4 id="1145数组边界检查消除array-bounds-checking-elimination">11.4.5　数组边界检查消除（Array Bounds Checking Elimination）&lt;/h4></description></item><item><title>第10章　前端编译与优化</title><link>https://yzlc.github.io/post/read/jvm/10/</link><pubDate>Tue, 02 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/10/</guid><description>&lt;h2 id="102javac编译器">10.2　Javac编译器&lt;/h2>
&lt;h3 id="1021javac的源码与调试">10.2.1　Javac的源码与调试&lt;/h3>
&lt;p>&lt;a class="link" href="http://hg.openjdk.java.net/jdk8/jdk8/langtools/file/1ff9d5118aae/src/share/classes/com/sun" target="_blank" rel="noopener"
>下载&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/10-4.jpg"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/10-5.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="1022解析与填充符号表">10.2.2　解析与填充符号表&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>词法、语法分析&lt;/p>
&lt;ul>
&lt;li>词法分析: 将源代码的字符流转变为标记（Token）集合的过程，单个字符是程序编写时的最小元素，但标记才是编译时的最小元素。关键字、变量名、字面量、运算符都可以作为标记，如“inta=b+2”标记是int、a、=、b、+、2。由com.sun.tools.javac.parser.Scanner类来实现。&lt;/li>
&lt;li>语法分析: 根据标记序列构造抽象语法树的过程，抽象语法树（Abstract Syntax Tree，AST）是一种用来描述程序代码语法结构的树形表示方式，抽象语法树的每一个节点都代表着程序代码中的一个语法结构（Syntax Construct），例如包、类型、修饰符、运算符、接口、返回值甚至连代码注释等都可以是一种特定的语法结构。由com.sun.tools.javac.parser.Parser类实现&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>填充符号表&lt;br>
符号表（Symbol Table）是由一组符号地址和符号信息构成的数据结构。符号表中所登记的信息在编译的不同阶段都要被用到。譬如在语义分析的过程中，符号表所登记的内容将用于语义检查和产生中间代码，在目标代码生成阶段，当对符号名进行地址分配时，符号表是地址分配的直接依据。由com.sun.tools.javac.comp.Enter类实现，该过程的产出物是一个待处理列表，其中包含了每一个编译单元的抽象语法树的顶级节点，以及package-info.java的顶级节点&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="1023注解处理器">10.2.3　注解处理器&lt;/h3>
&lt;h3 id="1024语义分析与字节码生成">10.2.4　语义分析与字节码生成&lt;/h3>
&lt;blockquote>
&lt;p>语义分析的任务是对源程序进行上下文检查，譬如类型检查、控制流检查、数据流检查等&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>标注检查&lt;br>
检查变量使用前是否已被声明、变量与赋值之间的数据类型是否能够匹配等,还会顺便进行一个称为常量折叠（Constant Folding）的代码优化(例如int a = 1 + 2;优化为3).实现类是com.sun.tools.javac.comp.Attr类和com.sun.tools.javac.comp.Check类&lt;/li>
&lt;li>数据及控制流分析&lt;br>
对程序上下文逻辑更进一步的验证，检查程序局部变量在使用前是否有赋值、方法的每条路径是否都有返回值、是否所有的受查异常都被正确处理了等.编译时期与类加载时校验范围有所区别，有一些校验项只有在编译期或运行期才能进行(例如final语义校验).由com.sun.tools.javac.comp.Flow类来完成&lt;/li>
&lt;li>解语法糖&lt;br>
由desugar()方法触发，在com.sun.tools.javac.comp.TransTypes类和com.sun.tools.javac.comp.Lower类中完成&lt;/li>
&lt;li>字节码生成&lt;br>
由com.sun.tools.javac.jvm.Gen类来完成。不仅是把前面各个步骤所生成的信息（语法树、符号表）转化成字节码指令
写到磁盘中，还进行了少量的代码添加和转换工作&lt;/li>
&lt;/ol>
&lt;h2 id="103java语法糖的味道">10.3　Java语法糖的味道&lt;/h2>
&lt;h3 id="1031泛型">10.3.1　泛型&lt;/h3>
&lt;h3 id="1032自动装箱拆箱与遍历循环">10.3.2　自动装箱、拆箱与遍历循环&lt;/h3>
&lt;h3 id="1033条件编译">10.3.3　条件编译&lt;/h3></description></item><item><title>第8章　虚拟机字节码执行引擎</title><link>https://yzlc.github.io/post/read/jvm/8/</link><pubDate>Mon, 01 Jun 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/8/</guid><description>&lt;h2 id="82运行时栈帧结构">8.2　运行时栈帧结构&lt;/h2>
&lt;p>Java虚拟机以方法作为最基本的执行单元&lt;/p>
&lt;p>栈帧（Stack Frame）:虚拟机进行方法调用和方法执行背后的数据结构，也是虚拟机运行时数据区中的虚拟机栈（Virtual Machine Stack）的栈元素。栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。每一个方法从调用开始至执行结束的过程，都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程&lt;/p>
&lt;p>一个栈帧需要分配多少内存，并不会受到程序运行期变量数据的影响，而仅仅取决于程序源码和具体的虚拟机实现的栈内存布局形式&lt;/p>
&lt;p>当前栈帧（Current Stack Frame）:只有位于栈顶的方法才是在运行的，与这个栈帧所关联的方法被称为“当前方法”（Current Method）。执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/8-1.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="821局部变量表local-variables-table">8.2.1　局部变量表（Local Variables Table）&lt;/h3>
&lt;blockquote>
&lt;p>存放方法参数和方法内部定义的局部变量,Code属性的max_locals数据项中确定了该方法所需分配的局部变量表的最大容量&lt;/p>
&lt;/blockquote>
&lt;h3 id="822操作数栈operand-stack">8.2.2　操作数栈（Operand Stack）&lt;/h3>
&lt;blockquote>
&lt;p>后入先出（Last In First Out，LIFO）栈。同局部变量表一样，操作数栈的最大深度也在编译的时候被写入到Code属性的max_stacks数据项之中。32位数据类型所占的栈容量为1，64位所占的栈容量为2。Javac编译器的数据流分析工作保证操作数栈的深度不会超过max_stacks最大值&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/8-2.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="823动态连接dynamic-linking">8.2.3　动态连接（Dynamic Linking）&lt;/h3>
&lt;blockquote>
&lt;p>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。Class文件的常量池中存有大量的符号引用，字节码中的方法调用指令就以常量池里指向方法的符号引用作为参数。这些符号引用一部分会在类加载阶段或者第一次使用的时候就被转化为直接引用，这种转化被称为静态解析。另外一部分将在每一次运行期间都转化为直接引用，这部分就称为动态连接&lt;/p>
&lt;/blockquote>
&lt;h3 id="824方法返回地址">8.2.4　方法返回地址&lt;/h3>
&lt;blockquote>
&lt;p>方法正常退出时，主调方法的PC计数器的值就可以作为返回地址，栈帧中很可能会保存这个计数器值。而方法异常退出时，返回地址是要通过异常处理器表来确定的，栈帧中就一般不会保存这部分信息。方法退出的过程实际上等同于把当前栈帧出栈，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，把返回值压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令等&lt;/p>
&lt;/blockquote>
&lt;h3 id="825附加信息">8.2.5　附加信息&lt;/h3>
&lt;blockquote>
&lt;p>《Java虚拟机规范》允许虚拟机实现增加一些规范里没有描述的信息到栈帧之中，例如与调试、性能收集相关的信息&lt;/p>
&lt;/blockquote>
&lt;h2 id="83方法调用">8.3　方法调用&lt;/h2>
&lt;h3 id="831解析resolution">8.3.1　解析（Resolution）&lt;/h3>
&lt;blockquote>
&lt;p>调用目标在程序代码写好、编译器进行编译那一刻就已经确定下来。这类方法的调用被称为解析(主要有静态方法和私有方法两大类)&lt;/p>
&lt;/blockquote>
&lt;p>调用指令&lt;/p>
&lt;ul>
&lt;li>invokestatic。用于调用静态方法&lt;/li>
&lt;li>invokespecial。用于调用实例构造器&lt;!-- raw HTML omitted -->()方法、私有方法和父类中的方法&lt;/li>
&lt;li>invokevirtual。用于调用所有的虚方法&lt;/li>
&lt;li>invokeinterface。用于调用接口方法，会在运行时再确定一个实现该接口的对象&lt;/li>
&lt;li>invokedynamic。先在运行时动态解析出调用点限定符所引用的方法，然后再执行该方法。前面4条调用指令，分派逻辑都固化在Java虚拟机内部，而invokedynamic指令的分派逻辑是由用户设定的引导方法来决定的&lt;/li>
&lt;/ul>
&lt;p>非虚方法（Non-Virtual Method）&lt;/p>
&lt;ul>
&lt;li>能被invokestatic和invokespecial指令调用，可以在解析阶段中确定唯一的调用版本,在类加载的时候就可以把符号引用解析为该方法的直接引用&lt;/li>
&lt;li>静态方法、私有方法、实例构造器、父类方法、被final修饰的方法(invokevirtual)&lt;/li>
&lt;/ul>
&lt;h3 id="832分派dispatch">8.3.2　分派（Dispatch）&lt;/h3>
&lt;h4 id="1静态分派">1.静态分派&lt;/h4>
&lt;blockquote>
&lt;p>依赖静态类型来决定方法执行版本。最典型应用表现就是方法重载。静态分派发生在编译阶段，因此确定静态分派的动作实际上不是由虚拟机来执行的&lt;/p>
&lt;/blockquote>
&lt;h4 id="2动态分派">2.动态分派&lt;/h4>
&lt;blockquote>
&lt;p>在运行期根据实际类型确定方法执行版本.表现为方法重写&lt;/p>
&lt;/blockquote>
&lt;p>invokevirtual指令的运行时解析过程&lt;/p>
&lt;ol>
&lt;li>找到操作数栈顶的第一个元素所指向的对象的实际类型，记作C&lt;/li>
&lt;li>如果在类型C中找到与常量中的描述符和简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；不通过则返回java.lang.IllegalAccessError异常&lt;/li>
&lt;li>否则，按照继承关系从下往上依次对C的各个父类进行第二步的搜索和验证过程&lt;/li>
&lt;li>如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常&lt;/li>
&lt;/ol>
&lt;p>字段没有多态性: 字段不使用invokevirtual指令。哪个类的方法访问某个名字的字段时，该名字指的就是这个类能看到的那个字段&lt;/p>
&lt;h4 id="3单分派与多分派">3.单分派与多分派&lt;/h4>
&lt;blockquote>
&lt;p>方法的接收者与方法的参数统称为方法的宗量，根据分派基于多少种宗量，可以将分派划分为单分派和多分派两种。单分派是根据一个宗量对目标方法进行选择，多分派则是根据多于一个宗量对目标方法进行选择。Java语言是一门静态多分派、动态单分派的语言&lt;/p>
&lt;/blockquote>
&lt;h4 id="4虚拟机动态分派的实现">4.虚拟机动态分派的实现&lt;/h4>
&lt;blockquote>
&lt;p>使用虚方法表索引来代替元数据查找以提高性能&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/8-3.jpg"
loading="lazy"
>&lt;/p>
&lt;h2 id="84动态类型语言支持">8.4　动态类型语言支持&lt;/h2>
&lt;h3 id="841动态类型语言">8.4.1　动态类型语言&lt;/h3>
&lt;blockquote>
&lt;p>动态类型语言的关键特征是它的类型检查的主体过程是在运行期而不是编译期进行的，JavaScript、Python等。在编译期就进行类型检查过程的语言，譬如C++和Java等就是最常用的静态类型语言&lt;/p>
&lt;/blockquote>
&lt;h3 id="842java与动态类型">8.4.2　Java与动态类型&lt;/h3>
&lt;h3 id="843javalanginvoke包">8.4.3　java.lang.invoke包&lt;/h3>
&lt;blockquote>
&lt;p>提供一种新的动态确定目标方法的机制 - 方法句柄（Method Handle）&lt;/p>
&lt;/blockquote>
&lt;h3 id="844invokedynamic指令">8.4.4　invokedynamic指令&lt;/h3>
&lt;h2 id="85基于栈的字节码解释执行引擎">8.5　基于栈的字节码解释执行引擎&lt;/h2>
&lt;h3 id="851解释执行">8.5.1　解释执行&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/8-4.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="852基于栈的指令集与基于寄存器的指令集">8.5.2　基于栈的指令集与基于寄存器的指令集&lt;/h3>
&lt;blockquote>
&lt;p>Javac编译器输出的字节码指令流，基本上是一种基于栈的指令集架构（Instruction Set Architecture，ISA），字节码指令流里面的指令大部分都是零地址指令，它们依赖操作数栈进行工作。与之相对的另外一套常用的指令集架构是基于寄存器的指令集，最典型的就是x86的二地址指令集，如果说得更通俗一些就是现在我们主流PC机中物理硬件直接支持的指令集架构，这些指令依赖寄存器进行工作&lt;/p>
&lt;/blockquote>
&lt;p>基于栈的指令集&lt;/p>
&lt;ul>
&lt;li>可移植&lt;/li>
&lt;li>代码相对更加紧凑、编译器实现更加简单&lt;/li>
&lt;li>执行速度稍慢&lt;/li>
&lt;/ul>
&lt;h3 id="853基于栈的解释器执行过程">8.5.3　基于栈的解释器执行过程&lt;/h3></description></item><item><title>第7章　虚拟机类加载机制</title><link>https://yzlc.github.io/post/read/jvm/7/</link><pubDate>Wed, 27 May 2020 11:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/7/</guid><description>&lt;h2 id="72-类加载的时机">7.2 类加载的时机&lt;/h2>
&lt;blockquote>
&lt;p>加载（Loading）-&amp;gt;连接（Linking）[验证（Verification）-&amp;gt;准备（Preparation）-&amp;gt;解析（Resolution）]-&amp;gt;初始化（Initialization）-&amp;gt;使用（Using）-&amp;gt;卸载（Unloading）&lt;/p>
&lt;/blockquote>
&lt;p>顺序:加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定特性（也称为动态绑定或晚期绑定）,这些阶段通常都是互相交叉地混合进行的，会在一个阶段执行的过程中调用、激活另一个阶段&lt;/p>
&lt;p>初始化有且仅有6种情况:&lt;/p>
&lt;ol>
&lt;li>遇到new、getstatic、putstatic或invokestatic这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。能够生成这四条指令的典型Java代码场景有：
&lt;ul>
&lt;li>使用new关键字实例化对象的时候&lt;/li>
&lt;li>读取或设置一个类型的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候&lt;/li>
&lt;li>调用一个类型的静态方法的时候&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用java.lang.reflect包的方法对类型进行反射调用的时候，如果类型没有进行过初始化，则需要先触发其初始化&lt;/li>
&lt;li>当初始化类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化&lt;/li>
&lt;li>当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类&lt;/li>
&lt;li>当使用JDK 7新加入的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化&lt;/li>
&lt;li>当一个接口中定义了JDK 8新加入的默认方法（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化&lt;/li>
&lt;/ol>
&lt;h2 id="73类加载的过程">7.3　类加载的过程&lt;/h2>
&lt;h3 id="731加载">7.3.1　加载&lt;/h3>
&lt;p>过程&lt;/p>
&lt;ol>
&lt;li>通过一个类的全限定名来获取定义此类的二进制字节流&lt;/li>
&lt;li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构&lt;/li>
&lt;li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口&lt;/li>
&lt;/ol>
&lt;p>非数组类型:既可以使用Java虚拟机里内置的引导类加载器来完成，也可以由用户自定义的类加载器去完成，开发人员通过定义自己的类加载器去控制字节流的获取方式（重写一个类加载器的findClass()或loadClass()方法），实现根据自己的想法来赋予应用程序获取运行代码的动态性&lt;/p>
&lt;p>数组类型:数组类本身不通过类加载器创建，它是由Java虚拟机直接在内存中动态构造出来的。但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型（Element Type，去掉所有维度）最终还是要靠类加载器来完成加载，一个数组类（简称C）创建过程遵循以下规则：&lt;/p>
&lt;ul>
&lt;li>组件类型（Component Type，去掉一个维度）是引用类型:递归采用加载过程去加载这个组件类型，数组C将被标识在加载该组件类型的类加载器的类名称空间上&lt;/li>
&lt;li>组件类型不是引用类型:Java虚拟机将会把数组C标记为与引导类加载器关联&lt;/li>
&lt;li>数组类的可访问性与它的组件类型的可访问性一致:如果组件类型不是引用类型，它的数组类的可访问性将默认为public，可被所有的类和接口访问到&lt;/li>
&lt;/ul>
&lt;p>加载阶段结束后，Java虚拟机外部的二进制字节流就按照虚拟机所设定的格式存储在方法区之中了。类型数据妥善安置在方法区之后，会在Java堆内存中实例化一个java.lang.Class类的对象，这个对象将作为程序访问方法区中的类型数据的外部接口&lt;/p>
&lt;p>加载阶段与连接阶段的部分动作（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的一部分，这两个阶段的开始时间仍然保持着固定的先后顺序&lt;/p>
&lt;h3 id="732验证">7.3.2　验证&lt;/h3>
&lt;blockquote>
&lt;p>确保Class文件的字节流中包含的信息符合《Java虚拟机规范》，被当作代码运行后不会危害虚拟机自身的安全&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>文件格式验证&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>是否以魔数0xCAFEBABE开头&lt;/li>
&lt;li>主、次版本号是否在当前Java虚拟机接受范围内&lt;/li>
&lt;li>常量池的常量中是否有不被支持的常量类型（检查常量tag标志）&lt;/li>
&lt;li>指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。&lt;/li>
&lt;li>CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据。&lt;/li>
&lt;li>Class文件中各个部分及文件本身是否有被删除的或附加的其他信息。&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>元数据验证&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>对字节码描述的信息进行语义分析，以保证其描述的信息符合《Java语言规范》的要求&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。&lt;/li>
&lt;li>这个类的父类是否继承了不允许被继承的类（被final修饰的类）。&lt;/li>
&lt;li>如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。&lt;/li>
&lt;li>类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等）。&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>字节码验证&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>最复杂的阶段，主要目的是通过数据流分析和控制流分析，确定程序语义是合法的、符合逻辑的。在第二阶段对元数据信息中的数据类型校验完毕以后，这阶段就要对类的方法体（Class文件中的Code属性）进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的行为&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。&lt;/li>
&lt;li>保证任何跳转指令都不会跳转到方法体以外的字节码指令上。&lt;/li>
&lt;li>保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>符号引用验证&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在连接的第三阶段——解析阶段中发生。符号引用验证可以看作是对类自身以外（常量池中的各种符号引用）的各类信息进行匹配性校验，通俗来说就是，该类是否缺少或者被禁止访问它依赖的某些外部类、方法、字段等资源&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>符号引用中通过字符串描述的全限定名是否能找到对应的类。&lt;/li>
&lt;li>在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。&lt;/li>
&lt;li>符号引用中的类、字段、方法的可访问性（private、protected、public、&lt;!-- raw HTML omitted -->）是否可被当
前类访问。&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;h3 id="733准备">7.3.3　准备&lt;/h3>
&lt;blockquote>
&lt;p>为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段&lt;/p>
&lt;/blockquote>
&lt;p>基本数据类型的零值&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>数据类型&lt;/th>
&lt;th>零值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>int&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>long&lt;/td>
&lt;td>0L&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>short&lt;/td>
&lt;td>(short)0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>char&lt;/td>
&lt;td>&amp;lsquo;\u0000&amp;rsquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>byte&lt;/td>
&lt;td>(byte)0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>float&lt;/td>
&lt;td>0.0f&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double&lt;/td>
&lt;td>0.0d&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>reference&lt;/td>
&lt;td>null&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="734--解析">7.3.4 解析&lt;/h3>
&lt;blockquote>
&lt;p>将常量池内的符号引用替换为直接引用的过程&lt;/p>
&lt;/blockquote>
&lt;p>符号引用（Symbolic References）：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中&lt;/p>
&lt;p>直接引用（Direct References）：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在&lt;/p>
&lt;ol>
&lt;li>类或接口的解析&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>假设当前代码所处的类为D，如果要把一个从未解析过的符号引用N解析为一个类或接口C的直接引用，那虚拟机完成整个解析的过程需要包括以下3个步骤：&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>如果C不是一个数组类型，那虚拟机将会把代表N的全限定名传递给D的类加载器去加载这个类C。在加载过程中，由于元数据验证、字节码验证的需要，又可能触发其他相关类的加载动作，例如加载这个类的父类或实现的接口。一旦这个加载过程出现了任何异常，解析过程就将宣告失败&lt;/li>
&lt;li>如果C是一个数组类型，并且数组的元素类型为对象，也就是N的描述符会是类似“[Ljava/lang/Integer”的形式，那将会按照第一点的规则加载数组元素类型。如果N的描述符如前面所假设的形式，需要加载的元素类型就是“java.lang.Integer”，接着由虚拟机生成一个代表该数组维度和元素的数组对象&lt;/li>
&lt;li>如果上面两步没有出现任何异常，那么C在虚拟机中实际上已经成为一个有效的类或接口了，但在解析完成前还要进行符号引用验证，确认D是否具备对C的访问权限。如果发现不具备访问权限，将抛出java.lang.IllegalAccessError异常&lt;/li>
&lt;li>字段解析&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>首先对字段表内class_index项中索引的CONSTANT_Class_info符号引用进行解析，也就是字段所属的类或接口的符号引用。解析完成把这个字段所属的类或接口用C表示，《Java虚拟机规范》要求按照如下步骤对C进行后续字段的搜索：&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>如果C本身就包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束&lt;/li>
&lt;li>否则，如果在C中实现了接口，将会按照继承关系从下往上递归搜索各个接口和它的父接口，如果接口中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束&lt;/li>
&lt;li>否则，如果C不是java.lang.Object的话，将会按照继承关系从下往上递归搜索其父类，如果在父类中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束&lt;/li>
&lt;li>否则，查找失败，抛出java.lang.NoSuchFieldError异常&lt;/li>
&lt;li>方法解析&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>先解析出方法表的class_index项中索引的方法所属的类或接口的符号引用，如果解析成功，那么我们依然用C表示这个类，接下来虚拟机将会按照如下步骤进行后续的方法搜索：&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>由于Class文件格式中类的方法和接口的方法符号引用的常量类型定义是分开的，如果在类的方法表中发现class_index中索引的C是个接口的话，那就直接抛出java.lang.IncompatibleClassChangeError异常&lt;/li>
&lt;li>如果通过了第一步，在类C中查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束&lt;/li>
&lt;li>否则，在类C的父类中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束&lt;/li>
&lt;li>否则，在类C实现的接口列表及它们的父接口之中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果存在匹配的方法，说明类C是一个抽象类，这时候查找结束，抛出java.lang.AbstractMethodError异常&lt;/li>
&lt;li>否则，宣告方法查找失败，抛出java.lang.NoSuchMethodError&lt;/li>
&lt;li>接口方法解析&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>先解析出接口方法表的class_index项中索引的方法所属的类或接口的符号引用，如果解析成功，依然用C表示这个接口，接下来虚拟机将会按照如下步骤进行后续的接口方法搜索：&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>与类的方法解析相反，如果在接口方法表中发现class_index中的索引C是个类而不是接口，那么就直接抛出java.lang.IncompatibleClassChangeError异常&lt;/li>
&lt;li>否则，在接口C中查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束&lt;/li>
&lt;li>否则，在接口C的父接口中递归查找，直到java.lang.Object类（接口方法的查找范围也会包括Object类中的方法）为止，看是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束&lt;/li>
&lt;li>对于规则3，由于Java的接口允许多重继承，如果C的不同父接口中存有多个简单名称和描述符都与目标相匹配的方法，那将会从这多个方法中返回其中一个并结束查找，《Java虚拟机规范》中并没有进一步规则约束应该返回哪一个接口方法。但与之前字段查找类似地，不同发行商实现的Javac编译器有可能会按照更严格的约束拒绝编译这种代码来避免不确定性&lt;/li>
&lt;li>否则，宣告方法查找失败，抛出java.lang.NoSuchMethodError异常&lt;/li>
&lt;/ol>
&lt;h3 id="735初始化">7.3.5　初始化&lt;/h3>
&lt;blockquote>
&lt;p>初始化阶段就是执行类构造器&lt;!-- raw HTML omitted -->()方法的过程&lt;/p>
&lt;/blockquote>
&lt;p>&lt;!-- raw HTML omitted -->()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块可以赋值，但是不能访问&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->()方法与类的构造函数（即在虚拟机视角中的实例构造器&lt;!-- raw HTML omitted -->()方法）不同，它不需要显式地调用父类构造器，Java虚拟机会保证在子类的&lt;!-- raw HTML omitted -->()方法执行前，父类的&lt;!-- raw HTML omitted -->()方法已经执行完毕。因此在Java虚拟机中第一个被执行的&lt;!-- raw HTML omitted -->()方法的类型肯定是java.lang.Object&lt;/p>
&lt;p>由于父类的&lt;!-- raw HTML omitted -->()方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->()方法对于类或接口来说并不是必需的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成&lt;!-- raw HTML omitted -->()方法&lt;/p>
&lt;p>接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成&lt;!-- raw HTML omitted -->()方法。但接口与类不同的是，执行接口的&lt;!-- raw HTML omitted -->()方法不需要先执行父接口的&lt;!-- raw HTML omitted -->()方法，因为只有当父接口中定义的变量被使用时，父接口才会被初始化。此外，接口的实现类在初始化时也一样不会执行接口的&lt;!-- raw HTML omitted -->()方法&lt;/p>
&lt;p>Java虚拟机必须保证一个类的&lt;!-- raw HTML omitted -->()方法在多线程环境中被正确地加锁同步，如果多个线程同时去初始化一个类，那么只会有其中一个线程去执行这个类的&lt;!-- raw HTML omitted -->()方法，其他线程都需要阻塞等待，直到活动线程执行完毕&lt;!-- raw HTML omitted -->()方法。如果在一个类的&lt;!-- raw HTML omitted -->()方法中有耗时很长的操作，那就可能造成多个进程阻塞，在实际应用中这种阻塞往往是很隐蔽的&lt;/p>
&lt;h2 id="74类加载器">7.4　类加载器&lt;/h2>
&lt;h3 id="741类与类加载器">7.4.1　类与类加载器&lt;/h3>
&lt;blockquote>
&lt;p>对于任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。类加载器不同，那这两个类就必定不相等(equals()、isAssignableFrom()、isInstance()、instanceof)&lt;/p>
&lt;/blockquote>
&lt;h3 id="742双亲委派模型parents-delegation-model">7.4.2　双亲委派模型（Parents Delegation Model）&lt;/h3>
&lt;blockquote>
&lt;p>除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器&lt;/p>
&lt;/blockquote>
&lt;p>启动类加载器（Bootstrap Class Loader）：负责加载存放在&amp;lt;JAVA_HOME&amp;gt;\lib目录，或者被-Xbootclasspath参数所指定的路径中存放的，而且是Java虚拟机能够识别的（按照文件名识别，如rt.jar、tools.jar）类库加载到虚拟机的内存中。启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器去处理，那直接使用null代替即可&lt;/p>
&lt;p>扩展类加载器（Extension Class Loader）：这个类加载器是在类sun.misc.Launcher$ExtClassLoader中以Java代码的形式实现的。它负责加载&amp;lt;JAVA_HOME&amp;gt;\lib\ext目录中，或者被java.ext.dirs系统变量所指定的路径中所有的类库。根据“扩展类加载器”这个名称，就可以推断出这是一种Java系统类库的扩展机制，JDK的开发团队允许用户将具有通用性的类库放置在ext目录里以扩展Java SE的功能，在JDK9之后被模块化带来的天然扩展能力取代。由于扩展类加载器是由Java代码实现的，开发者可以直接在程序中使用扩展类加载器来加载Class文件&lt;/p>
&lt;p>应用程序类加载器（Application Class Loader）：这个类加载器由sun.misc.Launcher$AppClassLoader来实现。由于应用程序类加载器是ClassLoader类中的getSystem-ClassLoader()方法的返回值，所以有些场合中也称它为“系统类加载器”。它负责加载用户类路径（ClassPath）上所有的类库，开发者同样可以直接在代码中使用这个类加载器。是程序中默认的类加载器
&lt;img src="https://yzlc.github.io/images/read/jvm/7-2.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="743破坏双亲委派模型">7.4.3　破坏双亲委派模型&lt;/h3>
&lt;h2 id="75java模块化系统">7.5　Java模块化系统&lt;/h2>
&lt;h3 id="751模块的兼容性">7.5.1　模块的兼容性&lt;/h3>
&lt;h3 id="752模块化下的类加载器">7.5.2　模块化下的类加载器&lt;/h3>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/7-7.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>6.4　字节码指令简介</title><link>https://yzlc.github.io/post/read/jvm/6.4/</link><pubDate>Wed, 27 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/6.4/</guid><description>&lt;h3 id="641字节码与数据类型">6.4.1　字节码与数据类型&lt;/h3>
&lt;blockquote>
&lt;p>编译器会在编译期或运行期将byte和short类型的数据带符号扩展（Sign-Extend）为相应的int类型数据，将boolean和char类型数据零位扩展（Zero-Extend）为相应的int类型数据。因此，大多数对于boolean、byte、short和char类型数据的操作，实际上都是使用相应的对int类型作为运算类型（Computational Type）来进行的&lt;/p>
&lt;/blockquote>
&lt;p>Java虚拟机指令集所支持的数据类型&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>opcode&lt;/th>
&lt;th>byte&lt;/th>
&lt;th>short&lt;/th>
&lt;th>int&lt;/th>
&lt;th>long&lt;/th>
&lt;th>float&lt;/th>
&lt;th>double&lt;/th>
&lt;th>char&lt;/th>
&lt;th>reference&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Tipush&lt;/td>
&lt;td>bipush&lt;/td>
&lt;td>sipush&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tconst&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>iconst&lt;/td>
&lt;td>lconst&lt;/td>
&lt;td>fconst&lt;/td>
&lt;td>dconst&lt;/td>
&lt;td>&lt;/td>
&lt;td>aconst&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tload&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>iload&lt;/td>
&lt;td>lload&lt;/td>
&lt;td>fload&lt;/td>
&lt;td>dload&lt;/td>
&lt;td>&lt;/td>
&lt;td>aload&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tstore&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>istore&lt;/td>
&lt;td>lstore&lt;/td>
&lt;td>fstore&lt;/td>
&lt;td>dstore&lt;/td>
&lt;td>&lt;/td>
&lt;td>astore&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tinc&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>iinc&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Taload&lt;/td>
&lt;td>baload&lt;/td>
&lt;td>saload&lt;/td>
&lt;td>iaload&lt;/td>
&lt;td>laload&lt;/td>
&lt;td>faload&lt;/td>
&lt;td>daload&lt;/td>
&lt;td>caload&lt;/td>
&lt;td>aaload&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tastore&lt;/td>
&lt;td>bastore&lt;/td>
&lt;td>sastore&lt;/td>
&lt;td>iastore&lt;/td>
&lt;td>lastore&lt;/td>
&lt;td>fastore&lt;/td>
&lt;td>dastore&lt;/td>
&lt;td>castore&lt;/td>
&lt;td>aastore&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tadd&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>iadd&lt;/td>
&lt;td>ladd&lt;/td>
&lt;td>fadd&lt;/td>
&lt;td>dadd&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tsub&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>isub&lt;/td>
&lt;td>lsub&lt;/td>
&lt;td>fsub&lt;/td>
&lt;td>dsub&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tmul&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>imul&lt;/td>
&lt;td>lmul&lt;/td>
&lt;td>fmul&lt;/td>
&lt;td>dmul&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tdiv&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>idiv&lt;/td>
&lt;td>ldiv&lt;/td>
&lt;td>fdiv&lt;/td>
&lt;td>ddiv&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Trem&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>irem&lt;/td>
&lt;td>lrem&lt;/td>
&lt;td>frem&lt;/td>
&lt;td>drem&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tneg&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>ineg&lt;/td>
&lt;td>lneg&lt;/td>
&lt;td>fneg&lt;/td>
&lt;td>dneg&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tshl&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>ishl&lt;/td>
&lt;td>lshl&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tshr&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>ishr&lt;/td>
&lt;td>lshr&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tushr&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>iushr&lt;/td>
&lt;td>lushr&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tand&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>iand&lt;/td>
&lt;td>land&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tor&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>ior&lt;/td>
&lt;td>lor&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Txor&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>ixor&lt;/td>
&lt;td>lxor&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>i2T&lt;/td>
&lt;td>i2b&lt;/td>
&lt;td>i2s&lt;/td>
&lt;td>&lt;/td>
&lt;td>i2l&lt;/td>
&lt;td>i2f&lt;/td>
&lt;td>i2d&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>l2T&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>l2i&lt;/td>
&lt;td>&lt;/td>
&lt;td>l2f&lt;/td>
&lt;td>l2d&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>f2T&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>f2i&lt;/td>
&lt;td>f2l&lt;/td>
&lt;td>&lt;/td>
&lt;td>f2d&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>d2T&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>d2i&lt;/td>
&lt;td>d2l&lt;/td>
&lt;td>d2f&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tcmp&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>lcmp&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tcmp1&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>fcmpl&lt;/td>
&lt;td>dcmpl&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tcmpg&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>fcmpg&lt;/td>
&lt;td>dcmpg&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>if_TcmpOP&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>if_icmpOP&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>if_acmpOP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Treturn&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>ireturn&lt;/td>
&lt;td>lreturn&lt;/td>
&lt;td>freturn&lt;/td>
&lt;td>dreturn&lt;/td>
&lt;td>&lt;/td>
&lt;td>areturn&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="642加载和存储指令">6.4.2　加载和存储指令&lt;/h3>
&lt;blockquote>
&lt;p>加载和存储指令用于将数据在栈帧中的局部变量表和操作数栈之间来回传输&lt;/p>
&lt;/blockquote>
&lt;p>将一个局部变量加载到操作栈：iload、iload_&lt;!-- raw HTML omitted -->、lload、lload_&lt;!-- raw HTML omitted -->、fload、fload_&lt;!-- raw HTML omitted -->、dload、dload_&lt;!-- raw HTML omitted -->、aload、aload_&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>将一个数值从操作数栈存储到局部变量表：istore、istore_&lt;!-- raw HTML omitted -->、lstore、lstore_&lt;!-- raw HTML omitted -->、fstore、fstore_&lt;!-- raw HTML omitted -->、dstore、dstore_&lt;!-- raw HTML omitted -->、astore、astore_&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>将一个常量加载到操作数栈：bipush、sipush、ldc、ldc_w、ldc2_w、aconst_null、iconst_m1、iconst_&lt;!-- raw HTML omitted -->、lconst_&lt;!-- raw HTML omitted -->、fconst_&lt;!-- raw HTML omitted -->、dconst_&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>扩充局部变量表的访问索引的指令：wide&lt;/p>
&lt;h3 id="643运算指令">6.4.3　运算指令&lt;/h3>
&lt;blockquote>
&lt;p>对两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶.遵循IEEE754规范&lt;/p>
&lt;/blockquote>
&lt;p>加法指令：iadd、ladd、fadd、dadd&lt;/p>
&lt;p>减法指令：isub、lsub、fsub、dsub&lt;/p>
&lt;p>乘法指令：imul、lmul、fmul、dmul&lt;/p>
&lt;p>除法指令：idiv、ldiv、fdiv、ddiv&lt;/p>
&lt;p>求余指令：irem、lrem、frem、drem&lt;/p>
&lt;p>取反指令：ineg、lneg、fneg、dneg&lt;/p>
&lt;p>位移指令：ishl、ishr、iushr、lshl、lshr、lushr&lt;/p>
&lt;p>按位或指令：ior、lor&lt;/p>
&lt;p>按位与指令：iand、land&lt;/p>
&lt;p>按位异或指令：ixor、lxor&lt;/p>
&lt;p>局部变量自增指令：iinc&lt;/p>
&lt;p>比较指令：dcmpg、dcmpl、fcmpg、fcmpl、lcmp&lt;/p>
&lt;h3 id="644类型转换指令">6.4.4　类型转换指令&lt;/h3>
&lt;p>窄化类型转换（Narrowing Numeric Conversion）必须显式使用转换指令完成，指令包括i2b、i2c、i2s、l2i、f2i、f2l、d2i、d2l和d2f&lt;/p>
&lt;p>int或long类型窄化为T:丢弃除最低位N(T的数据类型长度)字节以外的内容，可能导致转换结果与输入值有不同的正负号&lt;/p>
&lt;p>浮点值窄化转换为T（T限于int或long）：&lt;/p>
&lt;ul>
&lt;li>如果浮点值是NaN，那转换结果就是int或long类型的0&lt;/li>
&lt;li>如果浮点值不是无穷大的话，浮点值使用IEEE 754的向零舍入模式取整，获得整数值v。如果v在目标类型T（int或long）的表示范围之类，那转换结果就是v；否则，将根据v的符号，转换为T所能表示的最大或者最小正数&lt;/li>
&lt;/ul>
&lt;h3 id="645对象创建与访问指令">6.4.5　对象创建与访问指令&lt;/h3>
&lt;p>创建类实例的指令：new&lt;/p>
&lt;p>创建数组的指令：newarray、anewarray、multianewarray&lt;/p>
&lt;p>访问类字段（static字段，或者称为类变量）和实例字段（非static字段，或者称为实例变量）的指令：getfield、putfield、getstatic、putstatic&lt;/p>
&lt;p>把一个数组元素加载到操作数栈的指令：baload、caload、saload、iaload、laload、faload、daload、aaload&lt;/p>
&lt;p>将一个操作数栈的值储存到数组元素中的指令：bastore、castore、sastore、iastore、fastore、dastore、aastore&lt;/p>
&lt;p>取数组长度的指令：arraylength&lt;/p>
&lt;p>检查类实例类型的指令：instanceof、checkcast&lt;/p>
&lt;h3 id="646操作数栈管理指令">6.4.6　操作数栈管理指令&lt;/h3>
&lt;p>将操作数栈的栈顶一个或两个元素出栈：pop、pop2&lt;/p>
&lt;p>复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶：dup、dup2、dup_x1、dup2_x1、dup_x2、dup2_x2&lt;/p>
&lt;p>将栈最顶端的两个数值互换：swap&lt;/p>
&lt;h3 id="647控制转移指令">6.4.7　控制转移指令&lt;/h3>
&lt;blockquote>
&lt;p>让Java虚拟机有条件或无条件地从指定位置指令（而不是控制转移指令）的下一条指令继续执行程序，从概念模型上理解，可以认为控制指令就是在有条件或无条件地修改PC寄存器的值&lt;/p>
&lt;/blockquote>
&lt;p>条件分支：ifeq、iflt、ifle、ifne、ifgt、ifge、ifnull、ifnonnull、if_icmpeq、if_icmpne、if_icmplt、if_icmpgt、if_icmple、if_icmpge、if_acmpeq和if_acmpne&lt;/p>
&lt;p>复合条件分支：tableswitch、lookupswitch&lt;/p>
&lt;p>无条件分支：goto、goto_w、jsr、jsr_w、ret&lt;/p>
&lt;h3 id="648方法调用和返回指令">6.4.8　方法调用和返回指令&lt;/h3>
&lt;p>方法调用&lt;/p>
&lt;ul>
&lt;li>invokevirtual指令：用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派），这也是Java语言中最常见的方法分派方式&lt;/li>
&lt;li>invokeinterface指令：用于调用接口方法，它会在运行时搜索一个实现了这个接口方法的对象，找出适合的方法进行调用&lt;/li>
&lt;li>invokespecial指令：用于调用一些需要特殊处理的实例方法，包括实例初始化方法、私有方法和父类方法&lt;/li>
&lt;li>invokestatic指令：用于调用类静态方法（static方法）&lt;/li>
&lt;li>invokedynamic指令：用于在运行时动态解析出调用点限定符所引用的方法。并执行该方法。前面四条调用指令的分派逻辑都固化在Java虚拟机内部，用户无法改变，而invokedynamic指令的分派逻辑是由用户所设定的引导方法决定的&lt;/li>
&lt;/ul>
&lt;p>方法返回指令:根据返回值的类型区分，包括ireturn（当返回值是boolean、byte、char、short和int类型时使用）、lreturn、freturn、dreturn和areturn，另外还有一条return指令供声明为void的方法、实例初始化方法、类和接口的类初始化方法使用&lt;/p>
&lt;h3 id="649异常处理指令">6.4.9　异常处理指令&lt;/h3>
&lt;blockquote>
&lt;p>由athrow指令实现,许多运行时异常会在其他Java虚拟机指令检测到异常状况时自动抛出.采用异常表完成&lt;/p>
&lt;/blockquote>
&lt;h3 id="6410同步指令">6.4.10　同步指令&lt;/h3>
&lt;blockquote>
&lt;p>使用管程（Monitor，更常见的是直接将它称为“锁”）实现方法级的同步:检查方法的ACC_SYNCHRONIZED访问标志是否被设置，如果设置了，执行线程就要求先成功持有管程，然后才能执行方法，最后当方法完成（无论是正常完成还是非正常完成）时释放管程同步一段指令集序列:monitorenter和monitorexit两条指令&lt;/p>
&lt;/blockquote></description></item><item><title>6.3　Class类文件的结构</title><link>https://yzlc.github.io/post/read/jvm/6.3/</link><pubDate>Thu, 14 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/6.3/</guid><description>&lt;blockquote>
&lt;p>Class文件是一组以8个字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在文件之中，中间没有添加任何分隔符。当遇到需要占用8个字节以上空间的数据项时，则会按照高位在前的方式分割成若干个8个字节进行存储&lt;/p>
&lt;/blockquote>
&lt;p>Class文件格式采用一种类似于C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型：“无符号数”和“表”&lt;/p>
&lt;ul>
&lt;li>无符号数属于基本的数据类型，以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成字符串值&lt;/li>
&lt;li>表是由多个无符号数或者其他表作为数据项构成的复合数据类型，为了便于区分，所有表的命名都习惯性地以“_info”结尾。表用于描述有层次关系的复合结构的数据，整个Class文件本质上也可以视作是一张表，这张表由表6-1所示的数据项按严格顺序排列构成&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>magic&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>minor_version&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>major_version&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>constant_pool_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cp_info&lt;/td>
&lt;td>constant_pool&lt;/td>
&lt;td>constant_pool_count-1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>access_flags&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>this_class&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>super_class&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>interfaces_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>interfaces&lt;/td>
&lt;td>interfaces_count&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>fields_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>field_info&lt;/td>
&lt;td>fields&lt;/td>
&lt;td>fields_count&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>methods_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>method_info&lt;/td>
&lt;td>methods&lt;/td>
&lt;td>methods_count&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attributes_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>attribute_info&lt;/td>
&lt;td>attributes&lt;/td>
&lt;td>attributes_count&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="631魔数与class文件的版本">6.3.1　魔数与Class文件的版本&lt;/h3>
&lt;p>魔数（Magic Number）:值为0xCAFEBABE.每个Class文件的头4个字节,确定这个文件是否为一个能被虚拟机接受的Class文件&lt;/p>
&lt;p>版本:紧接着魔数的4个字节存储,第5和第6个字节是次版本号（Minor Version），第7和第8个字节是主版本号（Major Version）。Java版本号是从45开始的，JDK 1.1之后的每个JDK大版本发布主版本号向上加1，高版本的JDK能向下兼容以前版本的Class文件，但不能运行以后版本的Class文件，因为《Java虚拟机规范》在Class文件校验部分明确要求了即使文件格式并未发生任何变化，虚拟机也必须拒绝执行超过其版本号的Class文件
&lt;img src="https://yzlc.github.io/images/read/jvm/6-2.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="632常量池">6.3.2　常量池&lt;/h3>
&lt;blockquote>
&lt;p>紧接着主、次版本号之后的是常量池入口，常量池可以比喻为Class文件里的资源仓库，它是Class文件结构中与其他项目关联最多的数据，通常也是占用Class文件空间最大的数据项目之一，另外，它还是在Class文件中第一个出现的表类型数据项目&lt;/p>
&lt;/blockquote>
&lt;p>常量池容量计数值（constant_pool_count）: 常量池入口放置的一项u2类型的数据,因为常量池中常量的数量是不固定的&lt;/p>
&lt;ul>
&lt;li>容量计数从1而不是0开始的，如图6-3所示，常量池容量为十六进制数0x0016，即十进制的22，这就代表常量池中有21项常量，索引值范围为1～21
&lt;img src="https://yzlc.github.io/images/read/jvm/6-3.jpg"
loading="lazy"
>&lt;/li>
&lt;li>第0项常量: 某些指向常量池的索引值的数据在表达“不引用任何一个常量池项目”的含义，可以把索引值设置为0来表示&lt;/li>
&lt;/ul>
&lt;h4 id="主要存放两大类常量">主要存放两大类常量&lt;/h4>
&lt;p>字面量（Literal）: 接近于Java语言层面的常量概念，如文本字符串、被声明为final的常量值等&lt;/p>
&lt;p>符号引用（Symbolic References）: 属于编译原理方面的概念，主要包括下面几类常量：&lt;/p>
&lt;ul>
&lt;li>被模块导出或者开放的包（Package）&lt;/li>
&lt;li>类和接口的全限定名（Fully Qualified Name）&lt;/li>
&lt;li>字段的名称和描述符（Descriptor）&lt;/li>
&lt;li>方法的名称和描述符&lt;/li>
&lt;li>方法句柄和方法类型（Method Handle、Method Type、Invoke Dynamic）&lt;/li>
&lt;li>动态调用点和动态常量（Dynamically-Computed Call Site、Dynamically-Computed Constant）&lt;/li>
&lt;/ul>
&lt;h4 id="常量表">常量表&lt;/h4>
&lt;blockquote>
&lt;p>常量池中每一项常量都是一个表&lt;/p>
&lt;/blockquote>
&lt;p>常量类型:表结构起始第一位是u1类型的标志位（tag，取值见表中标志列），代表着当前常量属于哪种常量类型&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>常量&lt;/th>
&lt;th>项目&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CONSTANT_Utf8_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>length&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>UTF-8编码的字符串占用了字节数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>bytes&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>长度length的UTF-8编码的字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_Integer_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>bytes&lt;/td>
&lt;td>u4&lt;/td>
&lt;td>按照高位在前存储的int值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_Float_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>bytes&lt;/td>
&lt;td>u4&lt;/td>
&lt;td>按照高位在前存储的float值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_Long_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>bytes&lt;/td>
&lt;td>u8&lt;/td>
&lt;td>按照高位在前存储的long值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_Double_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>bytes&lt;/td>
&lt;td>u8&lt;/td>
&lt;td>按照高位在前存储的double值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_Class_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>指向全限定名常量项的索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_String_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>指向字符串字面量的索引的索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_Fieldref_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为9&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>指向声明字段的类或者接口描述符CONSTANT_Class_info的索引项&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>指向字段描述符CONSTANT_NameAndType的索引项&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_Methodref_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>指向声明方法的类描述符CONSTANT_Class_info的索引项&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>指向名称及类型描述符CONSTANT_NameAndType的索引项&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_InterfaceMethodref_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为11&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>指向声明方法的接口描述符CONSTANT_Class_info的索引项&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>指向名称及类型描述符CONSTANT_NameAndType的索引项&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_NameAndType_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为12&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>指向该字段或方法名称常量项的索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>指向该字段或方法描述符常量项的索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_MethodHandle_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>reference_kind&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值必须在1至9之间(包括1和9),它决定了方法句柄的类型.方法句柄的值表示方法句柄的字节码行为&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>reference_index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>值必须是对常量池的有效索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_MethodType_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为16&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>descriptor_index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>值必须是对常量池的有效索引,常量池在该索引处的项必须是CONSTANT_Utf8_info结构,表示方法的描述符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_Dynamic_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为17&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>bootstrap_method_attr_index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>值必须是对当前Class文件中引导方法表的bootstrap_mathods[]数组的有效索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>name_and_type_index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>值必须是对当前常量池的有效索引,常量池在该索引处的项必须是CONSTANT_NameAndType_info结构,表示方法名和方法描述符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_InvokeDynamic_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为18&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>bootstrap_method_attr_index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>值必须是对当前Class文件中引导方法表的bootstrap_mathods[]数组的有效索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>name_and_type_index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>值必须是对当前常量池的有效索引,常量池在该索引处的项必须是CONSTANT_NameAndType_info结构,表示方法名和方法描述符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_Module_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为19&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>name_index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>值必须是对常量池的有效索引,常量池在该索引处的项必须是CONSTANT_Utf8_info结构,表示模块名字&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONSTANT_Package_info&lt;/td>
&lt;td>tag&lt;/td>
&lt;td>u1&lt;/td>
&lt;td>值为20&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>name_index&lt;/td>
&lt;td>u2&lt;/td>
&lt;td>值必须是对常量池的有效索引,常量池在该索引处的项必须是CONSTANT_Utf8_info结构,表示包名称&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="633访问标志access_flags">6.3.3　访问标志(access_flags)&lt;/h3>
&lt;blockquote>
&lt;p>常量池紧接着的2个字节,用于识别一些类或者接口层次的访问信息,包括:这个Class是类还是接口;是否定义为public;是否定义为abstract;类是否被声明为final等等&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>标志名称&lt;/th>
&lt;th>标志值&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ACC_PUBLIC&lt;/td>
&lt;td>0x0001&lt;/td>
&lt;td>是否为public类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_FINAL&lt;/td>
&lt;td>0x0010&lt;/td>
&lt;td>是否被声明为final,只有类可设置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_SUPER&lt;/td>
&lt;td>0x0020&lt;/td>
&lt;td>是否允许使用invokespecial字节码指令的新语义,invokespecial指令的语义在JDK1.0.2发生过改变,为了区别这条指令使用哪种语义,JDK1.0.2之后编译出来的类的这个标志都必须为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_INTERFACE&lt;/td>
&lt;td>0x0200&lt;/td>
&lt;td>标识这是一个接口&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_ABSTRACT&lt;/td>
&lt;td>0x0400&lt;/td>
&lt;td>是否为abstract类型,对于接口或者抽象类来说,此标志为真,其他类型值为假&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_SYNTHETIC&lt;/td>
&lt;td>0x1000&lt;/td>
&lt;td>标识这个类并非由用户代码产生的&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_ANNOTATION&lt;/td>
&lt;td>0x2000&lt;/td>
&lt;td>标识这是一个注解&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_ENUM&lt;/td>
&lt;td>0x4000&lt;/td>
&lt;td>标识这是一个枚举&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_MODULE&lt;/td>
&lt;td>0x8000&lt;/td>
&lt;td>标识这是一个模块&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="634类索引this_class父类索引super_class与接口索引interfaes集合">6.3.4　类索引(this_class)、父类索引(super_class)与接口索引(interfaes)集合&lt;/h3>
&lt;blockquote>
&lt;p>按顺序排列在访问标志之后,类索引和父类索引都是一个u2类型的数据，而接口索引集合是一组u2类型的数据的集合,Class文件中由这三项数据来确定该类型的继承关系&lt;/p>
&lt;/blockquote>
&lt;p>类索引:确定这个类的全限定名&lt;/p>
&lt;p>父类索引:确定这个类的父类的全限定名&lt;/p>
&lt;ul>
&lt;li>父类索引只有一个(不允许多重继承)&lt;/li>
&lt;li>除了Object，所有的Java类都有父类(父类索引不为0)
&lt;ul>
&lt;li>除了Object，所有的Java类都有父类(父类索引不为0)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>除了Object，所有的Java类都有父类(父类索引不为0)
&lt;ul>
&lt;li>除了Object，所有的Java类都有父类(父类索引不为0)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>除了Object，所有的Java类都有父类(父类索引不为0)&lt;/li>
&lt;/ul>
&lt;p>类索引和父类索引用两个u2类型的索引值表示，它们各自指向一个类型为CONSTANT_Class_info的类描述符常量，通过CONSTANT_Class_info类型的常量中的索引值可以找到定义在CONSTANT_Utf8_info类型的常量中的全限定名字符串
&lt;img src="https://yzlc.github.io/images/read/jvm/6-6.jpg"
loading="lazy"
>&lt;/p>
&lt;p>接口索引集合:描述这个类实现了哪些接口，按implements关键字（如果Class文件表示的是接口，则是extends）后的接口顺序从左到右排列在接口索引集合中&lt;/p>
&lt;ul>
&lt;li>入口的第一项u2类型的数据为接口计数器（interfaces_count），表示索引表的容量。如果该类没有实现任何接口，则该计数器值为0，后面接口的索引表不再占用任何字节&lt;/li>
&lt;/ul>
&lt;h3 id="635字段表field_info集合">6.3.5　字段表（field_info）集合&lt;/h3>
&lt;blockquote>
&lt;p>描述接口或者类中声明的变量&lt;/p>
&lt;/blockquote>
&lt;p>字段表结构&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>access_flags&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>descriptor_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attributes_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>attribute_info&lt;/td>
&lt;td>attributes&lt;/td>
&lt;td>attributes_count&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>字段访问标志&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>标志名称&lt;/th>
&lt;th>标志值&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ACC_PUBLIC&lt;/td>
&lt;td>0x0001&lt;/td>
&lt;td>字段是否public&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_PRIVATE&lt;/td>
&lt;td>0x0002&lt;/td>
&lt;td>字段是否private&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_PROTECTED&lt;/td>
&lt;td>0x0004&lt;/td>
&lt;td>字段是否protected&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_STATIC&lt;/td>
&lt;td>0x0008&lt;/td>
&lt;td>字段是否static&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_FINAL&lt;/td>
&lt;td>0x0010&lt;/td>
&lt;td>字段是否final&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_VOLATILE&lt;/td>
&lt;td>0x0040&lt;/td>
&lt;td>字段是否pvolatile&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_TRANSIENT&lt;/td>
&lt;td>0x0080&lt;/td>
&lt;td>字段是否transient&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_SYNTHETIC&lt;/td>
&lt;td>0x1000&lt;/td>
&lt;td>字段是否由编译器自动产生&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_ENUM&lt;/td>
&lt;td>0x4000&lt;/td>
&lt;td>字段是否enum&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>描述符标识字符含义&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>标识字符&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>基本类型byte&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C&lt;/td>
&lt;td>基本类型char&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>D&lt;/td>
&lt;td>基本类型double&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>F&lt;/td>
&lt;td>基本类型float&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>I&lt;/td>
&lt;td>基本类型int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>J&lt;/td>
&lt;td>基本类型long&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>S&lt;/td>
&lt;td>基本类型short&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Z&lt;/td>
&lt;td>基本类型boolean&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>V&lt;/td>
&lt;td>特殊类型void&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>L&lt;/td>
&lt;td>对象类型,如Ljava/lang/Object;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>数组:前置&lt;code>[&lt;/code>,例如&lt;code>String[][]&lt;/code>记录成&lt;code>[[Ljava/lang/String；&lt;/code>;&lt;code>int[]&lt;/code>记录成&lt;code>[I&lt;/code>&lt;/p>
&lt;p>方法:先参数列表(按参数顺序放小括号&lt;code>()&lt;/code>),后返回值.如void inc()描述符为“()V”，方法toString()描述符为“()Ljava/lang/String；”，indexOf(char[]source，int sourceOffset，int sourceCount，char[]target，int targetOffset，int targetCount，int fromIndex)描述符为“([CII[CIII)I&lt;/p>
&lt;h3 id="636方法表集合">6.3.6　方法表集合&lt;/h3>
&lt;blockquote>
&lt;p>同字段表一样，依次包括访问标志（access_flags）、名称索引（name_index）、描述符索引（descriptor_index）、属性表集合（attributes）&lt;/p>
&lt;/blockquote>
&lt;p>方法表结构&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>access_flags&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>descriptor_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attributes_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>attribute_info&lt;/td>
&lt;td>attributes&lt;/td>
&lt;td>attributes_count&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>方法访问标志&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>标志名称&lt;/th>
&lt;th>标志值&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ACC_PUBLIC&lt;/td>
&lt;td>0x0001&lt;/td>
&lt;td>方法是否为public&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_PRIVATE&lt;/td>
&lt;td>0x0002&lt;/td>
&lt;td>方法是否为private&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_PROTECTED&lt;/td>
&lt;td>0x0004&lt;/td>
&lt;td>方法是否为protected&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_STATIC&lt;/td>
&lt;td>0x0008&lt;/td>
&lt;td>方法是否为static&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_FINAL&lt;/td>
&lt;td>0x0010&lt;/td>
&lt;td>方法是否为final&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_SYNCHRONIZED&lt;/td>
&lt;td>0x0020&lt;/td>
&lt;td>方法是否为synchronized&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_BRIDGE&lt;/td>
&lt;td>0x0040&lt;/td>
&lt;td>方法是否为编译器产生的桥接方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_VARARGS&lt;/td>
&lt;td>0x0080&lt;/td>
&lt;td>方法是否接受不定参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_NATIVE&lt;/td>
&lt;td>0x0100&lt;/td>
&lt;td>方法是否为native&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_ABSTRACT&lt;/td>
&lt;td>0x0400&lt;/td>
&lt;td>方法是否为abstract&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_STRICT&lt;/td>
&lt;td>0x0800&lt;/td>
&lt;td>方法是否为strictfp&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_SYNTHETIC&lt;/td>
&lt;td>0x1000&lt;/td>
&lt;td>方法是否由编译器自动产生&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="637属性表attribute_info集合">6.3.7　属性表（attribute_info）集合&lt;/h3>
&lt;ol>
&lt;li>Code属性
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>max_stack&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>max_locals&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>code_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u1&lt;/td>
&lt;td>code&lt;/td>
&lt;td>code_length&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>exception_table_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>exception_info&lt;/td>
&lt;td>exception_table&lt;/td>
&lt;td>exception_table_length&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attributes_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>attribute_info&lt;/td>
&lt;td>attributes&lt;/td>
&lt;td>attributes_count&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>attribute_name_index:指向CONSTANT_Utf8_info型常量的索引，此常量值固定为“Code”，它代表了该属性的属性名称&lt;/li>
&lt;li>attribute_length:属性值的长度，由于属性名称索引与属性长度一共为6个字节，所以属性值的长度固定为整个属性表长度减去6个字节。&lt;/li>
&lt;li>max_stack:操作数栈（Operand Stack）深度的最大值。虚拟机运行的时候需要根据这个值来分配栈帧（Stack Frame）中的操作栈深度。&lt;/li>
&lt;li>max_locals:局部变量表所需的存储空间。单位是变量槽（Slot）。
&lt;ul>
&lt;li>局部变量表:方法参数（包括实例方法中的隐藏参数“this”）、显式异常处理程序的参数（Exception Handler Parameter，try-catch中catch块定义的异常）、方法体中定义的局部变量&lt;/li>
&lt;li>并不是在方法中用了多少个局部变量，就把这些局部变量所占变量槽数量之和作为max_locals的值，操作数栈和局部变量表直接决定一个该方法的栈帧所耗费的内存，不必要的操作数栈深度和变量槽数量会造成内存的浪费。Java虚拟机的做法是将局
部变量表中的变量槽进行重用，当代码执行超出一个局部变量的作用域时，这个局部变量所占的变量槽可以被其他局部变量所使用，Javac编译器会根据变量的作用域来分配变量槽给各个变量使用，根据同时生存的最大局部变量数量和类型计算出max_locals的大小。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>code_length:字节码长度
&lt;ul>
&lt;li>u4类型的长度值，理论上可以达到2的32次幂，《Java虚拟机规范》限制方法不允许超过65535条字节码指令，即它实际只使用了u2的长度。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>code:存储字节码指令的一系列字节流。
&lt;ul>
&lt;li>字节码指令:每个指令就是一个u1类型的单字节，当虚拟机读取到code中的一个字节码时，就可以对应找出这个字节码代表的是什么指令，并且可以知道这条指令后面是否需要跟随参数，以及后续的参数应当如何解析。一个u1数据类型的取值范围为0x00～0xFF，对应十进制的0～255，也就是一共可以表达256条指令。Code属性是Class文件中最重要的一个属性，如果把一个Java程序中的信息分为代码（Code，方法体里面的Java代码）和元数据（Metadata，包括类、字段、方法定义及其他信息）两部分，那么在整个Class文件里，Code属性用于描述代码，所有的其他数据项目都用于描述元数据。&lt;/li>
&lt;li>异常表:字节码指令之后
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>start_pc&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>end_pc&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>handler_pc&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>catch_type&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>Exceptions属性&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>列举出方法中可能抛出的受查异常(Checked Exceptions),也就是方法描述时在throws关键字后面列举的异常&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>number_of_exceptions&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>exception_index_table&lt;/td>
&lt;td>number_of_exceptions&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol start="3">
&lt;li>LineNumberTable属性&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>描述Java源码行号与字节码行号（字节码的偏移量）之间的对应关系&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>line_number_table_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>line_number_info&lt;/td>
&lt;td>line_number_table&lt;/td>
&lt;td>line_number_table_length&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol start="4">
&lt;li>LocalVariableTable及LocalVariableTypeTable属性&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>描述栈帧中局部变量表的变量与Java源码中定义的变量之间的关系&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>local_variable_table_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>local_variable_info&lt;/td>
&lt;td>local_variable_table&lt;/td>
&lt;td>local_variable_table_length&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>local_variable_info属性结构
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>start_pc&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>descriptor_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;ol start="5">
&lt;li>SourceFile及SourceDebugExtension属性&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>记录生成这个Class文件的源码文件名称&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>sourcefile_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol start="6">
&lt;li>ConstantValue属性&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>通知虚拟机自动为静态变量赋值&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>constantvalue_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol start="7">
&lt;li>InnerClasses属性&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>记录内部类与宿主类之间的关联&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>number_of_classes&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>inner_classes_info&lt;/td>
&lt;td>inner_classes&lt;/td>
&lt;td>number_of_classes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>inner_classes_info属性结构
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>inner_class_info_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>outer_class_info_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>inner_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>inner_class_access_flags&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;ol start="8">
&lt;li>Deprecated及Synthetic属性&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>都属于标志类型的布尔属性&lt;br>
Deprecated属性用于表示某个类、字段或者方法，已经被程序作者定为不再推荐使用
Synthetic属性代表此字段或者方法并不是由Java源码直接产生的，而是由编译器自行添加的，也可以设置ACC_SYNTHETIC标志位&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol start="9">
&lt;li>StackMapTable属性&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>复杂的变长属性，位于Code属性的属性表中。这个属性会在虚拟机类加载的字节码验证阶段被新类型检查验证器（Type Checker）使用（详见第7章字节码验证部分），目的在于代替以前比较消耗性能的基于数据流分析的类型推导验证器。&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>number_of_entries&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stack_map_frame&lt;/td>
&lt;td>stack_map_frame_entries&lt;/td>
&lt;td>number_of_entries&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol start="10">
&lt;li>Signature属性&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>记录泛型签名信息&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>signature_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol start="11">
&lt;li>BootstrapMethods属性&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>复杂的变长属性，位于类文件的属性表中。这个属性用于保存invokedynamic指令引用的引导方法限定符&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>num_bootstrap_methods&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bootstrap_method&lt;/td>
&lt;td>bootstrap_methods&lt;/td>
&lt;td>num_bootstrap_methods&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>bootstrap_method属性结构
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>bootstrap_method_ref_&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>num_bootstrap_arguments&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>bootstrap_arguments&lt;/td>
&lt;td>num_bootstrap_arguments&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;ol start="12">
&lt;li>MethodParameters属性&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>记录方法的各个形参名称和信息&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u1&lt;/td>
&lt;td>parameters_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>parameter&lt;/td>
&lt;td>parameters&lt;/td>
&lt;td>parameters_count&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>parameter属性结构
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>access_flags&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;ol start="13">
&lt;li>模块化相关属性&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>Module、ModulePackages和ModuleMainClass三个属性用于支持Java模块化相关功能&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>Module:复杂的变长属性，除了表示该模块的名称、版本、标志信息以外，还存储了这个模块requires、exports、opens、uses和provides定义的全部内容&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>module_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>module_flags&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>module_version_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>requires_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>require&lt;/td>
&lt;td>requires&lt;/td>
&lt;td>requires_count&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>exports_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>export&lt;/td>
&lt;td>exports&lt;/td>
&lt;td>exports_count&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>opens_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>open&lt;/td>
&lt;td>opens&lt;/td>
&lt;td>opens_count&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>uses_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>use&lt;/td>
&lt;td>uses_index&lt;/td>
&lt;td>uses_count&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>provides_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provide&lt;/td>
&lt;td>provides&lt;/td>
&lt;td>provides_count&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>exports属性结构&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>exports_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>exports_flags&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>exports_to_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>export&lt;/td>
&lt;td>exports_to_index&lt;/td>
&lt;td>exports_to_count&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>ModulePackages:变长属性，它用于描述该模块中所有的包，不论是不是被export或者open的&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>package_count&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>package_index&lt;/td>
&lt;td>package_count&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>ModuleMainClass:定长属性，用于确定该模块的主类（Main Class）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>main_class_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;ol start="14">
&lt;li>运行时注解相关属性&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>以RuntimeVisibleAnnotations为例:记录了类、字段或方法的声明上记录运行时可见注解，当我们使用反射API来获取类、字段或方法上的注解时，返回值就是通过这个属性来取到的&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>attribute_name_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u4&lt;/td>
&lt;td>attribute_length&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>num_annotations&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>annotation&lt;/td>
&lt;td>annotations&lt;/td>
&lt;td>num_annotations&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>annotation属性结构
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>名称&lt;/th>
&lt;th>数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>type_index&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u2&lt;/td>
&lt;td>num_element_value_pairs&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>element_value_pair&lt;/td>
&lt;td>element_value_pairs&lt;/td>
&lt;td>num_element_value_pairs&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul></description></item><item><title>第4章　虚拟机性能监控、故障处理工具</title><link>https://yzlc.github.io/post/read/jvm/4/</link><pubDate>Tue, 12 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/4/</guid><description>&lt;h2 id="42基础故障处理工具">4.2　基础故障处理工具&lt;/h2>
&lt;h3 id="421jpsjvm-process-status-tool虚拟机进程状况工具">4.2.1　jps（JVM Process Status Tool）：虚拟机进程状况工具&lt;/h3>
&lt;p>命令格式：&lt;code>jps [ options ] [ hostid ]&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>选项&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-q&lt;/td>
&lt;td>只输出LVMID,省略主类的名称&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-m&lt;/td>
&lt;td>输出虚拟机进程启动时传递给主类main()函数的参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-l&lt;/td>
&lt;td>输出主类的全名,如果进程执行的是JAR包,则输出JAR路径&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-v&lt;/td>
&lt;td>输出虚拟机进程启动时的JVM参数&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="422jstatjvm-statistics-monitoring-tool虚拟机统计信息监视工具">4.2.2　jstat（JVM Statistics Monitoring Tool）：虚拟机统计信息监视工具&lt;/h3>
&lt;p>命令格式：&lt;code>jstat [ option vmid [interval[s|ms] [count]] ]&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/4-2.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="423jinfoconfiguration-info-for-javajava配置信息工具">4.2.3　jinfo（Configuration Info for Java）：Java配置信息工具&lt;/h3>
&lt;p>命令格式：&lt;code>jinfo [ option ] pid&lt;/code>&lt;/p>
&lt;h3 id="424jmapmemory-map-for-javajava内存映像工具">4.2.4　jmap（Memory Map for Java）：Java内存映像工具&lt;/h3>
&lt;p>命令格式：&lt;code>jmap [ option ] vmid&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/4-3.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="425jhatjvm-heap-analysis-tool虚拟机堆转储快照分析工具">4.2.5　jhat（JVM Heap Analysis Tool）：虚拟机堆转储快照分析工具&lt;/h3>
&lt;h3 id="426jstackstack-trace-for-javajava堆栈跟踪工具">4.2.6　jstack（Stack Trace for Java）：Java堆栈跟踪工具&lt;/h3>
&lt;p>命令格式：&lt;code>jstack [ option ] vmid&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/4-4.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>第3章　垃圾收集器</title><link>https://yzlc.github.io/post/read/jvm/3.5/</link><pubDate>Sat, 09 May 2020 11:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/3.5/</guid><description>&lt;h2 id="35经典垃圾收集器">3.5　经典垃圾收集器&lt;/h2>
&lt;h3 id="351serial收集器">3.5.1　Serial收集器&lt;/h3>
&lt;blockquote>
&lt;p>单线程,HotSpot虚拟机运行在客户端模式下的默认新生代收集器，对于内存资源受限的环境，它是所有收集器里额外内存消耗（Memory Footprint）最小的,微服务&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/3-7.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="352parnew收集器">3.5.2　ParNew收集器&lt;/h3>
&lt;blockquote>
&lt;p>Serial收集器的多线程并行版本,除了Serial收集器外，目前只有它能与CMS收集器配合工作&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/3-8.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="353parallel-scavenge收集器">3.5.3　Parallel Scavenge收集器&lt;/h3>
&lt;blockquote>
&lt;p>吞吐量优先收集器&lt;/p>
&lt;/blockquote>
&lt;p>吞吐量（Throughput）：处理器用于运行用户代码的时间/处理器总消耗时间
参数-XX：&lt;/p>
&lt;ul>
&lt;li>MaxGCPauseMillis：最大垃圾收集停顿时间,ms&lt;/li>
&lt;li>GCTimeRatio：吞吐量大小,{1/(1+x),默认x=99}&lt;/li>
&lt;li>+UseAdaptiveSizePolicy：自适应的调节策略（GC Ergonomics）&lt;/li>
&lt;/ul>
&lt;h3 id="354serial-old收集器">3.5.4　Serial Old收集器&lt;/h3>
&lt;blockquote>
&lt;p>Serial收集器的老年代版本&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/3-9.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="355parallel-old收集器">3.5.5　Parallel Old收集器&lt;/h3>
&lt;blockquote>
&lt;p>Parallel Scavenge收集器的老年代版本&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/3-10.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="356cms收集器concurrent-mark-sweep">3.5.6　CMS收集器（Concurrent Mark Sweep）&lt;/h3>
&lt;blockquote>
&lt;p>以获取最短回收停顿时间为目标的收集器,B/S系统&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/3-11.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="357garbage-first收集器g1">3.5.7　Garbage First收集器(G1)&lt;/h3>
&lt;blockquote>
&lt;p>使用Region划分内存空间，以及具有优先级的区域回收方式&lt;/p>
&lt;/blockquote>
&lt;p>停顿时间模型（Pause Prediction Model）：在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间大概率不超过N毫秒&lt;/p>
&lt;p>Mixed GC：面向堆内存任何部分来组成回收集（Collection Set，一般简称CSet）进行回收，衡量标准不再是它属于哪个分代，而是哪块内存中存放的垃圾数量最多，回收收益最大&lt;/p>
&lt;p>Region堆内存布局：把连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理.Humongous区域：专门用来存储大对象
&lt;img src="https://yzlc.github.io/images/read/jvm/3-13.jpg"
loading="lazy"
>&lt;/p>
&lt;h2 id="36低延迟垃圾收集器">3.6　低延迟垃圾收集器&lt;/h2>
&lt;h3 id="361shenandoah收集器">3.6.1　Shenandoah收集器&lt;/h3>
&lt;p>并发标记（Concurrent Marking）：与G1一样，遍历对象图，标记出全部可达的对象，时间长短取决于堆中存活对象的数量以及对象图的结构复杂程度。&lt;/p>
&lt;p>并发回收（Concurrent Evacuation）：并发回收阶段是Shenandoah与之前HotSpot中其他收集器的核心差异。在这个阶段，Shenandoah要把回收集里面的存活对象先复制一份到其他未被使用的Region之中。通过读屏障和被称为“Brooks Pointers”的转发指针来解决。并发回收阶段运行的时间长短取决于回收集的大小。&lt;/p>
&lt;p>并发引用更新（Concurrent Update Reference）：真正开始进行引用更新操作，时间长短取决于内存中涉及的引用数量的多少。按照内存物理地址的顺序，线性地搜索出引用类型，把旧值改为新值即可。&lt;/p>
&lt;p>Brooks Pointers：在原有对象布局结构的最前面统一增加一个新的引用字段，在正常不处于并发移动的情况下，该引用指向对象自己&lt;/p>
&lt;ul>
&lt;li>每次对象访问会带来一次额外的转向开销&lt;/li>
&lt;li>并发写入：通过比较并交换（Compare And Swap，CAS）操作来保证并发时对象的访问正确性&lt;/li>
&lt;li>执行频率的问题：通过对象头上的Brooks Pointer来保证并发时原对象与复制对象的访问一致性，要覆盖全部对象访问操作，Shenandoah不得不同时设置读、写屏障去拦截。
&lt;ul>
&lt;li>引用访问屏障（Load Reference Barrier）：只拦截对象中数据类型为引用类型的读写操作，而不去管原生数据类型等其他非引用字段的读写，这能够省去大量对原生类型、对象比较、对象加锁等场景中设置内存屏障所带来的消耗&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="362zgc收集器z-garbage-collector">3.6.2　ZGC收集器(Z Garbage Collector)&lt;/h3>
&lt;blockquote>
&lt;p>基于Region内存布局，（暂时）不设分代，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-整理算法，低延迟为目标&lt;/p>
&lt;/blockquote>
&lt;p>Region：具有动态性——动态创建和销毁，以及动态的区域容量大小&lt;/p>
&lt;ul>
&lt;li>小型Region（Small Region）：容量固定为2MB，用于放置小于256KB的小对象&lt;/li>
&lt;li>中型Region（Medium Region）：容量固定为32MB，用于放置大于等于256KB但小于4MB的对象&lt;/li>
&lt;li>大型Region（Large Region）：容量不固定，可以动态变化，但必须为2MB的整数倍，用于放置4MB或以上的大对象。每个大型Region中只会存放一个大对象，这也预示着虽然名字叫作“大型Region”，但它的实际容量完全有可能小于中型Region，最小容量可低至4MB。大型Region在ZGC的实现中是不会被重分配的，因为复制一个大对象的代价非常高昂&lt;/li>
&lt;/ul>
&lt;p>染色指针技术（Colored Pointer）：把标记信息记在引用对象的指针上，这时，与其说可达性分析是遍历对象图来标记对象，还不如说是遍历“引用图”来标记“引用”了
&lt;img src="https://yzlc.github.io/images/read/jvm/3-20.jpg"
loading="lazy"
>&lt;/p>
&lt;p>ZGC运作过程
&lt;img src="https://yzlc.github.io/images/read/jvm/3-22.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>并发标记（Concurrent Mark）：标记阶段会更新染色指针中的Marked 0、Marked 1标志位&lt;/li>
&lt;li>并发预备重分配（Concurrent Prepare for Relocate）：根据特定的查询条件统计得出本次收集过程要清理哪些Region，将这些Region组成重分配集（Relocation Set）&lt;/li>
&lt;li>并发重分配（Concurrent Relocate）：重分配是ZGC执行过程中的核心阶段，这个过程要把重分配集中的存活对象复制到新的Region上，并为重分配集中的每个Region维护一个转发表（Forward Table），记录从旧对象到新对象的转向关系&lt;/li>
&lt;li>指针的自愈（Self-Healing）：得益于染色指针的支持，ZGC收集器能仅从引用上就明确得知一个对象是否处于重分配集之中，如果用户线程此时并发访问了位于重分配集中的对象，这次访问将会被预置的内存屏障所截获，然后立即根据Region上的转发表记录将访问转发到新复制的对象上，并同时修正更新该引用的值，使其直接指向新对象
&lt;ul>
&lt;li>只有第一次访问旧对象会陷入转发，也就是只慢一次，对比Shenandoah的Brooks转发指针，那是每次对象访问都必须付出的固定开销，简单地说就是每次都慢&lt;/li>
&lt;li>由于染色指针的存在，一旦重分配集中某个Region的存活对象都复制完毕后，这个Region就可以立即释放用于新对象的分配（但是转发表还得留着不能释放掉），哪怕堆中还有很多指向这个对象的未更新指针也没有关系，这些旧指针一旦被使用，它们都是可以自愈的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>并发重映射（Concurrent Remap）：重映射所做的就是修正整个堆中指向重分配集中旧对象的所有引用，这一点从目标角度看是与Shenandoah并发引用更新阶段一样的，但是ZGC的并发重映射并不是一个必须要“迫切”去完成的任务，因为前面说过，即使是旧引用，它也是可以自愈的，最多只是第一次使用时多一次转发和修正操作。重映射清理这些旧引用的主要目的是为了不变慢（还有清理结束后可以释放转发表这样的附带收益），所以说这并不是很“迫切”。因此，ZGC很巧妙地把并发重映射阶段要做的工作，合并到了下一次垃圾收集循环中的并发标记阶段里去完成，反正它们都是要遍历所有对象的，这样合并就节省了一次遍历对象图的开销。一旦所有指针都被修正之后，原来记录新旧对象关系的转发表就可以释放掉了&lt;/li>
&lt;/ul></description></item><item><title>第3章　内存分配策略</title><link>https://yzlc.github.io/post/read/jvm/3/</link><pubDate>Sat, 09 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/3/</guid><description>&lt;h2 id="32对象已死">3.2　对象已死？&lt;/h2>
&lt;h3 id="321引用计数算法">3.2.1　引用计数算法&lt;/h3>
&lt;blockquote>
&lt;p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的&lt;/p>
&lt;/blockquote>
&lt;h3 id="322可达性分析算法">3.2.2　可达性分析算法&lt;/h3>
&lt;blockquote>
&lt;p>通过一系列称为GC Roots的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为引用链（Reference Chain），如果某个对象到GC Roots间没有任何引用链相连，则证明此对象是不可能再被使用的&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/3-1.jpg"
loading="lazy"
>
GC Roots&lt;/p>
&lt;ul>
&lt;li>在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等&lt;/li>
&lt;li>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量&lt;/li>
&lt;li>在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用&lt;/li>
&lt;li>在本地方法栈中JNI（即通常所说的Native方法）引用的对象&lt;/li>
&lt;li>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器&lt;/li>
&lt;li>所有被同步锁（synchronized关键字）持有的对象&lt;/li>
&lt;li>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等&lt;/li>
&lt;/ul>
&lt;h3 id="323再谈引用">3.2.3　再谈引用&lt;/h3>
&lt;p>强引用（Strongly Re-ference）：普遍存在的引用赋值，即类似“Object obj=new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象&lt;/p>
&lt;p>软引用（Soft Reference）：还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常&lt;/p>
&lt;p>弱引用（Weak Reference）：非必须对象，强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象&lt;/p>
&lt;p>虚引用（Phantom Reference）：最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知&lt;/p>
&lt;h3 id="324生存还是死亡">3.2.4　生存还是死亡？&lt;/h3>
&lt;blockquote>
&lt;p>可达性分析 -&amp;gt; 标记 -&amp;gt; F-Queue队列,由Finalizer线程执行finalize() -&amp;gt; 标记 -&amp;gt; 回收&lt;/p>
&lt;/blockquote>
&lt;h3 id="325回收方法区">3.2.5　回收方法区&lt;/h3>
&lt;blockquote>
&lt;p>废弃的常量和不再使用的类型，垃圾收集的性价比比较低&lt;/p>
&lt;/blockquote>
&lt;p>废弃常量：没有任何对象引用常量池中的常量，且虚拟机中也没有其他地方引用这个字面量&lt;/p>
&lt;p>不再使用的类型&lt;/p>
&lt;ul>
&lt;li>该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例&lt;/li>
&lt;li>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的&lt;/li>
&lt;li>该类对应的Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法&lt;/li>
&lt;/ul>
&lt;p>需求场景：在大量使用反射、动态代理、CGLib等字节码框架，动态生成JSP以及OSGi这类频繁自定义类加载器的场景中，通常都需要Java虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力&lt;/p>
&lt;h2 id="33垃圾收集算法">3.3　垃圾收集算法&lt;/h2>
&lt;blockquote>
&lt;p>引用计数式垃圾收集（ReferenceCounting GC）和追踪式垃圾收集（Tracing GC）&lt;/p>
&lt;/blockquote>
&lt;h3 id="331分代收集理论generational-collection">3.3.1　分代收集理论（Generational Collection）&lt;/h3>
&lt;p>弱分代假说（Weak Generational Hypothesis）：绝大多数对象都是朝生夕灭的&lt;/p>
&lt;p>强分代假说（Strong Generational Hypothesis）：熬过越多次垃圾收集过程的对象就越难以消亡&lt;/p>
&lt;p>跨代引用假说（Intergenerational Reference Hypothesis）：跨代引用相对于同代引用来说仅占极少数&lt;/p>
&lt;h3 id="332标记-清除算法mark-sweep">3.3.2　标记-清除算法（Mark-Sweep）&lt;/h3>
&lt;blockquote>
&lt;p>标记出所有需要回收的对象，统一回收掉所有被标记的对象，也可以反过来，标记存活的对象，统一回收所有未被标记的对象&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/3-2.jpg"
loading="lazy"
>
执行效率不稳定：标记和清除两个过程的执行效率随对象数量增长而降低&lt;/p>
&lt;p>内存空间碎片化：空间碎片太多导致分配较大对象时无法找到足够的连续内存而提前触发另一次垃圾收集&lt;/p>
&lt;h3 id="333标记-复制算法">3.3.3　标记-复制算法&lt;/h3>
&lt;p>半区复制（Semispace Copying）：内存按容量划分为大小相等的两块，只使用其中的一块。内存用完了就将存活的对象复制到另外一块上面，再把已使用过的内存空间一次清理掉
&lt;img src="https://yzlc.github.io/images/read/jvm/3-3.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>可用内存缩小为了原来的一半，空间浪费多&lt;/li>
&lt;/ul>
&lt;p>Appel式回收：把新生代分为一块较大的Eden空间和两块较小的Survivor空间，每次分配内存只使用Eden和其中一块Survivor。发生垃圾收集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空间&lt;/p>
&lt;ul>
&lt;li>逃生门：当Survivor空间不足以容纳一次Minor GC之后存活的对象时，就需要依赖其他内存区域（实际上大多就是老年代）进行分配担保（Handle Promotion）&lt;/li>
&lt;/ul>
&lt;h3 id="334标记-整理算法mark-compact">3.3.4　标记-整理算法（Mark-Compact）&lt;/h3>
&lt;blockquote>
&lt;p>让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/3-4.jpg"
loading="lazy"
>&lt;/p>
&lt;h2 id="34hotspot的算法细节实现">3.4　HotSpot的算法细节实现&lt;/h2>
&lt;h3 id="341根节点枚举">3.4.1　根节点枚举&lt;/h3>
&lt;p>枚举根节点时必须要停顿&lt;/p>
&lt;p>不需要一个不漏地检查完所有执行上下文和全局的引用位置，虚拟机有办法直接得到哪些地方存放着对象引用&lt;/p>
&lt;ul>
&lt;li>HotSpot使用OopMap的数据结构来达到这个目的&lt;/li>
&lt;/ul>
&lt;h3 id="342安全点safepoint">3.4.2　安全点（Safepoint）&lt;/h3>
&lt;blockquote>
&lt;p>为了解决引用关系变化的问题，只在“特定的位置”记录OopMap信息&lt;/p>
&lt;/blockquote>
&lt;p>选取标准：是否具有让程序长时间执行的特征,“长时间执行”的最明显特征就是指令序列的复用，例如方法调用、循环跳转、异常跳转等&lt;/p>
&lt;p>方案1：抢先式中断（Preemptive Suspension）：把所有用户线程全部中断，如果发现有用户线程中断的地方不在安全点上，就恢复这条线程执行，让它一会再重新中断，直到跑到安全点上&lt;/p>
&lt;p>方案2：主动式中断（Voluntary Suspension）：设置一个标志位，各个线程轮询，中断标志为真时在最近的安全点上挂起。轮询标志的地方和安全点是重合的，另外还要加上所有创建对象和其他需要在Java堆上分配内存的地方，这是为了检查是否即将要发生垃圾收集，避免没有足够内存分配新对象&lt;/p>
&lt;ul>
&lt;li>HotSpot使用内存保护陷阱的方式，当需要暂停用户线程时，虚拟机把内存页设置为不可读，那线程执行到test指令时就会产生一个自陷异常信号，然后在预先注册的异常处理器中挂起线程实现等待&lt;/li>
&lt;/ul>
&lt;h3 id="343安全区域">3.4.3　安全区域&lt;/h3>
&lt;blockquote>
&lt;p>指能够确保在某一段代码片段之中，引用关系不会发生变化，在这个区域中任意地方开始垃圾收集都是安全的&lt;/p>
&lt;/blockquote>
&lt;p>场景：程序“不执行”的时候(Sleep、Blocked)&lt;/p>
&lt;p>执行安全区域的代码时，首先标识进入了安全区域，虚拟机垃圾收集时不必去管安全区域的线程。离开安全区域时，如果虚拟机没有完成根节点枚举，就必须等待可以离开安全区域的信号&lt;/p>
&lt;h3 id="344记忆集remembered-set与卡表card-table">3.4.4　记忆集（Remembered Set）与卡表（Card Table）&lt;/h3>
&lt;blockquote>
&lt;p>为解决对象跨代引用所带来的问题，避免把整个老年代加进GC Roots扫描范围&lt;br>
记忆集是一种用于记录从非收集区域指向收集区域的指针集合的抽象数据结构&lt;br>
卡表是记忆集的一种具体实现，它定义了记忆集的记录精度、与堆内存的映射关系等&lt;/p>
&lt;/blockquote>
&lt;p>记忆集&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Class&lt;/span> &lt;span class="n">RememberedSet&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Object&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">set&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">OBJECT_INTERGENERATIONAL_REFERENCE_SIZE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>记录精度
&lt;ul>
&lt;li>字长精度：每个记录精确到一个机器字长，该字包含跨代指针&lt;/li>
&lt;li>对象精度：每个记录精确到一个对象，该对象里有字段含有跨代指针&lt;/li>
&lt;li>卡精度(卡表)：每个记录精确到一块内存区域，该区域内有对象含有跨代指针&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>卡表&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">CARD_TABLE&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">this&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>卡页（Card Page）：字节数组CARD_TABLE的每一个元素都对应着其标识的内存区域中一块特定大小的内存块&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/3-5.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty），没有则标识为0。在垃圾收集发生时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，把它们加入GC Roots中一并扫描&lt;/li>
&lt;/ul>
&lt;h3 id="345写屏障write-barrier">3.4.5　写屏障（Write Barrier）&lt;/h3>
&lt;blockquote>
&lt;p>写屏障可以看作在虚拟机层面对“引用类型字段赋值”这个动作的AOP切面，在引用对象赋值时会产生一个环形（Around）通知，供程序执行额外的动作，也就是说赋值的前后都在写屏障的覆盖范畴内。在赋值前的部分的写屏障叫作写前屏障（Pre-Write Barrier），在赋值后的则叫作写后屏障（Post-Write Barrier）&lt;/p>
&lt;/blockquote>
&lt;p>伪共享（False Sharing）：现代中央处理器的缓存系统中是以缓存行（Cache Line）为单位存储的，当多线程修改互相独立的变量时，如果这些变量恰好共享同一个缓存行，就会彼此影响（写回、无效化或者同步）而导致性能降低&lt;/p>
&lt;ul>
&lt;li>解决方案(-XX：+UseCondCardMark)：检查卡表标记，只有当该卡表元素未被标记过时才将其标记为变脏&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">CARD_TABLE&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">this&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CARD_TABLE&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">this&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="346并发的可达性分析">3.4.6　并发的可达性分析&lt;/h3>
&lt;p>三色标记（Tri-color Marking）&lt;/p>
&lt;ul>
&lt;li>白色：表示对象尚未被垃圾收集器访问过。开始的阶段都是白色，结束的阶段代表不可达&lt;/li>
&lt;li>黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接（不经过灰色对象）指向某个白色对象&lt;/li>
&lt;li>灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/%e8%a1%a83-1.jpg"
loading="lazy"
>&lt;/p>
&lt;p>对象消失,当以下两个条件同时满足时&lt;/p>
&lt;ol>
&lt;li>赋值器插入了一条或多条从黑色对象到白色对象的新引用&lt;/li>
&lt;li>赋值器删除了全部从灰色对象到该白色对象的直接或间接引用&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>解决方案(通过写屏障实现)
&lt;ul>
&lt;li>增量更新（Incremental Update）,破坏条件1：当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了&lt;/li>
&lt;li>原始快照（Snapshot At The Beginning，SATB）,破坏条件2：当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>第2章　Java内存区域与内存溢出异常</title><link>https://yzlc.github.io/post/read/jvm/2/</link><pubDate>Fri, 08 May 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/2/</guid><description>&lt;h2 id="22运行时数据区域">2.2　运行时数据区域&lt;/h2>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/jvm/2-1.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="221程序计数器program-counter-register">2.2.1　程序计数器（Program Counter Register）&lt;/h3>
&lt;blockquote>
&lt;p>字节码的行号指示器，程序控制流的指示器（分支、循环、跳转、异常处理、线程恢复等）&lt;/p>
&lt;/blockquote>
&lt;p>记录内容&lt;/p>
&lt;ul>
&lt;li>执行Java方法：记录虚拟机字节码指令地址&lt;/li>
&lt;li>执行本地（Native）方法：值为空（Undefined）&lt;/li>
&lt;/ul>
&lt;p>异常情况&lt;/p>
&lt;ul>
&lt;li>唯一一个没有规定OutOfMemoryError的区域&lt;/li>
&lt;/ul>
&lt;h3 id="222java虚拟机栈java-virtual-machine-stack">2.2.2　Java虚拟机栈（Java Virtual Machine Stack）&lt;/h3>
&lt;blockquote>
&lt;p>Java方法执行的线程内存模型：方法被执行的时候，同步创建一个栈帧（Stack Frame）（存储局部变量表、操作数栈、动态连接、方法出口等信息）。方法执行过程对应栈帧从入栈到出栈的过程&lt;/p>
&lt;/blockquote>
&lt;p>异常情况&lt;/p>
&lt;ul>
&lt;li>StackOverflow：线程请求的栈深度 &amp;gt; 虚拟机允许的深度&lt;/li>
&lt;li>OutOfMemory：栈扩展无法申请到足够的内存时&lt;/li>
&lt;/ul>
&lt;p>局部变量表&lt;/p>
&lt;blockquote>
&lt;p>存放基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型）和returnAddress类型（指向一条字节码指令的地址）&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>存储空间
&lt;ul>
&lt;li>局部变量槽（Slot）：64位的long和double占用两个变量槽，其余的数据类型只占用一个&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>内存分配
&lt;ul>
&lt;li>在编译期完成分配：进入方法时，需要在栈帧中分配的局部变量空间是确定的，方法运行期间不会改变局部变量表的大小(变量槽的数量)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="223本地方法栈native-method-stacks">2.2.3　本地方法栈（Native Method Stacks）&lt;/h3>
&lt;blockquote>
&lt;p>为虚拟机使用到的本地（Native）方法服务&lt;/p>
&lt;/blockquote>
&lt;h3 id="224java堆java-heap">2.2.4　Java堆（Java Heap）&lt;/h3>
&lt;blockquote>
&lt;p>在虚拟机启动时创建，几乎所有的对象实例都在这里分配内存。垃圾收集器管理的内存区域（GC堆（Garbage Collected Heap））&lt;/p>
&lt;/blockquote>
&lt;p>异常情况&lt;/p>
&lt;ul>
&lt;li>OutOfMemory：没有内存完成实例分配，并且堆也无法再扩展&lt;/li>
&lt;/ul>
&lt;h3 id="225方法区method-area">2.2.5　方法区（Method Area）&lt;/h3>
&lt;blockquote>
&lt;p>存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据&lt;/p>
&lt;/blockquote>
&lt;p>异常情况&lt;/p>
&lt;ul>
&lt;li>OutOfMemory：方法区无法满足新的内存分配需求&lt;/li>
&lt;/ul>
&lt;h3 id="226运行时常量池runtime-constant-pool">2.2.6　运行时常量池（Runtime Constant Pool）&lt;/h3>
&lt;blockquote>
&lt;p>方法区的一部分。Class文件中的常量池表（Constant Pool Table），用于存放编译期生成的各种字面量与符号引用，类加载后存放到运行时常量池中&lt;/p>
&lt;/blockquote>
&lt;p>对比Class文件常量池&lt;/p>
&lt;ul>
&lt;li>Class文件的格式有严格规定，运行时常量池没有做任何细节的要求（一般来说，除了保存Class文件中描述的符号引用外，还会把由符号引用翻译出来的直接引用也存储在运行时常量池中）&lt;/li>
&lt;li>运行时常量池具备动态性，运行期间可以将新的常量放入池中，例如String类的intern()方法&lt;/li>
&lt;/ul>
&lt;p>异常情况&lt;/p>
&lt;ul>
&lt;li>OutOfMemory：常量池无法再申请到内存&lt;/li>
&lt;/ul>
&lt;h3 id="227直接内存direct-memory">2.2.7　直接内存（Direct Memory）&lt;/h3>
&lt;blockquote>
&lt;p>不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。使用Native函数库直接分配堆外内存，通过存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作&lt;/p>
&lt;/blockquote>
&lt;p>特点&lt;/p>
&lt;ul>
&lt;li>能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据&lt;/li>
&lt;/ul>
&lt;p>异常情况&lt;/p>
&lt;ul>
&lt;li>OutOfMemory：忽略直接内存，使得各个内存区域总和大于物理内存限制，导致动态扩展&lt;/li>
&lt;/ul>
&lt;h2 id="23hotspot虚拟机对象探秘">2.3　HotSpot虚拟机对象探秘&lt;/h2>
&lt;h3 id="231对象的创建">2.3.1　对象的创建&lt;/h3>
&lt;blockquote>
&lt;p>new -&amp;gt; 检查常量池中类是否已被加载 -&amp;gt; 分配内存 -&amp;gt; 初始化零值 -&amp;gt; 设置对象头 -&amp;gt; 执行构造函数&lt;/p>
&lt;/blockquote>
&lt;p>内存分配方式(由堆是否规整决定)&lt;/p>
&lt;ul>
&lt;li>指针碰撞（Bump The Pointer）：内存规整，使用的放一边，空闲的放一边，中间放指针作为分界点的指示器，分配内存就是把那个指针向空闲空间方向挪动与对象大小相等的距离&lt;/li>
&lt;li>空闲列表（Free List）：内存不规整，维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录&lt;/li>
&lt;/ul>
&lt;p>堆是否规整&lt;/p>
&lt;ul>
&lt;li>使用Serial、ParNew等带压缩整理（Compact）&lt;/li>
&lt;li>使用CMS基于清除（Sweep）算法的收集器&lt;/li>
&lt;/ul>
&lt;p>线程安全&lt;/p>
&lt;ul>
&lt;li>同步处理：CAS配上失败重试的方式保证更新操作的原子性&lt;/li>
&lt;li>按线程划分在不同的空间之中进行：TLAB，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定
&lt;ul>
&lt;li>本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）：每个线程在Java堆中预先分配一小块内存&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>对象头（Object Header）：对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码（真正调hashCode()时计算）、对象的GC分代年龄等&lt;/p>
&lt;h3 id="232对象的内存布局">2.3.2　对象的内存布局&lt;/h3>
&lt;blockquote>
&lt;p>对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）&lt;/p>
&lt;/blockquote>
&lt;p>对象头&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Mark Word：存储对象自身的运行时数据，有着动态定义的数据结构，以便在极小的空间内存储尽量多的数据，根据对象的状态复用自己的存储空间，长度为32个比特(32位)和64个比特(64位)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>存储内容&lt;/th>
&lt;th>标志&lt;/th>
&lt;th>状态&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>对象哈希码、对象分代年龄&lt;/td>
&lt;td>01&lt;/td>
&lt;td>未锁定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指向锁记录的指针&lt;/td>
&lt;td>00&lt;/td>
&lt;td>轻量级锁定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指向重量级锁的指针&lt;/td>
&lt;td>10&lt;/td>
&lt;td>膨胀(重量级锁定)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>空,不需要记录信息&lt;/td>
&lt;td>11&lt;/td>
&lt;td>GC标记&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>偏向线程ID、偏向时间戳、对象分代年龄&lt;/td>
&lt;td>01&lt;/td>
&lt;td>可偏向&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>类型指针：对象指向它的类型元数据的指针，通过指针来确定对象是哪个类的实例&lt;/p>
&lt;ul>
&lt;li>不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身&lt;/li>
&lt;li>数组在对象头中必须有一块用于记录数组长度的数据：元数据信息可以确定Java对象的大小，但如果数组的长度是不确定的，无法通过元数据中的信息推断出数组的大小&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>实例数据：对象真正存储的有效信息，代码中各种类型的字段内容，无论父类继承还是子类定义的字段都记录起来&lt;/p>
&lt;p>对齐填充：占位符的作用。HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍&lt;/p>
&lt;h3 id="233对象的访问定位">2.3.3　对象的访问定位&lt;/h3>
&lt;blockquote>
&lt;p>通过栈上的reference数据来操作堆上的具体对象，主流的访问方式有句柄和直接指针两种&lt;/p>
&lt;/blockquote>
&lt;p>句柄：划分出一块内存来作为句柄池，reference中存储的对象的句柄地址，句柄中包含对象实例数据与类型数据各自具体的地址信息
&lt;img src="https://yzlc.github.io/images/read/jvm/2-2.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>好处： reference中存储的是稳定句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改&lt;/li>
&lt;/ul>
&lt;p>直接指针：必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，只访问对象本身的话，就不需要多一次间接访问的开销
&lt;img src="https://yzlc.github.io/images/read/jvm/2-3.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>好处： 速度更快，节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本&lt;/li>
&lt;/ul></description></item><item><title>第1章　走近Java</title><link>https://yzlc.github.io/post/read/jvm/1/</link><pubDate>Thu, 30 Apr 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/jvm/1/</guid><description>&lt;h2 id="16-实战自己编译jdk">1.6 实战:自己编译JDK&lt;/h2>
&lt;h3 id="161-获取源码">1.6.1 获取源码&lt;/h3>
&lt;p>&lt;a class="link" href="https://hg.openjdk.java.net/jdk/jdk12/" target="_blank" rel="noopener"
>下载&lt;/a> -&amp;gt; browse -&amp;gt; zip&lt;/p>
&lt;h3 id="163-构建编译环境ubuntu">1.6.3 构建编译环境(Ubuntu)&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>工具&lt;/th>
&lt;th>命令&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GCC&lt;/td>
&lt;td>&lt;code>sudo apt-get install build-essential&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FreeType&lt;/td>
&lt;td>&lt;code>sudo apt-get install libfreetype6-dev&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CUPS&lt;/td>
&lt;td>&lt;code>sudo apt-get install libcups2-dev&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>X11&lt;/td>
&lt;td>&lt;code>sudo apt-get install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ALSA&lt;/td>
&lt;td>&lt;code>sudo apt-get install libasound2-dev&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>libffi&lt;/td>
&lt;td>&lt;code>sudo apt-get install libffi-dev&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Autoconf&lt;/td>
&lt;td>&lt;code>sudo apt-get install autoconf&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>openjdk-11&lt;/td>
&lt;td>&lt;code>sudo apt-get install openjdk-11-jdk&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>zip&lt;/td>
&lt;td>&lt;code>sudo apt-get install zip&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>libfontconfig&lt;/td>
&lt;td>&lt;code>sudo apt-get install libfontconfig1-dev&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>切换gcc&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#安装&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install gcc-7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 &lt;span class="m">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo update-alternatives --config gcc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#查看版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gcc -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>切换g++&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#安装&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install g++-7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 &lt;span class="m">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo update-alternatives --config g++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#查看版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">g++ -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="164-进行编译">1.6.4 进行编译&lt;/h3>
&lt;p>常用配置(&lt;code>bash configure --help&lt;/code>)&lt;/p>
&lt;ul>
&lt;li>&lt;code>--with-debug-level=&amp;lt;level&amp;gt;&lt;/code>:编译级别(release, fastdebug, slowdebug),越往后优化少调试信息多&lt;/li>
&lt;li>&lt;code>--enable-debug&lt;/code>:等效于&lt;code>--with-debug-level=fastdebug&lt;/code>&lt;/li>
&lt;li>&lt;code>--with-native-debug-symbols=&amp;lt;method&amp;gt;&lt;/code>:确定调试符号信息的编译方式(none, internal, external, zipped)&lt;/li>
&lt;li>&lt;code>--with-version-string=&amp;lt;string&amp;gt;&lt;/code>:设置编译jdk版本号&lt;/li>
&lt;/ul>
&lt;p>编译配置&lt;code>bash configure --enable-debug --with-jvm-variants=server&lt;/code>&lt;/p>
&lt;p>编译&lt;code>make images&lt;/code>&lt;/p>
&lt;p>检查&lt;code>build/配置名称/jdk/bin/java -version&lt;/code>&lt;/p></description></item><item><title>第5章 优化程序性能</title><link>https://yzlc.github.io/post/read/csapp/5/</link><pubDate>Wed, 29 Apr 2020 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/5/</guid><description>&lt;h2 id="51-优化编译器的能力和局限性">5.1 优化编译器的能力和局限性&lt;/h2>
&lt;h2 id="52-表示程序性能">5.2 表示程序性能&lt;/h2>
&lt;ul>
&lt;li>CPE(Cycles Per Element):每元素的周期数&lt;/li>
&lt;li>循环展开(loop unrolling) 举例:前置和,每次迭代计算两个元素&lt;/li>
&lt;/ul>
&lt;h2 id="53-程序示例">5.3 程序示例&lt;/h2>
&lt;h2 id="54-消除循环的低效率">5.4 消除循环的低效率&lt;/h2>
&lt;h2 id="55-减少过程调用">5.5 减少过程调用&lt;/h2>
&lt;h2 id="56-消除不必要的内存引用">5.6 消除不必要的内存引用&lt;/h2>
&lt;h2 id="57-理解现代处理器">5.7 理解现代处理器&lt;/h2>
&lt;ul>
&lt;li>延迟界限(latency bound):一系列操作必须按严格顺序执行.因为在下一条指令开始前,这条指令必须结束&lt;/li>
&lt;li>吞吐量界限(throughput bound):原始计算能力&lt;/li>
&lt;/ul>
&lt;h3 id="571-整体操作">5.7.1 整体操作&lt;/h3>
&lt;ul>
&lt;li>指令控制单元(Instruction Control Unit,ICU):读指令并根据指令序列生成一组针对数据的基本操作&lt;/li>
&lt;li>执行单元(Execution Unit,EU):执行操作
&lt;img src="https://yzlc.github.io/images/read/csapp/5-11.png"
loading="lazy"
>&lt;/li>
&lt;/ul>
&lt;h3 id="572-功能单元的性能">5.7.2 功能单元的性能&lt;/h3>
&lt;h3 id="573-处理器操作的抽象模型">5.7.3 处理器操作的抽象模型&lt;/h3>
&lt;h2 id="58-循环展开">5.8 循环展开&lt;/h2>
&lt;h2 id="59-提高并行性">5.9 提高并行性&lt;/h2>
&lt;h2 id="510-优化合并代码的结果小结">5.10 优化合并代码的结果小结&lt;/h2>
&lt;h2 id="511-一些限制因素">5.11 一些限制因素&lt;/h2>
&lt;h2 id="512-理解内存性能">5.12 理解内存性能&lt;/h2>
&lt;h2 id="513-应用性能提高技术">5.13 应用:性能提高技术&lt;/h2>
&lt;h2 id="514-确认和消除性能瓶颈">5.14 确认和消除性能瓶颈&lt;/h2></description></item><item><title>3.7 过程</title><link>https://yzlc.github.io/post/read/csapp/3.7/</link><pubDate>Tue, 31 Dec 2019 12:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/3.7/</guid><description>&lt;h2 id="37-过程">3.7 过程&lt;/h2>
&lt;h3 id="371-运行时栈">3.7.1 运行时栈&lt;/h3>
&lt;ul>
&lt;li>x86-64的栈向低地址方向增长，栈指针%rsp指向栈顶元素。减小栈指针分配空间，增加栈指针释放空间&lt;/li>
&lt;li>当x86-64过程需要的存储空间超出寄存器存放大小，就会在栈上分配空间（栈帧）&lt;/li>
&lt;li>许多函数不需要栈帧（所有局部变量都保存在寄存器，不调用其他函数）（树结构中的叶子过程）&lt;/li>
&lt;/ul>
&lt;h3 id="372-转移控制">3.7.2 转移控制&lt;/h3>
&lt;p>P-&amp;gt;Q：call push A（P指令后的地址），PC设为Q；ret pop A，把PC设为A&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>指令&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>call Label&lt;/td>
&lt;td>过程调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>call *Operand&lt;/td>
&lt;td>过程调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ret&lt;/td>
&lt;td>从过程调用中返回&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="373-数据传送">3.7.3 数据传送&lt;/h3>
&lt;p>x86-64中，寄存器最多传递6个整型参数，超过部分栈传递&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作数大小（位）&lt;/th>
&lt;th>参数数量1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;th>6&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>64&lt;/td>
&lt;td>%rdi&lt;/td>
&lt;td>%rsi&lt;/td>
&lt;td>%rdx&lt;/td>
&lt;td>%rcx&lt;/td>
&lt;td>%r8&lt;/td>
&lt;td>%r9&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>32&lt;/td>
&lt;td>%edi&lt;/td>
&lt;td>%esi&lt;/td>
&lt;td>%edx&lt;/td>
&lt;td>%ecx&lt;/td>
&lt;td>%r8d&lt;/td>
&lt;td>%r9d&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16&lt;/td>
&lt;td>%di&lt;/td>
&lt;td>%si&lt;/td>
&lt;td>%dx&lt;/td>
&lt;td>%cx&lt;/td>
&lt;td>%r8w&lt;/td>
&lt;td>%r9w&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>%dil&lt;/td>
&lt;td>%sil&lt;/td>
&lt;td>%dl&lt;/td>
&lt;td>%cl&lt;/td>
&lt;td>%r8b&lt;/td>
&lt;td>%r9b&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="374-栈上的局部存储">3.7.4 栈上的局部存储&lt;/h3>
&lt;ul>
&lt;li>局部数据必须存放在内存的情况
&lt;ul>
&lt;li>寄存器不够存放所有本地数据&lt;/li>
&lt;li>对局部变量使用地址运算符‘&amp;amp;’，因此必须能够为它产生一个地址&lt;/li>
&lt;li>某些局部变量是数组或结构，因此必须能够通过数组或结构引用被访问到&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="375-寄存器中的局部存储空间">3.7.5 寄存器中的局部存储空间&lt;/h3>
&lt;ul>
&lt;li>寄存器组是唯一被所有过程共享的资源&lt;/li>
&lt;li>被调用者保存寄存器：%rbx、%rbp和%r12~%r15&lt;/li>
&lt;li>调用者保存寄存器：除了栈指针%rsp&lt;/li>
&lt;/ul>
&lt;h3 id="376-递归过程">3.7.6 递归过程&lt;/h3>
&lt;h2 id="38-数组分配和访问">3.8 数组分配和访问&lt;/h2>
&lt;h3 id="381-基本原则">3.8.1 基本原则&lt;/h3>
&lt;p>T A[N]&lt;/p>
&lt;ul>
&lt;li>L：T的大小（字节）&lt;/li>
&lt;li>A：数组开头指针，值为$x_A$&lt;/li>
&lt;li>元素i：存放在地址为$x_A+L·i$的地方&lt;/li>
&lt;/ul>
&lt;h3 id="382-指针运算">3.8.2 指针运算&lt;/h3>
&lt;ul>
&lt;li>&amp;amp;：指针&lt;/li>
&lt;li>*：间接引用指针（值）&lt;/li>
&lt;li>Expr与- &amp;amp;Expr等价&lt;/li>
&lt;/ul>
&lt;h3 id="383-嵌套的数组">3.8.3 嵌套的数组&lt;/h3>
&lt;ul>
&lt;li>数组元素在内存中按照“行优先”的顺序排列&lt;/li>
&lt;li>T D[R][C]
&lt;ul>
&lt;li>D[i][j]的内存地址：&amp;amp;D[i][j] = $x_D$+L(C·i+j)&lt;/li>
&lt;li>L：数据类型T大小（字节）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="384-定长数组">3.8.4 定长数组&lt;/h3>
&lt;h3 id="385-变长数组">3.8.5 变长数组&lt;/h3>
&lt;h2 id="39-异质的数据结构">3.9 异质的数据结构&lt;/h2>
&lt;h3 id="391-结构">3.9.1 结构&lt;/h3>
&lt;h3 id="392-联合">3.9.2 联合&lt;/h3>
&lt;h3 id="393-数据对齐">3.9.3 数据对齐&lt;/h3>
&lt;h2 id="310-在机器级程序中将控制与数据结合起来">3.10 在机器级程序中将控制与数据结合起来&lt;/h2>
&lt;h3 id="3101-理解指针">3.10.1 理解指针&lt;/h3>
&lt;ul>
&lt;li>每个指针都对应一个类型。例：
&lt;ul>
&lt;li>&lt;code>int *ip&lt;/code>：int类型指针&lt;/li>
&lt;li>&lt;code>char **cpp&lt;/code>：char*类型指针&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>每个指针都有一个值(类型对象的地址)。NULL(0)值表示没指向任何地方&lt;/li>
&lt;li>指针用&lt;code>&amp;amp;&lt;/code>运算符创建
&lt;ul>
&lt;li>lvalue：可以出现在赋值语句左边的表达式&lt;/li>
&lt;li>这个运算符可以应用到lvalue类的C表达式上&lt;/li>
&lt;li>机器代码常常用leaq指令(计算内存引用地址)实现&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>*&lt;/code>操作符用于间接引用指针
&lt;ul>
&lt;li>结果是一个值&lt;/li>
&lt;li>用内存引用实现：要么是存储到指定地址，要么是从指定地址读取&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数组与指针紧密联系
&lt;ul>
&lt;li>数组名字可以像指针变量一样引用但不能修改&lt;/li>
&lt;li>数组引用(&lt;code>a[3]&lt;/code>)与指针运算和间接引用(&lt;code>*(a + 3)&lt;/code>)有一样的效果
&lt;ul>
&lt;li>数组引用和指针运算都需要用对象大小对偏移量进行伸缩&lt;/li>
&lt;li>当我们写表达式p + i,这里指针p的值为$p$,得到的地址计算为$p+L·i$，$L$是与p相关联的数据类型的大小&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>指针也可以指向函数(值是该函数机器代码表示中第一条指令的地址)
&lt;ol>
&lt;li>定义函数：&lt;br>
&lt;code>int fun(int x,int *p);&lt;/code>&lt;/li>
&lt;li>声明指针并赋值：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//括号是必须的，防止被解读成(int *) fp(int,int *);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">fp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fun&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>调用：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="3102-应用使用gdb调试器">3.10.2 应用：使用GDB调试器&lt;/h3>
&lt;h3 id="3103-内存越界引用和缓冲区溢出">3.10.3 内存越界引用和缓冲区溢出&lt;/h3>
&lt;h3 id="3104-对抗缓冲区溢出攻击">3.10.4 对抗缓冲区溢出攻击&lt;/h3>
&lt;ol>
&lt;li>栈随机化&lt;/li>
&lt;li>栈破坏检测&lt;/li>
&lt;li>限制可执行代码区域&lt;/li>
&lt;/ol>
&lt;h3 id="3105-支持变长栈帧">3.10.5 支持变长栈帧&lt;/h3>
&lt;h2 id="311-浮点代码">3.11 浮点代码&lt;/h2></description></item><item><title>3.6 控制</title><link>https://yzlc.github.io/post/read/csapp/3.6/</link><pubDate>Tue, 31 Dec 2019 11:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/3.6/</guid><description>&lt;h2 id="36-控制">3.6 控制&lt;/h2>
&lt;h3 id="361-条件码">3.6.1 条件码&lt;/h3>
&lt;ul>
&lt;li>CF：进位。无符号溢出&lt;/li>
&lt;li>ZF：零&lt;/li>
&lt;li>SF：符号。负数&lt;/li>
&lt;li>OF：溢出。补码溢出&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>指令&lt;/th>
&lt;th>基于&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CMP S1，S2&lt;/td>
&lt;td>S2-S1&lt;/td>
&lt;td>比较&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TEST S1，S2&lt;/td>
&lt;td>S1&amp;amp;S2&lt;/td>
&lt;td>测试&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="362-访问条件码">3.6.2 访问条件码&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>指令&lt;/th>
&lt;th>同义名&lt;/th>
&lt;th>效果&lt;/th>
&lt;th>设置条件&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>sete D&lt;/td>
&lt;td>setz&lt;/td>
&lt;td>D&amp;lt;——ZF&lt;/td>
&lt;td>相等/零&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>setne D&lt;/td>
&lt;td>setnz&lt;/td>
&lt;td>D&amp;lt;——~ZF&lt;/td>
&lt;td>不等/非零&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sets D&lt;/td>
&lt;td>&lt;/td>
&lt;td>D&amp;lt;——SF&lt;/td>
&lt;td>负数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>setns D&lt;/td>
&lt;td>&lt;/td>
&lt;td>D&amp;lt;——~SF&lt;/td>
&lt;td>非负数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>setg D&lt;/td>
&lt;td>setnle&lt;/td>
&lt;td>D&amp;lt;——~(SF^OF)&amp;amp;~ZF&lt;/td>
&lt;td>大于(有符号&amp;gt;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>setge D&lt;/td>
&lt;td>setnl&lt;/td>
&lt;td>D&amp;lt;——~(SF^OF)&lt;/td>
&lt;td>大于等于(有符号&amp;gt;=)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>setl D&lt;/td>
&lt;td>setnge&lt;/td>
&lt;td>D&amp;lt;——SF^OF&lt;/td>
&lt;td>小于(有符号&amp;lt;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>setle D&lt;/td>
&lt;td>setng&lt;/td>
&lt;td>D&amp;lt;——(SF^OF)|ZF&lt;/td>
&lt;td>小于等于(有符号&amp;lt;=)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>seta D&lt;/td>
&lt;td>setnbe&lt;/td>
&lt;td>D&amp;lt;——~CF&amp;amp;~ZF&lt;/td>
&lt;td>超过(无符号&amp;gt;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>setae D&lt;/td>
&lt;td>setnb&lt;/td>
&lt;td>D&amp;lt;——~CF&lt;/td>
&lt;td>超过或相等(无符号&amp;gt;=)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>setb D&lt;/td>
&lt;td>setnae&lt;/td>
&lt;td>D&amp;lt;——CF&lt;/td>
&lt;td>低于(无符号&amp;lt;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>setbe D&lt;/td>
&lt;td>setna&lt;/td>
&lt;td>D&amp;lt;——CF|ZF&lt;/td>
&lt;td>低于或相等(无符号&amp;lt;=)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="363-跳转指令">3.6.3 跳转指令&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>指令&lt;/th>
&lt;th>同义名&lt;/th>
&lt;th>跳转条件&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>jmp Label&lt;/td>
&lt;td>&lt;/td>
&lt;td>1&lt;/td>
&lt;td>直接跳转&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jmp *Operand&lt;/td>
&lt;td>&lt;/td>
&lt;td>1&lt;/td>
&lt;td>间接跳转&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>je Label&lt;/td>
&lt;td>jz&lt;/td>
&lt;td>ZF&lt;/td>
&lt;td>相等/零&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jne Label&lt;/td>
&lt;td>jnz&lt;/td>
&lt;td>~ZF&lt;/td>
&lt;td>不相等/非零&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>js Label&lt;/td>
&lt;td>&lt;/td>
&lt;td>SF&lt;/td>
&lt;td>负数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jns Label&lt;/td>
&lt;td>&lt;/td>
&lt;td>~SF&lt;/td>
&lt;td>非负数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jg Label&lt;/td>
&lt;td>jnle&lt;/td>
&lt;td>~(SF^OF)&amp;amp;~ZF&lt;/td>
&lt;td>大于(有符号&amp;gt;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jge Label&lt;/td>
&lt;td>jnl&lt;/td>
&lt;td>~(SF^OF)&lt;/td>
&lt;td>大于等于(有符号&amp;gt;=)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jl Label&lt;/td>
&lt;td>jnge&lt;/td>
&lt;td>~SF^OF&lt;/td>
&lt;td>小于(有符号&amp;lt;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jle Label&lt;/td>
&lt;td>jng&lt;/td>
&lt;td>(SF^OF)&lt;/td>
&lt;td>小于等于(有符号&amp;lt;=)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ja Label&lt;/td>
&lt;td>jnbe&lt;/td>
&lt;td>~CF&amp;amp;~ZF&lt;/td>
&lt;td>超过(无符号&amp;gt;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jae Label&lt;/td>
&lt;td>jnb&lt;/td>
&lt;td>~CF&lt;/td>
&lt;td>超过或相等(无符号&amp;gt;=)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jb Label&lt;/td>
&lt;td>jnae&lt;/td>
&lt;td>CF&lt;/td>
&lt;td>低于(无符号&amp;lt;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jbe Label&lt;/td>
&lt;td>jna&lt;/td>
&lt;td>CF|ZF&lt;/td>
&lt;td>低于或相等(无符号&amp;lt;=)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="364-跳转指令的编码">3.6.4 跳转指令的编码&lt;/h3>
&lt;ul>
&lt;li>PC-relative：将目标指令的地址与紧跟在跳转指令后面那条指令的地址之间的差作为编码&lt;/li>
&lt;/ul>
&lt;h3 id="365-用条件控制来实现条件分支">3.6.5 用条件控制来实现条件分支&lt;/h3>
&lt;p>C：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">then&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">statement&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">statement&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>汇编：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> t = test-expr;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(!t)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goto false;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> then-statement
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goto done;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">false:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else-statement
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">done:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="366-用条件传送来实现条件分支">3.6.6 用条件传送来实现条件分支&lt;/h3>
&lt;ul>
&lt;li>使用控制(低效)：条件满足时，沿着一条路径执行，不满足时走另一条路径&lt;/li>
&lt;li>使用数据(受限)：计算一个条件操作的两种结果，然后根据条件是否满足从中选取一个&lt;/li>
&lt;/ul>
&lt;h3 id="367-循环">3.6.7 循环&lt;/h3>
&lt;ol>
&lt;li>do-while
C：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">body&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">statement&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>汇编：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">loop:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body-statement
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> t = test-expr;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(t)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goto loop;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>while
C：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">body&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">statement&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>汇编：
方法1：跳转到中间
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> goto test;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">loop:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body-statement
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">test:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> t = test-expr;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(t)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goto loop;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>方法2(较高优化等级编译时)：guarded-do(先判断再做do-while)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">t = test-expr;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if(!t)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goto done;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">loop:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body-statement
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> t = test-expr;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(t)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goto loop;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">done;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>for
C：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">init&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">expr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">body&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">statement&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>汇编：
方法1：跳转到中间
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">init-expr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">goto test;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">loop:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body-statement
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> update-expr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">test:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> t = test-expr;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(t)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goto loop;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>方法2(较高优化等级编译时)：guarded-do(先判断再做do-while)
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">init-expr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">t = test-expr;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if(!t)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goto done;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">loop:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body-statement
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> update-expr;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> t = test-expr;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(t)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goto loop;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">done;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="368-switch语句">3.6.8 switch语句&lt;/h3>
&lt;blockquote>
&lt;p>根据一个整数索引值进行多重分支&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>跳转表(开关数量多，值范围小)：执行开关语句的时间与开关情况的数量无关&lt;/li>
&lt;/ul></description></item><item><title>第3章 程序的机器级表示</title><link>https://yzlc.github.io/post/read/csapp/3/</link><pubDate>Tue, 31 Dec 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/3/</guid><description>&lt;h2 id="32-程序编码">3.2 程序编码&lt;/h2>
&lt;h3 id="321-机器级代码">3.2.1 机器级代码&lt;/h3>
&lt;ul>
&lt;li>程序计数器（PC，在x86-64中用%rip表示）：给出要执行的下一条指令在内存中的地址&lt;/li>
&lt;li>整数寄存器：包含16个命名位置，分别存储64位值。可以存储地址或整数。有的寄存器用来记录程序状态，其他的保存临时数据&lt;/li>
&lt;li>条件码寄存器：保存最近执行的算术或逻辑指令状态。用来实现控制或数据流中的条件变化&lt;/li>
&lt;li>一组向量寄存器可以存放一个或多个整数或浮点数&lt;/li>
&lt;li>程序内存（虚拟地址寻址）：
&lt;ul>
&lt;li>程序的可执行机器代码&lt;/li>
&lt;li>操作系统需要的信息&lt;/li>
&lt;li>用来管理过程调用和返回的运行时栈&lt;/li>
&lt;li>用户分配的内存块&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="322-代码示例">3.2.2 代码示例&lt;/h3>
&lt;ul>
&lt;li>机器代码和它的反汇编表示的特性
&lt;ul>
&lt;li>x86-64指令长度1-15字节不等。常用指令及操作数较少的指令所需字节数少&lt;/li>
&lt;li>设计指令格式的方式：从某个给定位置开始，可以将字节唯一地解码成机器指令&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="33-数据格式">3.3 数据格式&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>C声明&lt;/th>
&lt;th>Intel数据类型&lt;/th>
&lt;th>汇编代码后缀&lt;/th>
&lt;th>大小(字节)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>char&lt;/td>
&lt;td>字节&lt;/td>
&lt;td>b&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>short&lt;/td>
&lt;td>字(word)&lt;/td>
&lt;td>w&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int&lt;/td>
&lt;td>双字(long word)&lt;/td>
&lt;td>l&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>long&lt;/td>
&lt;td>四字(quad words)&lt;/td>
&lt;td>q&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>char-&lt;/td>
&lt;td>四字&lt;/td>
&lt;td>q&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>float&lt;/td>
&lt;td>单精度&lt;/td>
&lt;td>s&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double&lt;/td>
&lt;td>双精度&lt;/td>
&lt;td>l&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>任何指针都是8字节&lt;/li>
&lt;/ul>
&lt;h2 id="34-访问信息">3.4 访问信息&lt;/h2>
&lt;h3 id="341-操作数指示符">3.4.1 操作数指示符&lt;/h3>
&lt;ul>
&lt;li>立即数(immediate)：
&lt;ul>
&lt;li>语法：$Imm&lt;/li>
&lt;li>操作数值：Imm(常数)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>寄存器(register)：
&lt;ul>
&lt;li>语法：$r_a$&lt;/li>
&lt;li>操作数值：$R[r_a]$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>内存引用
&lt;ul>
&lt;li>语法：$Imm(r_b,r_i,s)$&lt;/li>
&lt;li>Imm：立即数偏移&lt;/li>
&lt;li>$r_b$：基址寄存器&lt;/li>
&lt;li>$r_i$：变址寄存器&lt;/li>
&lt;li>s：比例因子，必须是1、2、4、8&lt;/li>
&lt;li>操作数值：$M[Imm+R[r_b]+R[r_i]·s]$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="342-数据传送指令">3.4.2 数据传送指令&lt;/h3>
&lt;ul>
&lt;li>两个操作数不能都指向内存$Imm(r_b,r_i,s)$位置&lt;/li>
&lt;li>后缀大小与内存部分无关&lt;/li>
&lt;li>MOV(S,D)：
&lt;ul>
&lt;li>S(源)：立即数，存储在寄存器/内存&lt;/li>
&lt;li>D(目的位置)：寄存器/内存地址&lt;/li>
&lt;li>movl(S——&amp;gt;寄存器)：把该寄存器的高位4字节设置为0&lt;/li>
&lt;li>movabsq(绝对)：(S(64位)——&amp;gt;D(寄存器))&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>MOVZ(S(小),R(大))：R&amp;lt;——零扩展(S)&lt;/li>
&lt;li>MOVS(S(小),R(大))：R&amp;lt;——符号扩展(S)
&lt;ul>
&lt;li>cltq：只用于寄存器%eax和%rax&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="344-压入和弹出栈数据">3.4.4 压入和弹出栈数据&lt;/h3>
&lt;ul>
&lt;li>pushq：入栈，指针-8&lt;/li>
&lt;li>popq：出栈，指针+8&lt;/li>
&lt;/ul>
&lt;h2 id="35-算术和逻辑操作">3.5 算术和逻辑操作&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>指令&lt;/th>
&lt;th>效果&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>leaq S，D&lt;/td>
&lt;td>D &amp;lt;—— &amp;amp;S&lt;/td>
&lt;td>加载有效地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>INC D&lt;/td>
&lt;td>D &amp;lt;—— D+1&lt;/td>
&lt;td>加1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DEC D&lt;/td>
&lt;td>D &amp;lt;—— D-1&lt;/td>
&lt;td>减l&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NEG D&lt;/td>
&lt;td>D &amp;lt;—— -D&lt;/td>
&lt;td>取负&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NOT D&lt;/td>
&lt;td>D &amp;lt;—— ~D&lt;/td>
&lt;td>取补&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ADD S，D&lt;/td>
&lt;td>D &amp;lt;—— D+S&lt;/td>
&lt;td>加&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SUB S，D&lt;/td>
&lt;td>D &amp;lt;—— D-S&lt;/td>
&lt;td>减&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IMUL S，D&lt;/td>
&lt;td>D &amp;lt;—— D*S&lt;/td>
&lt;td>乘&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>XOR S，D&lt;/td>
&lt;td>D &amp;lt;—— D^S&lt;/td>
&lt;td>异或&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OR S，D&lt;/td>
&lt;td>D &amp;lt;—— D|S&lt;/td>
&lt;td>或&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AND S，D&lt;/td>
&lt;td>D &amp;lt;—— D&amp;amp;S&lt;/td>
&lt;td>与&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SAL K，D&lt;/td>
&lt;td>D &amp;lt;—— D&amp;laquo;K&lt;/td>
&lt;td>左移&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SHL K，D&lt;/td>
&lt;td>D &amp;lt;—— D&amp;laquo;K&lt;/td>
&lt;td>左移（等同于SAL）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SAR K，D&lt;/td>
&lt;td>D &amp;lt;—— D&amp;raquo;$_A$K&lt;/td>
&lt;td>算术右移&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SHR K，D&lt;/td>
&lt;td>D &amp;lt;—— D&amp;raquo;$_L$K&lt;/td>
&lt;td>逻辑右移&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="351-加载有效地址">3.5.1 加载有效地址&lt;/h3>
&lt;blockquote>
&lt;p>leaq（load effective address），movq的变形&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>可以执行加法和有限乘法&lt;/li>
&lt;/ul>
&lt;h3 id="355-特殊的算术操作">3.5.5 特殊的算术操作&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>指令&lt;/th>
&lt;th>效果&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>imulq S&lt;/td>
&lt;td>R[%rdx]：R[%rax]&amp;lt;——S*R[%rax]&lt;/td>
&lt;td>有符号全乘法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mulq S&lt;/td>
&lt;td>R[%rdx]：R[%rax]&amp;lt;——S*R[%rax]&lt;/td>
&lt;td>无符号全乘法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>clto&lt;/td>
&lt;td>R[%rdx]：R[%rax]&amp;lt;——符号扩展(R[%rax])&lt;/td>
&lt;td>转换为八字&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>idivq S&lt;/td>
&lt;td>R[%rdx]&amp;lt;——R[%rdx]：R[%rax] mod/÷ S&lt;/td>
&lt;td>有符号除法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>divq S&lt;/td>
&lt;td>R[%rdx]&amp;lt;——R[%rdx]：R[%rax] mod/÷ S&lt;/td>
&lt;td>无符号除法&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>第2章 信息的表示和处理</title><link>https://yzlc.github.io/post/read/csapp/2/</link><pubDate>Mon, 30 Dec 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/2/</guid><description>&lt;h2 id="21-信息存储">2.1 信息存储&lt;/h2>
&lt;h3 id="211-十六进制表示法">2.1.1 十六进制表示法&lt;/h3>
&lt;ul>
&lt;li>二进制 (&lt;code>i+4j,{i∈[0,3],j个0}&lt;/code>)&amp;lt;——&amp;gt;(4位一拆) 十六进制 (除16)&amp;lt;——&amp;gt;(乘16) 十进制&lt;/li>
&lt;/ul>
&lt;h3 id="212-字数据大小">2.1.2 字数据大小&lt;/h3>
&lt;ul>
&lt;li>计算机字长w位（word size）：指明指针数据的标称大小（nominal size），
决定虚拟地址空间大小0~$2^{w}-1$&lt;/li>
&lt;/ul>
&lt;h3 id="213-寻址和字节顺序">2.1.3 寻址和字节顺序&lt;/h3>
&lt;ul>
&lt;li>多字节对象都被存储为连续的字节序列&lt;/li>
&lt;li>小端法：最低有效字节在前面&lt;/li>
&lt;li>大端法：最高有效字节在前面&lt;/li>
&lt;li>字节顺序产生问题
&lt;ol>
&lt;li>不同机器通过网络传送二进制数据&lt;/li>
&lt;li>阅读表示整数数据的字节序列&lt;/li>
&lt;li>编写规避正常的类型系统的程序&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="217-c语言中的位级运算">2.1.7 C语言中的位级运算&lt;/h3>
&lt;ul>
&lt;li>掩码运算：从一个字中选出的位的集合。&lt;code>x&amp;amp;0xFF&lt;/code>（可移植）&lt;/li>
&lt;/ul>
&lt;h3 id="218-c语言中的逻辑运算">2.1.8 C语言中的逻辑运算&lt;/h3>
&lt;ul>
&lt;li>逻辑运算(&lt;code>&amp;amp;&amp;amp;&lt;/code>、&lt;code>||&lt;/code>、&lt;code>!&lt;/code>) vs 位级运算(&lt;code>&amp;amp;&lt;/code>、&lt;code>|&lt;/code>、&lt;code>~&lt;/code>、&lt;code>^&lt;/code>)：非零 - &lt;code>true&lt;/code>，0 - &lt;code>false&lt;/code>；短路&lt;/li>
&lt;/ul>
&lt;h3 id="219-c语言中的移位运算">2.1.9 C语言中的移位运算&lt;/h3>
&lt;blockquote>
&lt;p>算术右移(补最高位)&lt;br>
逻辑右移(补0)&lt;/p>
&lt;/blockquote>
&lt;h2 id="22-整数表示">2.2 整数表示&lt;/h2>
&lt;h3 id="224-有符号数和无符号数之间的转换">2.2.4 有符号数和无符号数之间的转换&lt;/h3>
&lt;blockquote>
&lt;p>$0≤x≤TMax_w$ $T2U_w(x)=x$ $U2T_w(x)=x$&lt;br>
else $T2U_w(x)=x+2^w$ $U2T_w(x)=x-2^w$&lt;/p>
&lt;/blockquote>
&lt;h3 id="226-扩展一个数字的位表示">2.2.6 扩展一个数字的位表示&lt;/h3>
&lt;blockquote>
&lt;p>无符号数的零扩展&lt;br>
补码数的符号扩展&lt;/p>
&lt;/blockquote>
&lt;h3 id="227-截断数字">2.2.7 截断数字&lt;/h3>
&lt;blockquote>
&lt;p>U2T(B2U % $2^k$)&lt;/p>
&lt;/blockquote>
&lt;h2 id="23-整数运算">2.3 整数运算&lt;/h2>
&lt;blockquote>
&lt;p>w位截断，s=x+y&lt;/p>
&lt;/blockquote>
&lt;h3 id="231-无符号加法">2.3.1 无符号加法&lt;/h3>
&lt;blockquote>
&lt;p>$x+{^u_w}y=
\begin{cases}
x+y, &amp;amp; x+y&amp;lt;2^w &amp;amp; 正常 \
x+y-2^w, &amp;amp; 2^w≤x+y&amp;lt;2^{w+1} &amp;amp; 溢出
\end{cases}$&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>溢出：&lt;code>s&amp;lt;x or s&amp;lt;y&lt;/code>&lt;/li>
&lt;li>求反：$-{^u_w}x=
\begin{cases}
x, &amp;amp; x=0 \
2^w-x, &amp;amp; x&amp;gt;0
\end{cases}$&lt;/li>
&lt;/ul>
&lt;h3 id="232-补码加法">2.3.2 补码加法&lt;/h3>
&lt;blockquote>
&lt;p>$x+{^t_w}y=
\begin{cases}
x+y-2^w, &amp;amp; 2^{w-1}≤x+y &amp;amp; 正溢出 \
x+y, &amp;amp; -2^{w-1}≤x+y&amp;lt;2^{w-1} &amp;amp; 正常 \
x+y+2^w, &amp;amp; x+y&amp;lt;-2^{w-1} &amp;amp; 负溢出
\end{cases}$&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>溢出：x&amp;gt;0,y&amp;gt;0 s≤0 or x&amp;lt;0,y&amp;lt;0 s≥0&lt;/li>
&lt;/ul>
&lt;h3 id="233-补码的非">2.3.3 补码的非&lt;/h3>
&lt;blockquote>
&lt;p>$-{^t_w}x=
\begin{cases}
TMin_w, &amp;amp; x=TMin_w \
-x, &amp;amp; x&amp;gt;TMin_w
\end{cases}$&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>位级表示
&lt;ul>
&lt;li>对每一位求补，再对结果加1&lt;/li>
&lt;li>对位&lt;code>k&lt;/code>左边的所有位取反(&lt;code>k&lt;/code>为最右边1的位置)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="234-无符号乘法">2.3.4 无符号乘法&lt;/h3>
&lt;blockquote>
&lt;p>$x*{^u_w}y=(x·y)mod 2^w$&lt;/p>
&lt;/blockquote>
&lt;h3 id="235-补码乘法">2.3.5 补码乘法&lt;/h3>
&lt;blockquote>
&lt;p>$x*{^t_w}y=U2T_w((x·y)mod 2^w)$&lt;/p>
&lt;/blockquote>
&lt;h3 id="236-乘以常数">2.3.6 乘以常数&lt;/h3>
&lt;blockquote>
&lt;p>$x*{^u_w}2^k，x*{^t_w}2^k$：&lt;code>x&amp;lt;&amp;lt;k&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="237-除以2的幂">2.3.7 除以2的幂&lt;/h3>
&lt;blockquote>
&lt;p>无符号，补码(向下舍入)：&lt;code>x&amp;gt;&amp;gt;k&lt;/code>&lt;br>
补码(向上舍入)：&lt;code>(x+(1&amp;lt;&amp;lt;k)-1)&amp;gt;&amp;gt;k&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h2 id="24-浮点数">2.4 浮点数&lt;/h2>
&lt;h3 id="241-二进制小数">2.4.1 二进制小数&lt;/h3>
&lt;ul>
&lt;li>二进制转小数：$b=\sum_{i=-n}^{m}2^i\times b_i$&lt;/li>
&lt;li>小数($\frac{x}{2^k}$)转二进制：使用&lt;code>x&lt;/code>的二进制表示，小数点插入右边&lt;code>k&lt;/code>位&lt;/li>
&lt;/ul>
&lt;h3 id="242-ieee浮点表示">2.4.2 IEEE浮点表示&lt;/h3>
&lt;blockquote>
&lt;p>$V=(-1)^s\times M\times 2^E$&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>s(符号sign)：1负0正&lt;/li>
&lt;li>M(尾数，n位，frac)：二进制小数，&lt;code>1~2-ε or 0~1-ε&lt;/code>&lt;/li>
&lt;li>E(阶码exponent，k位，exp)：权重$2^E$&lt;/li>
&lt;li>32位：s=1、k=8、n=23&lt;/li>
&lt;li>64位：s=1、k=11、n=52&lt;/li>
&lt;/ul>
&lt;h4 id="情况1规格化的值">情况1：规格化的值&lt;/h4>
&lt;blockquote>
&lt;p>exp≠0&amp;amp;≠255(双精度2047)&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Bias(偏置biased)：$2^{k-1}-1$(单精度-126~127，双精度-1022~1023)&lt;/li>
&lt;li>e(无符号数)：$e_{k-1}···e_1e_0$&lt;/li>
&lt;li>f(frac小数值)：0≤f&amp;lt;1，$0.f_{n-1}···f_1f_0$&lt;/li>
&lt;li>E=e-Bias&lt;/li>
&lt;li>M=1+f&lt;/li>
&lt;/ul>
&lt;h4 id="情况2非规格化的值">情况2：非规格化的值&lt;/h4>
&lt;blockquote>
&lt;p>exp=0&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>E=1-Bias&lt;/li>
&lt;li>M=f&lt;/li>
&lt;li>表示0&lt;/li>
&lt;/ul>
&lt;h4 id="情况3特殊值">情况3：特殊值&lt;/h4>
&lt;blockquote>
&lt;p>exp=1：f=0(无穷)，f≠0(NaN)&lt;/p>
&lt;/blockquote>
&lt;h4 id="整数值转浮点形式">整数值转浮点形式&lt;/h4>
&lt;ol>
&lt;li>将二进制小数左移&lt;/li>
&lt;li>丢弃开头的1，得到小数部分f&lt;/li>
&lt;li>e=E+Bias&lt;/li>
&lt;/ol>
&lt;h3 id="244-舍入">2.4.4 舍入&lt;/h3>
&lt;ul>
&lt;li>向偶数舍入&lt;/li>
&lt;li>向零舍入&lt;/li>
&lt;li>向下舍入&lt;/li>
&lt;li>向上舍入&lt;/li>
&lt;/ul>
&lt;h3 id="245-浮点运算">2.4.5 浮点运算&lt;/h3>
&lt;ul>
&lt;li>不具有结合性、分配性&lt;/li>
&lt;/ul></description></item><item><title>第1章 计算机系统漫游</title><link>https://yzlc.github.io/post/read/csapp/1/</link><pubDate>Sun, 29 Dec 2019 10:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/csapp/1/</guid><description>&lt;h2 id="191-amdahls-law阿姆达尔定律">1.9.1 Amdahl&amp;rsquo;s law（阿姆达尔定律）&lt;/h2>
&lt;blockquote>
&lt;p>要想显著加速整个系统，必须提升全系统中相当大的部分的速度&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>若系统执行某应用程序需要时间为$T_{old}$。
假设系统某部分所需执行时间与该时间的比例为&lt;code>α&lt;/code>，而该部分性能提升比例为&lt;code>k&lt;/code>。
即该部分初始所需时间为$αT_{old}$，现在所需时间为$(αT_{old})/k$&lt;/li>
&lt;li>总的执行时间：$T_{new}=(1-α)T_{old}+(αT_{old})/k=T_{old}[(1-α)+a/k]$&lt;/li>
&lt;li>加速比：$S=T_{old}/T_{new}$为$S=\frac{1}{(1-α)+a/k}$&lt;/li>
&lt;/ul>
&lt;h2 id="192-并发和并行">1.9.2 并发和并行&lt;/h2>
&lt;ul>
&lt;li>并发(concurrency)：一个同时具有多个活动的系统&lt;/li>
&lt;li>并行(parallelism)：用并发来使一个系统运行得更快&lt;/li>
&lt;/ul></description></item><item><title>effective java</title><link>https://yzlc.github.io/post/read/effectivejava/effectivejava/</link><pubDate>Mon, 26 Aug 2019 10:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/effectivejava/effectivejava/</guid><description>&lt;h2 id="1-考虑使用静态工厂方法替代构造方法">1. 考虑使用静态工厂方法替代构造方法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Boolean&lt;/span> &lt;span class="nf">valueOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">return&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">Boolean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TRUE&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">Boolean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">FALSE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="优点">优点&lt;/h3>
&lt;ul>
&lt;li>有名字(BigInteger.probablePrime)&lt;/li>
&lt;li>不用每次调用都创建新对象(Boolean.valueOf(boolean))&lt;/li>
&lt;li>可以返回子类型的对象(Collections)&lt;/li>
&lt;li>返回对象的类可以根据输入参数的不同而不同(EnumSet.noneOf())&lt;/li>
&lt;li>编写包含该方法的类时，返回的对象的类不需要存在(ServiceLoader)&lt;/li>
&lt;/ul>
&lt;h3 id="缺点">缺点&lt;/h3>
&lt;ul>
&lt;li>没有公共或受保护构造方法的类不能被子类化(Collections)&lt;/li>
&lt;li>程序员很难找到它们&lt;/li>
&lt;/ul>
&lt;h2 id="2-当构造方法参数过多时使用-builder-模式">2. 当构造方法参数过多时使用 builder 模式&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://yzlc.github.io/files/read/effectiveJava/2/NutritionFacts.java" >示例下载&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Builder Pattern
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">NutritionFacts&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">calories&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Builder&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">calories&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Builder&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Builder&lt;/span> &lt;span class="nf">calories&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">calories&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">NutritionFacts&lt;/span> &lt;span class="nf">build&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NutritionFacts&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">NutritionFacts&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Builder&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">calories&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">calories&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="3-使用私有构造方法或枚举类实现-singleton-属性">3. 使用私有构造方法或枚举类实现 Singleton 属性&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://yzlc.github.io/files/read/effectiveJava/3/Elvis.java" >示例下载&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Singleton with static factory
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1.防范AccessibleObject.setAccessible：修改构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 2.implements Serializable：声明实例属性transient，并提供readResolve方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Elvis&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Elvis&lt;/span> &lt;span class="n">INSTANCE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Elvis&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">private&lt;/span> &lt;span class="nf">Elvis&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Elvis&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">INSTANCE&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">leaveTheBuilding&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Enum singleton - the preferred approach
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 不适用：单例必须继承 Enum 以外的父类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">Elvis&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="n">INSTANCE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">leaveTheBuilding&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="4-使用私有构造方法执行非实例化">4. 使用私有构造方法执行非实例化&lt;/h2>
&lt;ul>
&lt;li>Java8，可以放接口中&lt;/li>
&lt;/ul>
&lt;h2 id="5-依赖注入优于硬连接资源hardwiring-resources">5. 依赖注入优于硬连接资源（hardwiring resources）&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Dependency injection provides flexibility and testability
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SpellChecker&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Lexicon&lt;/span> &lt;span class="n">dictionary&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">public&lt;/span> &lt;span class="nf">SpellChecker&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Lexicon&lt;/span> &lt;span class="n">dictionary&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">dictionary&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Objects&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">requireNonNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dictionary&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="6-避免创建不必要的对象">6. 避免创建不必要的对象&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Performance can be greatly improved!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">static&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isRomanNumeral&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">matches&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;^(?=.)M*(C[MD]|D?C{0,3})&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">      &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Reusing expensive object for improved performance
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RomanNumerals&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Pattern&lt;/span> &lt;span class="n">ROMAN&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Pattern&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compile&lt;/span>&lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">      &lt;span class="s">&amp;#34;^(?=.)M*(C[MD]|D?C{0,3})&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">      &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">static&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isRomanNumeral&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="k">return&lt;/span> &lt;span class="n">ROMAN&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">matcher&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">matches&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>优先使用基本类型而不是装箱的基本类型，也要注意无意识的自动装箱&lt;/li>
&lt;/ul>
&lt;h2 id="7-消除过期的对象引用">7. 消除过期的对象引用&lt;/h2>
&lt;ul>
&lt;li>类自己管理内存时，应该警惕内存泄漏问题&lt;/li>
&lt;li>缓存&lt;/li>
&lt;li>监听器和其他回调&lt;/li>
&lt;/ul>
&lt;h2 id="8-避免使用-finalizer-和-cleaner-机制">8. 避免使用 Finalizer 和 Cleaner 机制&lt;/h2>
&lt;h2 id="9-使用-try-with-resources-语句替代-try-finally-语句">9. 使用 try-with-resources 语句替代 try-finally 语句&lt;/h2>
&lt;h2 id="10-重写-equals-方法时遵守通用约定">10. 重写 equals 方法时遵守通用约定&lt;/h2>
&lt;h3 id="约定">约定&lt;/h3>
&lt;ul>
&lt;li>自反性：x.equals(x) == true&lt;/li>
&lt;li>对称性：x.equals(y) == true，则y.equals(x) == true&lt;/li>
&lt;li>传递性：x.equals(y) == true &amp;amp;&amp;amp; y.equals(z) == true，则x.equals(z) == true&lt;/li>
&lt;li>一致性：多次调用结果相同（不要依赖不可靠资源） 反例：java.net.URL&lt;/li>
&lt;li>非空性：必须做&lt;code>if(!(o instanceof MyType))&lt;/code>所以不需要&lt;code>if(o == null)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="写法">写法&lt;/h3>
&lt;ol>
&lt;li>if(o == MyType)&lt;/li>
&lt;li>if(!(o instanceof MyType))&lt;/li>
&lt;li>非float或double的基本类型用==比较，引用类型递归调用equals
&lt;ul>
&lt;li>因为存在Float(Double).NaN、-0.0f，使用Float(Double).compare(float,float)&lt;/li>
&lt;li>不使用Float(Double).equals，自动装箱性能差&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="开源框架">开源框架&lt;/h3>
&lt;ul>
&lt;li>谷歌AutoValue&lt;/li>
&lt;/ul>
&lt;h2 id="11-重写-equals-方法时同时也要重写-hashcode-方法">11. 重写 equals 方法时同时也要重写 hashcode 方法&lt;/h2>
&lt;h3 id="约定-1">约定&lt;/h3>
&lt;ol>
&lt;li>重复调用hashCode返回相同的值&lt;/li>
&lt;li>equals(Object)相等，hashCode相等&lt;/li>
&lt;li>为不相等的对象生成不同的结果可能会提高hash tables的性能。&lt;/li>
&lt;/ol>
&lt;h3 id="写法-1">写法&lt;/h3>
&lt;ol>
&lt;li>int result = 重要属性c.hashCode(areaCode);&lt;/li>
&lt;li>result = 31 - result + 剩余的重要属性f.hashCode;
&lt;ol>
&lt;li>基本类型：Type.hashCode(f)&lt;/li>
&lt;li>引用类型：
&lt;ul>
&lt;li>equals递归比较：递归调用hashCode&lt;/li>
&lt;li>否则计算范式：例如字段为空，使用0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数组：
&lt;ul>
&lt;li>部分重要元素：递归计算哈希码并合并&lt;/li>
&lt;li>没有重要的元素：使用不为0常量&lt;/li>
&lt;li>所有元素都重要：使用Arrays.hashCode&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>return result;&lt;/li>
&lt;/ol>
&lt;h2 id="12-始终重写-tostring-方法">12. 始终重写 toString 方法&lt;/h2>
&lt;h2 id="13-谨慎地重写-clone-方法">13. 谨慎地重写 clone 方法&lt;/h2>
&lt;ul>
&lt;li>复制功能最好由构造方法或工厂提供&lt;/li>
&lt;/ul>
&lt;h2 id="14-考虑实现-comparable-接口">14. 考虑实现 Comparable 接口&lt;/h2>
&lt;h3 id="约定-2">约定&lt;/h3>
&lt;ul>
&lt;li>自反性：x.compareTo(y) == 0，则sgn(x.compareTo(z)) == sgn(y.compareTo(z))&lt;/li>
&lt;li>对称性：sgn(x.compareTo(y)) == -sgn(y. compareTo(x))&lt;/li>
&lt;li>传递性：(x.compareTo(y) &amp;gt; 0 &amp;amp;&amp;amp; y.compareTo(z) &amp;gt; 0)，则x.compareTo(z) &amp;gt; 0&lt;/li>
&lt;li>推荐：(x.compareTo(y) == 0) == (x.equals(y))
&lt;ul>
&lt;li>反例：添加new BigDecimal(&amp;ldquo;1.0&amp;rdquo;)和new BigDecimal(&amp;ldquo;1.00&amp;rdquo;)
&lt;ul>
&lt;li>HashSet：调用equals方法 集合中两个元素&lt;/li>
&lt;li>TreeSet：调用compareTo方法 集合中一个元素&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="写法-2">写法&lt;/h3>
&lt;p>在compareTo方法中使用关系运算符「&amp;lt;」和「&amp;gt;」是冗长且容易出错的，不推荐&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Multiple-field `Comparable` with primitive fields
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PhoneNumber&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="n">Short&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">areaCode&lt;/span>&lt;span class="o">](&lt;/span>&lt;span class="n">http&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="c1">//Short.compare(areaCode), pn.areaCode);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>  &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="n">Short&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="o">](&lt;/span>&lt;span class="n">http&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="c1">//Short.compare(prefix), pn.prefix);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>    &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">      &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="n">Short&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">lineNum&lt;/span>&lt;span class="o">](&lt;/span>&lt;span class="n">http&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="c1">//Short.compare(lineNum), pn.lineNum);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Comparable with comparator construction methods
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Comparator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PhoneNumber&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">COMPARATOR&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="n">comparingInt&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="n">PhoneNumber&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">areaCode&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="o">.&lt;/span>&lt;span class="na">thenComparingInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">pn&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">prefix&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="o">.&lt;/span>&lt;span class="na">thenComparingInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">pn&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lineNum&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PhoneNumber&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">return&lt;/span> &lt;span class="n">COMPARATOR&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compare&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">pn&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="15-使类和成员的可访问性最小化">15. 使类和成员的可访问性最小化&lt;/h2>
&lt;ul>
&lt;li>类具有公共静态final数组属性，或返回这样一个属性的访问器是错误的&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Potential security hole!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Thing&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">VALUES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//解决方案
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//方案1：添加一个公共的不可变列表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Thing&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">PRIVATE_VALUES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thing&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">VALUES&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">unmodifiableList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PRIVATE_VALUES&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//方案2：添加一个返回私有数组拷贝
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Thing&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">PRIVATE_VALUES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="o">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Thing&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">values&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">return&lt;/span> &lt;span class="n">PRIVATE_VALUES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">clone&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="16-在公共类中使用访问方法而不是公共属性">16. 在公共类中使用访问方法而不是公共属性&lt;/h2>
&lt;h2 id="17-最小化可变性">17. 最小化可变性&lt;/h2>
&lt;h3 id="不可变类">不可变类&lt;/h3>
&lt;p>String、基本类型包装类、BigInteger、BigDecimal&lt;/p>
&lt;h3 id="规则">规则&lt;/h3>
&lt;ol>
&lt;li>不要提供修改对象状态的方法（也称为 mutators）&lt;/li>
&lt;li>确保这个类不能被继承&lt;/li>
&lt;li>把所有属性设置为 final&lt;/li>
&lt;li>把所有的属性设置为 private&lt;/li>
&lt;li>确保对任何可变组件的互斥访问&lt;/li>
&lt;/ol>
&lt;h3 id="优点-1">优点&lt;/h3>
&lt;ul>
&lt;li>不可变对象很简单&lt;/li>
&lt;li>不可变对象本质上是线程安全的&lt;/li>
&lt;li>不可变对象为其他对象提供了很好的构件&lt;/li>
&lt;li>不可变对象提供了免费的原子失败机制&lt;/li>
&lt;/ul>
&lt;h3 id="缺点-1">缺点&lt;/h3>
&lt;ul>
&lt;li>对于每个不同的值都需要一个单独的对象&lt;/li>
&lt;/ul>
&lt;h3 id="实现">实现&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Immutable class with static factories instead of constructors
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Complex&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">im&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">private&lt;/span> &lt;span class="nf">Complex&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">im&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">re&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">im&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">im&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Complex&lt;/span> &lt;span class="nf">valueOf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">im&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Complex&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">re&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">im&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="c1">// Remainder unchanged
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="18-组合优于继承">18. 组合优于继承&lt;/h2>
&lt;ul>
&lt;li>InstrumentedHashSet&lt;/li>
&lt;li>使用包装类（Decorator）ForwardingSet 改进&lt;/li>
&lt;li>只有「is-a」关系，才能使用继承 反例：Stack extends Vector；Properties extends Hashtable&lt;/li>
&lt;/ul>
&lt;h2 id="19-要么设计继承并提供文档说明要么禁用继承">19. 要么设计继承并提供文档说明，要么禁用继承&lt;/h2>
&lt;h2 id="20-接口优于抽象类">20. 接口优于抽象类&lt;/h2>
&lt;ul>
&lt;li>通过抽象类实现接口默认方法 例如：AbstractList implements List&lt;/li>
&lt;/ul>
&lt;h2 id="21-为后代设计接口">21. 为后代设计接口&lt;/h2>
&lt;h2 id="22-接口仅用来定义类型">22. 接口仅用来定义类型&lt;/h2>
&lt;ul>
&lt;li>常量接口模式是对接口的糟糕使用&lt;/li>
&lt;/ul>
&lt;h2 id="23-类层次结构优于标签类">23. 类层次结构优于标签类&lt;/h2>
&lt;h2 id="24-支持使用静态成员类而不是非静态类">24. 支持使用静态成员类而不是非静态类&lt;/h2>
&lt;ul>
&lt;li>如果你声明了一个不需要访问宿主实例的成员类，总是把 static 修饰符放在它的声明中，使它成为一个静态成员
类，而不是非静态的成员类&lt;/li>
&lt;/ul>
&lt;h2 id="25-将源文件限制为单个顶级类">25. 将源文件限制为单个顶级类&lt;/h2>
&lt;h2 id="26-不要使用原始类型">26. 不要使用原始类型&lt;/h2>
&lt;h2 id="27-消除非检查警告">27. 消除非检查警告&lt;/h2>
&lt;h2 id="28-列表优于数组">28. 列表优于数组&lt;/h2>
&lt;h2 id="29-优先考虑泛型">29. 优先考虑泛型&lt;/h2>
&lt;h2 id="30-优先使用泛型方法">30. 优先使用泛型方法&lt;/h2>
&lt;h2 id="31-使用限定通配符来增加-api-的灵活性">31. 使用限定通配符来增加 API 的灵活性&lt;/h2>
&lt;h2 id="32-合理地结合泛型和可变参数">32. 合理地结合泛型和可变参数&lt;/h2>
&lt;h2 id="33-优先考虑类型安全的异构容器">33. 优先考虑类型安全的异构容器&lt;/h2>
&lt;h2 id="34-使用枚举类型替代整型常量">34. 使用枚举类型替代整型常量&lt;/h2>
&lt;h2 id="35-使用实例属性替代序数">35. 使用实例属性替代序数&lt;/h2>
&lt;h2 id="36-使用-enumset-替代位属性">36. 使用 EnumSet 替代位属性&lt;/h2>
&lt;h2 id="37-使用-enummap-替代序数索引">37. 使用 EnumMap 替代序数索引&lt;/h2>
&lt;h2 id="38-使用接口模拟可扩展的枚举">38. 使用接口模拟可扩展的枚举&lt;/h2>
&lt;h2 id="39-注解优于命名模式">39. 注解优于命名模式&lt;/h2>
&lt;h2 id="40-始终使用-override-注解">40. 始终使用 Override 注解&lt;/h2>
&lt;h2 id="41-使用标记接口定义类型">41. 使用标记接口定义类型&lt;/h2>
&lt;h2 id="42-lambda-表达式优于匿名类">42. lambda 表达式优于匿名类&lt;/h2>
&lt;h2 id="43-方法引用优于-lambda-表达式">43. 方法引用优于 lambda 表达式&lt;/h2>
&lt;h2 id="44-优先使用标准的函数式接口">44. 优先使用标准的函数式接口&lt;/h2>
&lt;h2 id="45-明智审慎地使用-stream">45. 明智审慎地使用 Stream&lt;/h2>
&lt;h2 id="46-优先考虑流中无副作用的函数">46. 优先考虑流中无副作用的函数&lt;/h2>
&lt;h2 id="47-优先使用-collection-而不是-stream-来作为方法的返回类型">47. 优先使用 Collection 而不是 Stream 来作为方法的返回类型&lt;/h2>
&lt;h2 id="48-谨慎使用流并行">48. 谨慎使用流并行&lt;/h2>
&lt;h2 id="49-检查参数有效性">49. 检查参数有效性&lt;/h2>
&lt;ul>
&lt;li>Objects.requireNonNull&lt;/li>
&lt;/ul>
&lt;h2 id="50-必要时进行防御性拷贝">50. 必要时进行防御性拷贝&lt;/h2>
&lt;h2 id="51-仔细设计方法签名">51. 仔细设计方法签名&lt;/h2>
&lt;h2 id="52-明智审慎地使用重载">52. 明智审慎地使用重载&lt;/h2>
&lt;h2 id="53-明智审慎地使用可变参数">53. 明智审慎地使用可变参数&lt;/h2>
&lt;h2 id="54-返回空的数组或集合不要返回-null">54. 返回空的数组或集合，不要返回 null&lt;/h2>
&lt;ul>
&lt;li>Collections.emptyList&lt;/li>
&lt;/ul>
&lt;h2 id="55-明智审慎地返回-optional">55. 明智审慎地返回 Optional&lt;/h2>
&lt;h2 id="56-为所有已公开的-api-元素编写文档注释">56. 为所有已公开的 API 元素编写文档注释&lt;/h2>
&lt;h2 id="57-最小化局部变量的作用域">57. 最小化局部变量的作用域&lt;/h2>
&lt;h2 id="58-for-each-循环优于传统-for-循环">58. for-each 循环优于传统 for 循环&lt;/h2>
&lt;h2 id="59-了解并使用库">59. 了解并使用库&lt;/h2>
&lt;ul>
&lt;li>不使用Random,用ThreadLocalRandom&lt;/li>
&lt;li>每个程序员都应该熟悉 java.lang、java.util 和 java.io 的基础知识及其子包&lt;/li>
&lt;/ul>
&lt;h2 id="60-若需要精确答案就应避免使用-float-和-double-类型">60. 若需要精确答案就应避免使用 float 和 double 类型&lt;/h2>
&lt;h2 id="61-基本数据类型优于包装类">61. 基本数据类型优于包装类&lt;/h2>
&lt;ul>
&lt;li>将 == 操作符应用于包装类型几乎都是错误的&lt;/li>
&lt;/ul>
&lt;h2 id="62-当使用其他类型更合适时应避免使用字符串">62. 当使用其他类型更合适时应避免使用字符串&lt;/h2>
&lt;h2 id="63-当心字符串连接引起的性能问题">63. 当心字符串连接引起的性能问题&lt;/h2>
&lt;h2 id="64-通过接口引用对象">64. 通过接口引用对象&lt;/h2>
&lt;h2 id="65-接口优于反射">65. 接口优于反射&lt;/h2>
&lt;h2 id="66-明智审慎地本地方法">66. 明智审慎地本地方法&lt;/h2>
&lt;h2 id="67-明智审慎地进行优化">67. 明智审慎地进行优化&lt;/h2>
&lt;h2 id="68-遵守被广泛认可的命名约定">68. 遵守被广泛认可的命名约定&lt;/h2>
&lt;ul>
&lt;li>转换对象类型（返回不同类型的独立对象）的实例方法通常称为 toType，例如
toString 或 toArray。返回与接收对象类型不同的视图的方法通常称为 asType，例如 asList。返回与调
用它们的对象具有相同值的基本类型的方法通常称为类型值，例如 intValue。静态工厂的常见名称包括 from、of、
valueOf、instance、getInstance、newInstance、getType 和 newType&lt;/li>
&lt;/ul>
&lt;h2 id="69-只针对异常的情况下才使用异常">69. 只针对异常的情况下才使用异常&lt;/h2>
&lt;h2 id="70-对可恢复的情况使用受检异常对编程错误使用运行时异常">70. 对可恢复的情况使用受检异常，对编程错误使用运行时异常&lt;/h2>
&lt;h2 id="71-避免不必要的使用受检异常">71. 避免不必要的使用受检异常&lt;/h2>
&lt;h2 id="72-优先使用标准的异常">72. 优先使用标准的异常&lt;/h2>
&lt;h2 id="73-抛出与抽象对应的异常">73. 抛出与抽象对应的异常&lt;/h2>
&lt;h2 id="74-每个方法抛出的异常都需要创建文档">74. 每个方法抛出的异常都需要创建文档&lt;/h2>
&lt;h2 id="75-在细节消息中包含失败一捕获信息">75. 在细节消息中包含失败一捕获信息&lt;/h2>
&lt;h2 id="76-保持失败原子性">76. 保持失败原子性&lt;/h2>
&lt;h2 id="77-不要忽略异常">77. 不要忽略异常&lt;/h2>
&lt;h2 id="78-同步访问共享的可变数据">78. 同步访问共享的可变数据&lt;/h2>
&lt;h2 id="79-避免过度同步">79. 避免过度同步&lt;/h2>
&lt;h2 id="80-executor-task-和-stream-优先于线程">80. executor 、task 和 stream 优先于线程&lt;/h2>
&lt;h2 id="81-并发工具优于-wait-和-notify">81. 并发工具优于 wait 和 notify&lt;/h2>
&lt;h2 id="82-文档应包含线程安全属性">82. 文档应包含线程安全属性&lt;/h2>
&lt;h2 id="83-明智审慎的使用延迟初始化">83. 明智审慎的使用延迟初始化&lt;/h2>
&lt;h2 id="84-不要依赖线程调度器">84. 不要依赖线程调度器&lt;/h2>
&lt;h2 id="85-优先选择-java-序列化的替代方案">85. 优先选择 Java 序列化的替代方案&lt;/h2>
&lt;h2 id="86-非常谨慎地实现-serializable">86. 非常谨慎地实现 Serializable&lt;/h2>
&lt;h2 id="87-考虑使用自定义的序列化形式">87. 考虑使用自定义的序列化形式&lt;/h2>
&lt;h2 id="88-保护性的编写-readobject-方法">88. 保护性的编写 readObject 方法&lt;/h2>
&lt;h2 id="89-对于实例控制枚举类型优于-readresolve">89. 对于实例控制，枚举类型优于 readResolve&lt;/h2>
&lt;h2 id="90-考虑用序列化代理代替序列化实例">90. 考虑用序列化代理代替序列化实例&lt;/h2></description></item><item><title>行为型模式</title><link>https://yzlc.github.io/post/read/designpattern/behavioral/</link><pubDate>Mon, 15 Jul 2019 13:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/designpattern/behavioral/</guid><description>&lt;h2 id="策略模式strategy">策略模式（Strategy）&lt;/h2>
&lt;blockquote>
&lt;p>定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/behavioral/strategy.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="优点">优点&lt;/h3>
&lt;ul>
&lt;li>以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合&lt;/li>
&lt;li>Strategy类层次为Context定义了一系列可重用的算法或行为。继承有助于析取出这些算法中的公共功能&lt;/li>
&lt;li>简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试&lt;/li>
&lt;li>不同的行为堆砌在一个类中时，很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个独立的Strategy类中，可以在使用这些行为的类中消除条件语句&lt;/li>
&lt;/ul>
&lt;h3 id="应用">应用&lt;/h3>
&lt;ul>
&lt;li>需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性&lt;/li>
&lt;li>选择所用具体实现的职责由客户端对象承担，并转给策略模式的Context对象&lt;/li>
&lt;/ul>
&lt;h2 id="模板方法模式template-method">模板方法模式（Template Method）&lt;/h2>
&lt;blockquote>
&lt;p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/behavioral/templateMethod.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="优点-1">优点&lt;/h3>
&lt;ul>
&lt;li>把不变行为搬移到超类，去除子类中的重复代码&lt;/li>
&lt;/ul>
&lt;h2 id="观察者模式observer">观察者模式（Observer）&lt;/h2>
&lt;blockquote>
&lt;p>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/behavioral/observer.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="缺点">缺点&lt;/h3>
&lt;ul>
&lt;li>抽象通知者还是依赖抽象观察者&lt;/li>
&lt;li>通知方法被固定&lt;/li>
&lt;/ul>
&lt;h3 id="事件委托">事件委托&lt;/h3>
&lt;blockquote>
&lt;p>委托就是一种引用方法的类型。一旦为委托分配了方法，委托将与该方法具有完全相同的行为。委托方法的使用可以像其他任何方法一样，具有参数和返回值。委托可以看作是对函数的抽象，是函数的’类‘，委托的实例将代表一个具体的函数&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/behavioral/delegate.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="状态模式state">状态模式（State）&lt;/h2>
&lt;blockquote>
&lt;p>当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/behavioral/state.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="优点-2">优点&lt;/h3>
&lt;ul>
&lt;li>将与特定状态相关的行为局部化，并且将不同状态的行为分割开来&lt;/li>
&lt;li>将特定的状态相关的行为都放入一个对象中，由于所有与状态相关的代码都存在于某个ConcreteState中，所以通过定义新的子类可以很容易地增加新的状态和转换，消除庞大的条件分支语句&lt;/li>
&lt;li>状态模式通过把各种状态转移逻辑分布到State的子类之间，来减少相互间的依赖&lt;/li>
&lt;/ul>
&lt;h3 id="应用-1">应用&lt;/h3>
&lt;ul>
&lt;li>当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为&lt;/li>
&lt;/ul>
&lt;h2 id="备忘录模式memento">备忘录模式（Memento）&lt;/h2>
&lt;blockquote>
&lt;p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/behavioral/memento.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="应用-2">应用&lt;/h3>
&lt;ul>
&lt;li>适用于功能比较复杂的，但需要维护或记录属性历史的类&lt;/li>
&lt;/ul>
&lt;h2 id="命令模式command">命令模式（Command）&lt;/h2>
&lt;blockquote>
&lt;p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/behavioral/command.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="优点-3">优点&lt;/h3>
&lt;ul>
&lt;li>把请求一个操作的对象与知道怎么执行一个操作的对象分割开&lt;/li>
&lt;li>容易地设计一个命令队列&lt;/li>
&lt;li>容易地将命令记入日志&lt;/li>
&lt;li>允许接受请求的一方决定是否要否决请求&lt;/li>
&lt;li>容易地实现对请求的撤销和重做&lt;/li>
&lt;li>增加新的具体命令类很容易&lt;/li>
&lt;/ul>
&lt;h3 id="应用-3">应用&lt;/h3>
&lt;ul>
&lt;li>敏捷开发原则告诉我们，不要为代码添加基于猜测的，实际不需要的功能。如果不清楚一个系统是否需要命令模式，一般就不要着急去实现它，事实上，在需要的时候通过重构实现这个模式并不困难，只有在真正需要如撤销/恢复操作等功能时，把原来的代码重构为命令模式才有意义&lt;/li>
&lt;/ul>
&lt;h2 id="迭代器模式iterator">迭代器模式（Iterator）&lt;/h2>
&lt;blockquote>
&lt;p>提供一种方法顺序访问一个聚合对象中各个元素，而又不是暴露该对象的内部表示&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/behavioral/iterator.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="职责链模式chain-of-responsibility">职责链模式（Chain of Responsibility）&lt;/h2>
&lt;blockquote>
&lt;p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/behavioral/chainofResponsibility.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="优点-4">优点&lt;/h3>
&lt;ul>
&lt;li>可简化对象的相互连接，它们仅需保持一个指向其后继者的引用，而不需保持它所有的候选接受者的引用&lt;/li>
&lt;li>可随时地增加或修改处理一个请求的结构。增强了给对象指派职责的灵活性&lt;/li>
&lt;/ul>
&lt;h2 id="中介者模式mediator">中介者模式（Mediator）&lt;/h2>
&lt;blockquote>
&lt;p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/behavioral/mediator.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="优点-5">优点&lt;/h3>
&lt;ul>
&lt;li>减少了各个Colleague的耦合，使得可以独立地改变和复用各个Colleague类和Mediator&lt;/li>
&lt;li>由于把对象如何协作进行了抽象，将中介作为一个独立的概念并将其封装在一个对象中，这样关注的对象就从对象各自本身的行为转移到它们之间的交互上来，也就是站在一个更宏观的角度去看待系统&lt;/li>
&lt;/ul>
&lt;h3 id="缺点-1">缺点&lt;/h3>
&lt;ul>
&lt;li>由于ConcreteMediator控制了集中化，于是就把交互复杂性变为了中介者的复杂性，这就使得中介者会变得比任何一个ConcreteColleague都复杂&lt;/li>
&lt;/ul>
&lt;h3 id="应用-4">应用&lt;/h3>
&lt;ul>
&lt;li>用于一组对象以定义良好但是复杂的方式进行通信的场合&lt;/li>
&lt;li>想定制一个分布在多个类中的行为，而又不想生成太多的子类&lt;/li>
&lt;/ul>
&lt;h2 id="解释器模式interpreter">解释器模式（Interpreter）&lt;/h2>
&lt;blockquote>
&lt;p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/behavioral/interpreter.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="应用-5">应用&lt;/h3>
&lt;ul>
&lt;li>当有一个语言需要解释执行，并且你可将该语言中的句子表示为一个抽象语法树时&lt;/li>
&lt;/ul>
&lt;h3 id="优点-6">优点&lt;/h3>
&lt;ul>
&lt;li>容易地改变和扩展文化，因为该模式使用类来表示文化规则，可使用继承来改变或扩展该文化。也比较容易实现文化，因为定义抽象语法树中各个节点的类的实现大体类似，这些类都易于直接编写&lt;/li>
&lt;/ul>
&lt;h3 id="缺点-2">缺点&lt;/h3>
&lt;ul>
&lt;li>为文法中的每一条规则至少定义了一个类，因此包含许多规则的方法可能难以管理和维护。建议当文化非常复杂时，使用其他的技术如语法分析程序或编译器生成器来处理&lt;/li>
&lt;/ul>
&lt;h2 id="访问者模式visitor">访问者模式（Visitor）&lt;/h2>
&lt;blockquote>
&lt;p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/behavioral/visitor.png"
loading="lazy"
>&lt;/p></description></item><item><title>结构型模式</title><link>https://yzlc.github.io/post/read/designpattern/structural/</link><pubDate>Mon, 15 Jul 2019 12:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/designpattern/structural/</guid><description>&lt;h2 id="装饰模式decorator">装饰模式（Decorator）&lt;/h2>
&lt;blockquote>
&lt;p>动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/structural/decorator.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="优点">优点&lt;/h3>
&lt;ul>
&lt;li>可以简化原有的类&lt;/li>
&lt;li>可以去除相关类中重复的装饰逻辑&lt;/li>
&lt;/ul>
&lt;h2 id="代理模式proxy">代理模式（Proxy）&lt;/h2>
&lt;blockquote>
&lt;p>为其他对象提供一种代理以控制对这个对象的访问&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/structural/proxy.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="应用">应用&lt;/h3>
&lt;ul>
&lt;li>远程代理，也就是为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实&lt;/li>
&lt;li>虚拟代理，是根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象&lt;/li>
&lt;li>安全代理，用来控制真实对象访问时的权限&lt;/li>
&lt;li>智能指引，是指当调用真实的对象时，代理处理另外一些事&lt;/li>
&lt;/ul>
&lt;h2 id="外观模式facade">外观模式（Facade）&lt;/h2>
&lt;blockquote>
&lt;p>为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/structural/facade.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="应用-1">应用&lt;/h3>
&lt;ul>
&lt;li>设计初期阶段，层与层之间建立外观Facade&lt;/li>
&lt;li>开发阶段，增加外观Facade可以提供一个简单的接口&lt;/li>
&lt;li>维护遗留系统，提供清晰简单的接口&lt;/li>
&lt;/ul>
&lt;h2 id="适配器模式adapter">适配器模式（Adapter）&lt;/h2>
&lt;blockquote>
&lt;p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/structural/adapter.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="组合模式composite">组合模式（Composite）&lt;/h2>
&lt;blockquote>
&lt;p>将对象组合成树形结构以表示‘部分-整体’的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/structural/composite.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="应用-2">应用&lt;/h3>
&lt;ul>
&lt;li>需求中是体现部分与整体层次的结构时，希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象&lt;/li>
&lt;/ul>
&lt;h3 id="优点-1">优点&lt;/h3>
&lt;ul>
&lt;li>定义了包含基本对象和层次结构。基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合，这样不断地递归下去，客户代码中，任何用到基本对象的地方都可以使用组合对象了&lt;/li>
&lt;li>用户是不用关心到底是处理一个叶节点还是处理一个组合组件，也就用不着为定义组合而写一些选择判断语句了&lt;/li>
&lt;li>组合模式让客户可以一致地使用组合结构和单个对象&lt;/li>
&lt;/ul>
&lt;h2 id="桥接模式bridge">桥接模式（Bridge）&lt;/h2>
&lt;blockquote>
&lt;p>将抽象部分与它的实现部分分离，使它们都可以独立地变化&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/structural/bridge.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="享元模式flyweight">享元模式（Flyweight）&lt;/h2>
&lt;blockquote>
&lt;p>运用共享技术有效地支持大量细粒度的对象&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/structural/flyweight.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="应用-3">应用&lt;/h3>
&lt;ul>
&lt;li>如果一个应用程序使用了大量的对象，而大量的这些对象造成了很大的存储开销&lt;/li>
&lt;li>对象的大多数状态可以外部状态，如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象&lt;/li>
&lt;/ul></description></item><item><title>创建型模式</title><link>https://yzlc.github.io/post/read/designpattern/creational/</link><pubDate>Mon, 15 Jul 2019 11:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/designpattern/creational/</guid><description>&lt;h2 id="简单工厂模式">简单工厂模式&lt;/h2>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/creational/simpleFactory.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="优点">优点&lt;/h3>
&lt;ul>
&lt;li>工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖&lt;/li>
&lt;/ul>
&lt;h3 id="应用">应用&lt;/h3>
&lt;ul>
&lt;li>用反射去除switch或if，解除分支判断带来的耦合&lt;/li>
&lt;/ul>
&lt;h2 id="工厂方法模式factory-method">工厂方法模式（Factory Method）&lt;/h2>
&lt;blockquote>
&lt;p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/creational/factoryMethod.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="vs-简单工厂">vs 简单工厂&lt;/h3>
&lt;ul>
&lt;li>把简单工厂的内部逻辑判断移到了客户端代码来进行&lt;/li>
&lt;/ul>
&lt;h2 id="原型模式prototype">原型模式（Prototype）&lt;/h2>
&lt;blockquote>
&lt;p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/creational/prototype.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="优点-1">优点&lt;/h3>
&lt;ul>
&lt;li>一般在初始化的信息不发生变化的情况下，克隆是最好的办法。既隐藏了对象创建的细节，又对性能是大大的提高&lt;/li>
&lt;li>不用重新初始化对象，而是动态地获得对象运行时的状态&lt;/li>
&lt;/ul>
&lt;h2 id="建造者模式builder">建造者模式（Builder）&lt;/h2>
&lt;blockquote>
&lt;p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/creational/builder.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="应用-1">应用&lt;/h3>
&lt;ul>
&lt;li>创建复杂的对象，这些对象内部构建间的建造顺序通常是稳定的，但对象内部的构建通常面临着复杂的变化&lt;/li>
&lt;li>在当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时适用&lt;/li>
&lt;/ul>
&lt;h3 id="优点-2">优点&lt;/h3>
&lt;ul>
&lt;li>使得建造代码与表示代码分离，由于建造者隐藏了该产品是如何组装的，所以若需要改变一个产品的内部表示，只需要再定义一个具体的建造者就可以了&lt;/li>
&lt;/ul>
&lt;h2 id="抽象工厂模式abstractfactory">抽象工厂模式（AbstractFactory）&lt;/h2>
&lt;blockquote>
&lt;p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/creational/abstractFactory.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="优点-3">优点&lt;/h3>
&lt;ul>
&lt;li>易于交换产品系列，由于具体工厂类，在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，它只需要改变具体工厂即可使用不同的产品配置&lt;/li>
&lt;li>让具体的创建实例过程与客户端分离，客户端是通过它们的抽象接口操纵实例，产品的具体类名也被具体工厂的实现分离，不会出现在客户代码中&lt;/li>
&lt;/ul>
&lt;h3 id="缺点">缺点&lt;/h3>
&lt;ul>
&lt;li>增加产品改动太大&lt;/li>
&lt;/ul>
&lt;h3 id="改进">改进&lt;/h3>
&lt;ul>
&lt;li>简单工厂&lt;/li>
&lt;li>反射&lt;/li>
&lt;li>配置文件&lt;/li>
&lt;/ul>
&lt;h2 id="单例模式singleton">单例模式（Singleton）&lt;/h2>
&lt;blockquote>
&lt;p>保证一个类仅有一个实例，并提供一个访问它的全局访问点&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/creational/singleton.png"
loading="lazy"
>&lt;/p></description></item><item><title>设计模式</title><link>https://yzlc.github.io/post/read/designpattern/designpattern/</link><pubDate>Mon, 15 Jul 2019 10:32:28 +0800</pubDate><guid>https://yzlc.github.io/post/read/designpattern/designpattern/</guid><description>&lt;h2 id="面向对象">面向对象&lt;/h2>
&lt;ul>
&lt;li>可维护、可复用、可扩展、灵活性好&lt;/li>
&lt;li>通过封装、继承、多态把程序的耦合度降低，用设计模式使得程序更加的灵活，容易修改，并且易于复用&lt;/li>
&lt;/ul>
&lt;h2 id="类图">类图&lt;/h2>
&lt;p>&lt;img src="https://yzlc.github.io/images/read/designPattern/uml.png"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>依赖：弱使用关系（方法参数）&lt;/li>
&lt;li>关联：一个类‘知道’另一个类（类属性）&lt;/li>
&lt;li>聚合：弱‘拥有’关系，A对象可以包含B对象，但B对象不是A对象的一部分（类集合属性）&lt;/li>
&lt;li>组合：强‘拥有’关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样（构造方法实例化）&lt;/li>
&lt;/ul>
&lt;p>强弱程度：组合 &amp;gt; 聚合 &amp;gt; 关联 &amp;gt; 依赖&lt;/p>
&lt;h2 id="原则">原则&lt;/h2>
&lt;ul>
&lt;li>单一职责：就一个类而言，应该仅有一个引起它变化的原因&lt;/li>
&lt;li>开放-封闭：软件实体（类、模块、函数等等）应该可以扩展，但是不可修改&lt;/li>
&lt;li>依赖倒转：
&lt;ul>
&lt;li>高层模块不应该依赖低层模块。两个都应该依赖抽象&lt;/li>
&lt;li>抽象不应该依赖细节。细节应该依赖抽象&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>里氏代换：子类型必须能够替换掉它们的父类型&lt;/li>
&lt;li>迪米特法则：如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用&lt;/li>
&lt;li>合成/聚合复用原则：尽量使用合成/聚合，尽量不要使用类继承&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;h3 id="创建型模式">创建型模式&lt;/h3>
&lt;blockquote>
&lt;p>抽象工厂、建造者、工厂方法、原型、单例&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>隐藏了类的实例是如何被创建和放在一起，整个系统关于这些对象所知道的是由抽象类所定义的接口。这样，创建型模式在创建了什么、谁创建它、它是怎么被创建的，以及何时创建这些方面提供了很大的灵活性&lt;/li>
&lt;li>抽象了实例化的过程。帮助一个系统独立于如何创建、组合和表示它们的那些对象。创建型模式都会将关于该系统使用哪些具体的类的信息封装起来。允许客户用结构和功能差别很大的‘产品’对象配置一个系统。配置可以是静态的，即在编译时指定，也可以是动态的，就是运行时再指定&lt;/li>
&lt;li>通常设计应该从工厂方法开始，当需要更大的灵活性时，便向其他创建型模式演化&lt;/li>
&lt;/ul>
&lt;h3 id="结构型模式">结构型模式&lt;/h3>
&lt;blockquote>
&lt;p>怎样组装现有的类，设计它们的交互方式，从而达到实现一定的功能目的。适配器、桥接、组合、装饰、外观、享元、代理&lt;/p>
&lt;/blockquote>
&lt;h3 id="行为型模式">行为型模式&lt;/h3>
&lt;blockquote>
&lt;p>观察者、模板方法、命令、状态、职责链、解释器、中介者、访问者、策略、备忘录、迭代器&lt;/p>
&lt;/blockquote>
&lt;p>行为型模式涉及到算法和对象间职责的分配，行为模式描述了对象和类的模式，以及它们之间的通信模式，行为模式刻划了在程序运行时难以跟踪的复杂的控制流可分为行为类模式和行为对象模式&lt;/p></description></item><item><title>linux - shell</title><link>https://yzlc.github.io/post/read/linux/shell/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/linux/shell/</guid><description>&lt;h2 id="shell环境">shell环境&lt;/h2>
&lt;ul>
&lt;li>&lt;code>set&lt;/code> shell或环境变量&lt;/li>
&lt;li>&lt;code>printenv&lt;/code> 环境变量&lt;/li>
&lt;li>&lt;code>echo&lt;/code> 查看变量内容&lt;/li>
&lt;li>&lt;code>alias&lt;/code> 查看别名&lt;/li>
&lt;/ul>
&lt;h3 id="有趣的环境变量">有趣的环境变量&lt;/h3>
&lt;ul>
&lt;li>&lt;code>DISPLAY&lt;/code> 如果你正在运行图形界面环境，那么这个变量就是你显示器的名字。通常，它是 &amp;ldquo;:0&amp;rdquo;， 意思是由 X 产生的第一个显示器。&lt;/li>
&lt;li>&lt;code>EDITOR&lt;/code> 文本编辑器的名字。&lt;/li>
&lt;li>&lt;code>SHELL&lt;/code> shell 程序的名字。&lt;/li>
&lt;li>&lt;code>HOME&lt;/code> 用户家目录。&lt;/li>
&lt;li>&lt;code>LANG&lt;/code> 定义了字符集以及语言编码方式。&lt;/li>
&lt;li>&lt;code>OLD_PWD&lt;/code> 先前的工作目录。&lt;/li>
&lt;li>&lt;code>PAGER&lt;/code> 页输出程序的名字。这经常设置为/usr/bin/less。&lt;/li>
&lt;li>&lt;code>PATH&lt;/code> 由冒号分开的目录列表，当你输入可执行程序名后，会搜索这个目录列表。&lt;/li>
&lt;li>&lt;code>PS1&lt;/code> Prompt String 1. 这个定义了你的 shell 提示符的内容。随后我们可以看到，这个变量 内容可以全面地定制。&lt;/li>
&lt;li>&lt;code>PWD&lt;/code> 当前工作目录。&lt;/li>
&lt;li>&lt;code>TERM&lt;/code> 终端类型名。类 Unix 的系统支持许多终端协议；这个变量设置你的终端仿真器所用的协议。&lt;/li>
&lt;li>&lt;code>TZ&lt;/code> 指定你所在的时区。大多数类 Unix 的系统按照协调时间时 (UTC) 来维护计算机内部的时钟 ，然后应用一个由这个变量指定的偏差来显示本地时间。&lt;/li>
&lt;li>&lt;code>USER&lt;/code> 你的用户名&lt;/li>
&lt;/ul>
&lt;h3 id="登录-shell-会话的启动文件">登录 shell 会话的启动文件&lt;/h3>
&lt;ul>
&lt;li>&lt;code>/etc/profile&lt;/code> 应用于所有用户的全局配置脚本。&lt;/li>
&lt;li>&lt;code>~/.bash_profile&lt;/code> 用户个人的启动文件。可以用来扩展或重写全局配置脚本中的设置。&lt;/li>
&lt;li>&lt;code>~/.bash_login&lt;/code> 如果文件 ~/.bash_profile 没有找到，bash 会尝试读取这个脚本。&lt;/li>
&lt;li>&lt;code>~/.profile&lt;/code> 如果文件 ~/.bash_profile 或文件 ~/.bash_login 都没有找到，bash 会试图读取这个文件。 这是基于 Debian 发行版的默认设置，比方说 Ubuntu。&lt;/li>
&lt;/ul>
&lt;h3 id="非登录-shell-会话的启动文件">非登录 shell 会话的启动文件&lt;/h3>
&lt;ul>
&lt;li>&lt;code>/etc/bash.bashrc&lt;/code> 应用于所有用户的全局配置文件。&lt;/li>
&lt;li>&lt;code>~/.bashrc&lt;/code> 用户个人的启动文件。可以用来扩展或重写全局配置脚本中的设置。&lt;/li>
&lt;/ul>
&lt;h2 id="vi">vi&lt;/h2>
&lt;ul>
&lt;li>&lt;code>y&lt;/code> 复制&lt;/li>
&lt;li>&lt;code>x&lt;/code> 剪切字符&lt;/li>
&lt;li>&lt;code>d&lt;/code> 剪切范围&lt;/li>
&lt;li>&lt;code>p/P&lt;/code> 粘贴光标后/前&lt;/li>
&lt;li>&lt;code>J&lt;/code> 连接行&lt;/li>
&lt;/ul>
&lt;h3 id="光标移动按键">光标移动按键&lt;/h3>
&lt;ul>
&lt;li>&lt;code>l or 右箭头&lt;/code> 向右移动一个字符&lt;/li>
&lt;li>&lt;code>h or 左箭头&lt;/code> 向左移动一个字符&lt;/li>
&lt;li>&lt;code>j or 下箭头&lt;/code> 向下移动一行&lt;/li>
&lt;li>&lt;code>k or 上箭头&lt;/code> 向上移动一行&lt;/li>
&lt;li>&lt;code>0 (零按键)&lt;/code> 移动到当前行的行首。&lt;/li>
&lt;li>&lt;code>^&lt;/code> 移动到当前行的第一个非空字符。&lt;/li>
&lt;li>&lt;code>$&lt;/code> 移动到当前行的末尾。&lt;/li>
&lt;li>&lt;code>w&lt;/code> 移动到下一个单词或标点符号的开头。&lt;/li>
&lt;li>&lt;code>W&lt;/code> 移动到下一个单词的开头，忽略标点符号。&lt;/li>
&lt;li>&lt;code>b&lt;/code> 移动到上一个单词或标点符号的开头。&lt;/li>
&lt;li>&lt;code>B&lt;/code> 移动到上一个单词的开头，忽略标点符号。&lt;/li>
&lt;li>&lt;code>Ctrl-f or Page Down&lt;/code> 向下翻一页&lt;/li>
&lt;li>&lt;code>Ctrl-b or Page Up&lt;/code> 向上翻一页&lt;/li>
&lt;li>&lt;code>numberG&lt;/code> 移动到第 number 行。例如，1G 移动到文件的第一行。&lt;/li>
&lt;li>&lt;code>G&lt;/code> 移动到文件末尾。&lt;/li>
&lt;li>&lt;code>u&lt;/code> 撤销最后一次修改&lt;/li>
&lt;/ul>
&lt;h3 id="追加">追加&lt;/h3>
&lt;ul>
&lt;li>&lt;code>A&lt;/code> 在行尾添加文本&lt;/li>
&lt;li>&lt;code>o&lt;/code> 当前行的下方打开一行。&lt;/li>
&lt;li>&lt;code>O&lt;/code> 当前行的上方打开一行。&lt;/li>
&lt;/ul>
&lt;h3 id="查找和替换">查找和替换&lt;/h3>
&lt;ul>
&lt;li>&lt;code>f&lt;/code> 搜索行,&lt;code>;&lt;/code>重复搜索&lt;/li>
&lt;/ul>
&lt;h3 id="全局替换">全局替换&lt;/h3>
&lt;blockquote>
&lt;p>:%s/Line/line/g&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>:&lt;/code> 冒号字符运行一个 ex 命令。&lt;/li>
&lt;li>&lt;code>%&lt;/code> 指定要操作的行数。% 是一个快捷方式，表示从第一行到最后一行。另外，操作范围也 可以用 1,5 来代替（因为我们的文件只有5行文本），或者用 1,$ 来代替，意思是 “ 从第一行到文件的最后一行。” 如果省略了文本行的范围，那么操作只对当前行生效。&lt;/li>
&lt;li>&lt;code>s&lt;/code> 指定操作。在这种情况下是，替换（查找与替代）。&lt;/li>
&lt;li>&lt;code>/Line/line&lt;/code> 查找类型与替代文本。&lt;/li>
&lt;li>&lt;code>g&lt;/code> 这是“全局”的意思，意味着对文本行中所有匹配的字符串执行查找和替换操作。如果省略 g，则 只替换每个文本行中第一个匹配的字符串。&lt;/li>
&lt;/ul>
&lt;h3 id="编辑多个文件">编辑多个文件&lt;/h3>
&lt;blockquote>
&lt;p>vi file1 file2 file3&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>:w fileName&lt;/code> 另存为&lt;/li>
&lt;li>&lt;code>:n/N&lt;/code> 下/上一个&lt;/li>
&lt;li>&lt;code>:buffers&lt;/code> 显示文件列表&lt;/li>
&lt;li>&lt;code>:buffer 2&lt;/code> 切换&lt;/li>
&lt;li>&lt;code>:e file.txt&lt;/code> 加入文件&lt;/li>
&lt;li>&lt;code>:r file.txt&lt;/code> 插入文件&lt;/li>
&lt;li>&lt;code>ZZ&lt;/code> 保存退出&lt;/li>
&lt;/ul>
&lt;h2 id="shell提示符">shell提示符&lt;/h2>
&lt;ul>
&lt;li>&lt;code>$PS1&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="提示符中用到的转义字符">提示符中用到的转义字符&lt;/h3>
&lt;ul>
&lt;li>&lt;code>\a&lt;/code> 以 ASCII 格式编码的铃声 . 当遇到这个转义序列时，计算机会发出嗡嗡的响声。&lt;/li>
&lt;li>&lt;code>\d&lt;/code> 以日，月，天格式来表示当前日期。例如，“Mon May 26.”&lt;/li>
&lt;li>&lt;code>\h&lt;/code> 本地机的主机名，但不带末尾的域名。&lt;/li>
&lt;li>&lt;code>\H&lt;/code> 完整的主机名。&lt;/li>
&lt;li>&lt;code>\j&lt;/code> 运行在当前 shell 会话中的工作数。&lt;/li>
&lt;li>&lt;code>\l&lt;/code> 当前终端设备名。&lt;/li>
&lt;li>&lt;code>\n&lt;/code> 一个换行符。&lt;/li>
&lt;li>&lt;code>\r&lt;/code> 一个回车符。&lt;/li>
&lt;li>&lt;code>\s&lt;/code> shell 程序名。&lt;/li>
&lt;li>&lt;code>\t&lt;/code> 以24小时制，hours:minutes:seconds 的格式表示当前时间.&lt;/li>
&lt;li>&lt;code>\T&lt;/code> 以12小时制表示当前时间。&lt;/li>
&lt;li>&lt;code>\@&lt;/code> 以12小时制，AM/PM 格式来表示当前时间。&lt;/li>
&lt;li>&lt;code>\A&lt;/code> 以24小时制，hours:minutes 格式表示当前时间。&lt;/li>
&lt;li>&lt;code>\u&lt;/code> 当前用户名。&lt;/li>
&lt;li>&lt;code>\v&lt;/code> shell 程序的版本号。&lt;/li>
&lt;li>&lt;code>\V&lt;/code> Version and release numbers of the shell.&lt;/li>
&lt;li>&lt;code>\w&lt;/code> 当前工作目录名。&lt;/li>
&lt;li>&lt;code>\W&lt;/code> 当前工作目录名的最后部分。&lt;/li>
&lt;li>&lt;code>\!&lt;/code> 当前命令的历史号。&lt;/li>
&lt;li>&lt;code>\#&lt;/code> 当前 shell 会话中的命令数。&lt;/li>
&lt;li>&lt;code>\$&lt;/code> 这会显示一个&amp;quot;$&amp;ldquo;字符，除非你拥有超级用户权限。在那种情况下， 它会显示一个&amp;rdquo;#&amp;ldquo;字符。&lt;/li>
&lt;li>&lt;code>\[&lt;/code> 标志着一系列一个或多个非打印字符的开始。这被用来嵌入非打印 的控制字符，这些字符以某种方式来操作终端仿真器，比方说移动光标或者是更改文本颜色。&lt;/li>
&lt;li>&lt;code>\]&lt;/code> 标志着非打印字符序列结束。&lt;/li>
&lt;/ul></description></item><item><title>linux - 键盘高级操作技巧</title><link>https://yzlc.github.io/post/read/linux/key/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/linux/key/</guid><description>&lt;h2 id="移动光标">移动光标&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Ctrl-a&lt;/code> 移动光标到行首&lt;/li>
&lt;li>&lt;code>Ctrl-e&lt;/code> 移动光标到行尾&lt;/li>
&lt;li>&lt;code>Ctrl-f&lt;/code> 光标前移一个字符；和右箭头作用一样&lt;/li>
&lt;li>&lt;code>Ctrl-b&lt;/code> 光标后移一个字符；和左箭头作用一样&lt;/li>
&lt;li>&lt;code>Alt-f&lt;/code> 光标前移一个字&lt;/li>
&lt;li>&lt;code>Alt-b&lt;/code> 光标后移一个字&lt;/li>
&lt;li>&lt;code>Ctrl-l&lt;/code> 清空屏幕，移动光标到左上角。clear 命令完成同样的工作&lt;/li>
&lt;/ul>
&lt;h2 id="修改文本">修改文本&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Ctrl-d&lt;/code> 删除光标位置的字符&lt;/li>
&lt;li>&lt;code>Ctrl-t&lt;/code> 光标位置的字符和光标前面的字符互换位置&lt;/li>
&lt;li>&lt;code>Alt-t&lt;/code> 光标位置的字和其前面的字互换位置&lt;/li>
&lt;li>&lt;code>Alt-l&lt;/code> 把从光标位置到字尾的字符转换成小写字母&lt;/li>
&lt;li>&lt;code>Alt-u&lt;/code> 把从光标位置到字尾的字符转换成大写字母&lt;/li>
&lt;/ul>
&lt;h2 id="剪切和粘贴文本">剪切和粘贴文本&lt;/h2>
&lt;ul>
&lt;li>鼠标左键选中，中键粘贴&lt;/li>
&lt;li>&lt;code>Ctrl-k&lt;/code> 剪切从光标位置到行尾的文本&lt;/li>
&lt;li>&lt;code>Ctrl-u&lt;/code> 剪切从光标位置到行首的文本&lt;/li>
&lt;li>&lt;code>Alt-d&lt;/code> 剪切从光标位置到词尾的文本&lt;/li>
&lt;li>&lt;code>Alt-Backspace&lt;/code> 剪切从光标位置到词头的文本。如果光标在一个单词的开头，剪切前一个单词&lt;/li>
&lt;li>&lt;code>Ctrl-y&lt;/code> 把剪切环中的文本粘贴到光标位置&lt;/li>
&lt;/ul>
&lt;h2 id="历史命令">历史命令&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>history&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>Ctrl-r&lt;/code> 反向增量搜索。从当前命令行开始，向上增量搜索&lt;/li>
&lt;li>&lt;code>Alt-p&lt;/code> 反向搜索，非增量搜索。（输入要查找的字符串，按下 Enter来执行搜索）&lt;/li>
&lt;li>&lt;code>Alt-n&lt;/code> 向前搜索，非增量&lt;/li>
&lt;li>&lt;code>Ctrl-o&lt;/code> 执行历史列表中的当前项，并移到下一个。如果你想要执行历史列表中一系列的命令，这很方便&lt;/li>
&lt;/ul></description></item><item><title>linux - 进程</title><link>https://yzlc.github.io/post/read/linux/process/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/linux/process/</guid><description>&lt;h2 id="ps">ps&lt;/h2>
&lt;ul>
&lt;li>&lt;code>ps -ef|grep xx&lt;/code>&lt;/li>
&lt;li>&lt;code>ps x&lt;/code> 所有进程&lt;/li>
&lt;li>&lt;code>ps aux&lt;/code> 用户进程
&lt;ul>
&lt;li>VSZ 虚拟内存大小&lt;/li>
&lt;li>RSS 进程占用的物理内存的大小，以千字节为单位。&lt;/li>
&lt;li>START 进程启动的时间。若它的值超过24小时，则用天表示。&lt;/li>
&lt;li>STAT - 进程状态
&lt;ul>
&lt;li>&lt;code>R&lt;/code> 运行中&lt;/li>
&lt;li>&lt;code>S&lt;/code> 正在睡眠。等待一个事件， 比如一个按键&lt;/li>
&lt;li>&lt;code>D&lt;/code> 不可中断睡眠。等待 I/O&lt;/li>
&lt;li>&lt;code>T&lt;/code> 已停止&lt;/li>
&lt;li>&lt;code>Z&lt;/code> 一个死进程或“僵尸”进程&lt;/li>
&lt;li>&lt;code>&amp;lt;&lt;/code> 一个高优先级进程。属性叫做 niceness。是不好的（less nice），占用较多CPU时间&lt;/li>
&lt;li>&lt;code>N&lt;/code> 低优先级进程。“nice”进程,只有当其它高优先级进程被服务了之后，才会得到处理器时间。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="top">top&lt;/h2>
&lt;blockquote>
&lt;p>3s刷新,cpu使用率排序&lt;/p>
&lt;/blockquote>
&lt;h4 id="命令信息字段">命令信息字段&lt;/h4>
&lt;blockquote>
&lt;p>top - 14:59:20 up 6:30, 2 users, load average: 0.07, 0.02, 0.00&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>top
&lt;ul>
&lt;li>up 运行时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>users 有两个用户登录系统
&lt;ul>
&lt;li>load average: 加载平均值是指，等待运行的进程数目，也就是说，处于可以运行状态并共享 CPU 的进程个数。 这里展示了三个数值，每个数值对应不同的时间段。第一个是最后60秒的平均值， 下一个是前5分钟的平均值，最后一个是前15分钟的平均值。若平均值低于1.0，则指示计算机工作不忙碌。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Tasks: 总结了进程数目和这些进程的各种状态。&lt;/li>
&lt;li>Cpu(s): 这一行描述了 CPU 正在进行的活动的特性。
&lt;ul>
&lt;li>0.7%us 0.7% 的 CPU 被用于用户进程。这意味着进程在内核之外。&lt;/li>
&lt;li>1.0%sy 1.0%的 CPU 时间被用于系统（内核）进程。&lt;/li>
&lt;li>0.0%ni 0.0%的 CPU 时间被用于&amp;quot;nice&amp;quot;（低优先级）进程。&lt;/li>
&lt;li>98.3%id 98.3%的 CPU 时间是空闲的。&lt;/li>
&lt;li>0.0%wa 0.0%的 CPU 时间来等待 I/O。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="控制进程">控制进程&lt;/h2>
&lt;ul>
&lt;li>&lt;code>&amp;amp;&lt;/code> 后台运行&lt;/li>
&lt;/ul>
&lt;h2 id="kill">kill&lt;/h2>
&lt;blockquote>
&lt;p>kill [-signal] PID&amp;hellip;&lt;/p>
&lt;/blockquote></description></item><item><title>linux - 权限</title><link>https://yzlc.github.io/post/read/linux/auth/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/linux/auth/</guid><description>&lt;h2 id="拥有者组成员和其他人">拥有者、组成员和其他人&lt;/h2>
&lt;ul>
&lt;li>&lt;code>id&lt;/code> 查看身份&lt;/li>
&lt;/ul>
&lt;h2 id="文件类型">文件类型&lt;/h2>
&lt;ul>
&lt;li>&lt;code>-&lt;/code> 文件&lt;/li>
&lt;li>&lt;code>d&lt;/code> 目录&lt;/li>
&lt;li>&lt;code>l&lt;/code> 符号链接。注意对于符号链接文件，剩余的文件属性总是&lt;code>rwxrwxrwx&lt;/code>，而且都是 虚拟值。真正的文件属性是指符号链接所指向的文件的属性&lt;/li>
&lt;li>&lt;code>c&lt;/code> 字符设备文件。这种文件类型是指按照字节流来处理数据的设备。 比如说终端机或者调制解调器&lt;/li>
&lt;li>&lt;code>b&lt;/code> 块设备文件。这种文件类型是指按照数据块来处理数据的设备，例如一个硬盘或者 CD-ROM 盘&lt;/li>
&lt;/ul>
&lt;h2 id="权限属性">权限属性&lt;/h2>
&lt;ul>
&lt;li>&lt;code>r&lt;/code> 允许打开并读取文件内容。 允许列出目录中的内容，前提是目录必须设置了可执行属性（x）。&lt;/li>
&lt;li>&lt;code>w&lt;/code> 允许写入文件内容或截断文件。但是不允许对文件进行重命名或删除，重命名或删除是由目录的属性决定的。 允许在目录下新建、删除或重命名文件，前提是目录必须设置了可执行属性（x）。&lt;/li>
&lt;li>&lt;code>x&lt;/code> 允许将文件作为程序来执行，使用脚本语言编写的程序必须设置为可读才能被执行。 允许进入目录，例如：cd directory 。&lt;/li>
&lt;/ul>
&lt;h2 id="chmod">chmod&lt;/h2>
&lt;blockquote>
&lt;p>更改文件模式&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>chmod 755 *.sh&lt;/code>&lt;/li>
&lt;li>八进制数字表示法 rwx 421&lt;/li>
&lt;li>命令符号表示法
&lt;ul>
&lt;li>&lt;code>u&lt;/code> &amp;ldquo;user&amp;quot;的简写，意思是文件或目录的所有者&lt;/li>
&lt;li>&lt;code>g&lt;/code> 用户组&lt;/li>
&lt;li>&lt;code>o&lt;/code> &amp;ldquo;others&amp;quot;的简写，意思是其他所有的人&lt;/li>
&lt;li>&lt;code>a&lt;/code> &amp;ldquo;all&amp;quot;的简写(默认值)，是&lt;code>u&lt;/code>, &lt;code>g&lt;/code>和&lt;code>o&lt;/code>三者的联合&lt;/li>
&lt;li>&lt;code>+/-/=&lt;/code> 加/删/指定&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>umask&lt;/code> 掩码，设置默认权限&lt;/li>
&lt;/ul>
&lt;h2 id="更改身份">更改身份&lt;/h2>
&lt;ul>
&lt;li>&lt;code>su&lt;/code> 以其他用户身份和组 ID 运行一个 shell&lt;/li>
&lt;li>&lt;code>sudo&lt;/code> 以另一个用户身份执行命令,使用&lt;code>-l&lt;/code>选项，列出所有权限&lt;/li>
&lt;/ul></description></item><item><title>linux - 软件包管理</title><link>https://yzlc.github.io/post/read/linux/pkgmgr/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/linux/pkgmgr/</guid><description>&lt;h3 id="打包系统">打包系统&lt;/h3>
&lt;ul>
&lt;li>Debian Style (.deb) Debian, Ubuntu, Xandros, Linspire&lt;/li>
&lt;li>Red Hat Style (.rpm) Fedora, CentOS, Red Hat Enterprise Linux, OpenSUSE, Mandriva, PCLinuxOS&lt;/li>
&lt;/ul>
&lt;h3 id="包管理工具">包管理工具&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>发行版&lt;/th>
&lt;th>底层工具&lt;/th>
&lt;th>上层工具&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Debian-Style&lt;/td>
&lt;td>dpkg&lt;/td>
&lt;td>apt-get, aptitude&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Fedora, Red Hat Enterprise Linux, CentOS&lt;/td>
&lt;td>rpm&lt;/td>
&lt;td>yum&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>底层工具用来处理这些任务，比方说安装和删除软件包文件&lt;/li>
&lt;li>上层工具，完成元数据搜索和依赖解析&lt;/li>
&lt;/ul>
&lt;h3 id="查找软件">查找软件&lt;/h3>
&lt;ul>
&lt;li>Debian &lt;code>apt-get update; apt-cache search search_string&lt;/code>&lt;/li>
&lt;li>Red Hat &lt;code>yum search search_string&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="安装软件资源库">安装软件（资源库）&lt;/h3>
&lt;ul>
&lt;li>Debian &lt;code>apt-get update; apt-get install package_name&lt;/code>&lt;/li>
&lt;li>Red Hat &lt;code>yum install package_name&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="安装软件软件包">安装软件（软件包）&lt;/h3>
&lt;ul>
&lt;li>Debian &lt;code>dpkg --install package_file&lt;/code>&lt;/li>
&lt;li>Red Hat &lt;code>rpm -i package_file&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="卸载软件">卸载软件&lt;/h3>
&lt;ul>
&lt;li>Debian &lt;code>apt-get remove package_name&lt;/code>&lt;/li>
&lt;li>Red Hat &lt;code>yum erase package_name&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="更新软件资源库">更新软件（资源库）&lt;/h3>
&lt;ul>
&lt;li>Debian &lt;code>apt-get update; apt-get upgrade&lt;/code>&lt;/li>
&lt;li>Red Hat &lt;code>yum update&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="更新软件软件包">更新软件（软件包）&lt;/h3>
&lt;ul>
&lt;li>Debian &lt;code>dpkg --install package_file&lt;/code>&lt;/li>
&lt;li>Red Hat &lt;code>rpm -U package_file&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="列出安装的软件包">列出安装的软件包&lt;/h3>
&lt;ul>
&lt;li>Debian &lt;code>dpkg --list&lt;/code>&lt;/li>
&lt;li>Red Hat &lt;code>rpm -qa&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="确定是否安装了一个软件包">确定是否安装了一个软件包&lt;/h3>
&lt;ul>
&lt;li>Debian &lt;code>dpkg --status package_name&lt;/code>&lt;/li>
&lt;li>Red Hat &lt;code>rpm -q package_name&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="显示所安装软件包的信息">显示所安装软件包的信息&lt;/h3>
&lt;ul>
&lt;li>Debian &lt;code>apt-cache show package_name&lt;/code>&lt;/li>
&lt;li>Red Hat &lt;code>yum info package_name&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="查找安装了某个文件的软件包">查找安装了某个文件的软件包&lt;/h3>
&lt;ul>
&lt;li>Debian &lt;code>dpkg --search file_name&lt;/code>&lt;/li>
&lt;li>Red Hat &lt;code>rpm -qf file_name&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>linux - 使用命令</title><link>https://yzlc.github.io/post/read/linux/cmd/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/linux/cmd/</guid><description>&lt;h2 id="使用命令">使用命令&lt;/h2>
&lt;ul>
&lt;li>&lt;code>type&lt;/code> 显示命令的类型&lt;/li>
&lt;li>&lt;code>which&lt;/code> 显示一个可执行程序的位置&lt;/li>
&lt;li>&lt;code>help&lt;/code> 得到 shell 内建命令的帮助文档&lt;/li>
&lt;li>&lt;code>--help&lt;/code> 显示用法信息&lt;/li>
&lt;li>&lt;code>apropos（man -k）&lt;/code> 显示适当的命令&lt;/li>
&lt;li>&lt;code>whatis&lt;/code> 显示简洁的命令说明&lt;/li>
&lt;li>&lt;code>info&lt;/code> 显示程序Info条目&lt;/li>
&lt;li>&lt;code>alias&lt;/code> 创建自己的命令（多个命令&lt;code>;&lt;/code>分开）&lt;/li>
&lt;/ul>
&lt;h2 id="man">man&lt;/h2>
&lt;blockquote>
&lt;p>显示程序手册页&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>用户命令&lt;/li>
&lt;li>程序接口内核系统调用&lt;/li>
&lt;li>C 库函数程序接口&lt;/li>
&lt;li>特殊文件，比如说设备结点和驱动程序&lt;/li>
&lt;li>文件格式&lt;/li>
&lt;li>游戏娱乐，如屏幕保护程序&lt;/li>
&lt;li>其他方面&lt;/li>
&lt;li>系统管理员命令&lt;/li>
&lt;/ol>
&lt;h2 id="重定向">重定向&lt;/h2>
&lt;ul>
&lt;li>&lt;code>&amp;gt;&lt;/code> 输出（&lt;code>&amp;gt;&amp;gt;&lt;/code> 追加）到文件&lt;/li>
&lt;li>&lt;code>2&amp;gt;&lt;/code> 错误输出到文件&lt;/li>
&lt;li>&lt;code>&amp;amp;&amp;gt;&lt;/code> 重定向标准输出和错误到同一个文件（旧版本：&lt;code>&amp;gt;file.txt 2&amp;gt;&amp;amp;1&lt;/code>）&lt;/li>
&lt;li>&lt;code>/dev/null&lt;/code> 处理不需要的输出&lt;/li>
&lt;li>&lt;code>cat&lt;/code> 连接文件&lt;/li>
&lt;li>&lt;code>|&lt;/code> 管道线、过滤器&lt;/li>
&lt;li>&lt;code>uniq&lt;/code> 报道或忽略重复行&lt;/li>
&lt;li>&lt;code>wc&lt;/code> 打印行数、字数和字节数&lt;/li>
&lt;li>&lt;code>grep&lt;/code> 打印匹配行(&lt;code>-i&lt;/code>忽略大小写，&lt;code>-v&lt;/code>不匹配)&lt;/li>
&lt;li>&lt;code>head/tail&lt;/code> 打印文件开头部分/结尾部分(&lt;code>-n&lt;/code>指定，默认10，&lt;code>-f&lt;/code>实时浏览)&lt;/li>
&lt;li>&lt;code>tee&lt;/code> 从 Stdin 读取数据，并同时输出到 Stdout 和文件&lt;/li>
&lt;/ul>
&lt;h2 id="从shell眼中看世界">从shell眼中看世界&lt;/h2>
&lt;ul>
&lt;li>&lt;code>echo&lt;/code> 显示一行文本&lt;/li>
&lt;li>&lt;code>echo *&lt;/code> 字符展开&lt;/li>
&lt;li>&lt;code>echo D*&lt;/code> 路径名展开&lt;/li>
&lt;li>&lt;code>echo ~&lt;/code> 波浪线展开&lt;/li>
&lt;li>&lt;code>echo $((2 + 2))&lt;/code> 算术表达式展开（取幂**）&lt;/li>
&lt;li>&lt;code>echo {Z..A}&lt;/code> 花括号展开&lt;/li>
&lt;li>&lt;code>echo $USER&lt;/code> 参数展开（printenv|less查看变量列表）&lt;/li>
&lt;li>&lt;code>file $(ls /usr/bin/- | grep zip)&lt;/code> 命令替换（旧版本：ls -l &lt;code>which cp&lt;/code>）&lt;/li>
&lt;li>&lt;code>echo this a&lt;/code> 引用&lt;/li>
&lt;li>&lt;code>ls -l &amp;quot;two words.txt&amp;quot;&lt;/code> &lt;code>&amp;quot;&amp;quot;&lt;/code>，&lt;code>$&lt;/code>，&lt;code>\&lt;/code>，`外的特殊字符失效&lt;/li>
&lt;li>&lt;code>echo '$USER'&lt;/code> 禁止所有展开&lt;/li>
&lt;li>&lt;code>echo \$5.00&lt;/code> 转义字符&lt;/li>
&lt;/ul></description></item><item><title>linux - 探究操作系统</title><link>https://yzlc.github.io/post/read/linux/filedir/</link><pubDate>Sat, 01 Jun 2019 10:32:33 +0800</pubDate><guid>https://yzlc.github.io/post/read/linux/filedir/</guid><description>&lt;h2 id="less">less&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Page UP or b&lt;/code> 向上翻页&lt;/li>
&lt;li>&lt;code>Page Down or space&lt;/code> 向下翻页&lt;/li>
&lt;li>&lt;code>UP Arrow&lt;/code> 向上翻一行&lt;/li>
&lt;li>&lt;code>Down Arrow&lt;/code> 向下翻一行&lt;/li>
&lt;li>&lt;code>G&lt;/code> 移动到最后&lt;/li>
&lt;li>&lt;code>1G or g&lt;/code> 移动到开头&lt;/li>
&lt;li>&lt;code>/characters&lt;/code> 向前查找&lt;/li>
&lt;li>&lt;code>n&lt;/code> 向前查找下一个出现的字符串，这个字符串是之前所指定查找的&lt;/li>
&lt;li>&lt;code>h&lt;/code> 帮助&lt;/li>
&lt;/ul>
&lt;h2 id="系统目录">系统目录&lt;/h2>
&lt;ul>
&lt;li>&lt;code>/bin&lt;/code> 启动必须的二进制程序&lt;/li>
&lt;li>&lt;code>/boot&lt;/code> Linux内核、初始RAM磁盘映像（用于启动时所需的驱动）和 启动加载程序
&lt;ul>
&lt;li>有趣的文件：&lt;/li>
&lt;li>&lt;code>/boot/grub/grub.conf or menu.lst&lt;/code> 启动程序&lt;/li>
&lt;li>&lt;code>/boot/vmlinuz&lt;/code> 内核&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>/dev&lt;/code> 设备&lt;/li>
&lt;li>&lt;code>/etc&lt;/code> 系统层面配置文件。也包含一系列的 shell 脚本，在系统启动时，这些脚本会开启每个系统服务。这个目录中的任何文件应该是可读的文本文件。
&lt;ul>
&lt;li>有趣的文件：&lt;/li>
&lt;li>&lt;code>/etc/crontab&lt;/code> 自动运行的任务&lt;/li>
&lt;li>&lt;code>/etc/fstab&lt;/code> 存储设备的列表和他们的挂载点&lt;/li>
&lt;li>&lt;code>/etc/passwd&lt;/code>，用户帐号列表&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>/home&lt;/code> 给每个用户分配一个目录。普通用户只能在自己的目录下写文件&lt;/li>
&lt;li>&lt;code>/lib&lt;/code> 核心系统程序所使用的共享库文件&lt;/li>
&lt;li>&lt;code>/lost+found&lt;/code> 每个使用 Linux 文件系统的格式化分区或设备，例如 ext3文件系统， 都会有这个目录。当部分恢复一个损坏的文件系统时，会用到这个目录。这个目录应该是空的，除非文件系统 真正的损坏了。&lt;/li>
&lt;li>&lt;code>/media&lt;/code> 现在的Linux系统中，包含可移动介质的挂载点， 例如 USB 驱动器，CD-ROMs 等等。这些介质连接到计算机之后，会自动地挂载到这个目录结点下。&lt;/li>
&lt;li>&lt;code>/mnt&lt;/code> 在早些的Linux系统中，包含可移动介质的挂载点&lt;/li>
&lt;li>&lt;code>/opt&lt;/code> 用来安装“可选的”软件。这个主要用来存储可能 安装在系统中的商业软件产品。&lt;/li>
&lt;li>&lt;code>/proc&lt;/code> 从存储在硬盘上的文件的意义上说，它不是真正的文件系统。一个由 Linux 内核维护的虚拟文件系统。它所包含的文件是内核的窥视孔。这些文件是可读的， 它们会告诉你内核是怎样监管计算机的。&lt;/li>
&lt;li>&lt;code>/root&lt;/code> root帐户的家目录&lt;/li>
&lt;li>&lt;code>/sbin&lt;/code> 包含“系统”二进制文件。完成重大系统任务的程序，为超级用户保留&lt;/li>
&lt;li>&lt;code>/tmp&lt;/code> 用来存储由各种程序创建的临时文件的地方。一些配置导致系统每次重新启动时，都会清空这个目录。&lt;/li>
&lt;li>&lt;code>/usr&lt;/code> 可能是最大的一个目录。它包含普通用户所需要的所有程序和文件。&lt;/li>
&lt;li>&lt;code>/usr/bin&lt;/code> 包含系统安装的可执行程序。通常，这个目录会包含许多程序。&lt;/li>
&lt;li>&lt;code>/usr/lib&lt;/code> 包含由&lt;code>/usr/bin&lt;/code>目录中的程序所用的共享库。&lt;/li>
&lt;li>&lt;code>/usr/local&lt;/code> 非系统发行版自带程序的安装目录。 通常，由源码编译的程序会安装在/usr/local/bin 目录下。新安装的 Linux 系统中会存在这个目录， 并且在管理员安装程序之前，这个目录是空的。&lt;/li>
&lt;li>&lt;code>/usr/sbin&lt;/code> 系统管理程序&lt;/li>
&lt;li>&lt;code>/usr/share&lt;/code> 包含许多由/usr/bin 目录中的程序使用的共享数据。 其中包括像默认的配置文件、图标、桌面背景、音频文件等等。&lt;/li>
&lt;li>&lt;code>/usr/share/doc&lt;/code> 大多数安装在系统中的软件包会包含一些文档。可以找到按照软件包分类的文档。&lt;/li>
&lt;li>&lt;code>/var&lt;/code> 除了/tmp 和/home 目录之外，相对来说，目前我们看到的目录是静态的，这是说，它们的内容不会改变。/var 目录存放的是动态文件。各种数据库，假脱机文件， 用户邮件等等，都位于在这里。&lt;/li>
&lt;li>&lt;code>/var/log&lt;/code> 日志文件、各种系统活动的记录。这些文件非常重要，应该时时监测它们。其中最重要的一个文件是/var/log/messages。注意，为了系统安全，在一些系统中，你必须是超级用户才能查看这些日志文件。&lt;/li>
&lt;/ul>
&lt;h2 id="cp">cp&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>cp item1 item2&lt;/code> 复制单个 文件/目录 到 文件（自动创建）/目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>cp item... directory&lt;/code> 复制多个项目(文件/目录) 到 目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-a, --archive&lt;/code> 复制文件和目录，以及它们的属性，包括所有权和权限。通常，副本具有用户所操作文件的默认属性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-i, --interactive&lt;/code> 在重写已存在文件之前，提示用户确认。如果这个选项不指定，cp命令会默认重写文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-r, --recursive&lt;/code> 递归地复制目录及目录中的内容（自动创建）。当复制目录时，需要这个选项（或者-a 选项）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-u, --update&lt;/code> 当把文件从一个目录复制到另一个目录时，仅复制目标目录中不存在的文件，或者是文件内容新于目标目录中已经存在的文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-v, --verbose&lt;/code> 详实的操作信息&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="mv">mv&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>mv item1 item2&lt;/code> 把文件/目录移动或重命名&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mv item... directory&lt;/code> 把一个或多个条目从一个目录移动到另一个目录中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-i --interactive&lt;/code> 提示用户确认(不指定默认重写)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-u --update&lt;/code> 只是移动不存在的文件， 或者文件内容新于目标目录相对应文件的内容&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-v --verbose&lt;/code> 当操作 mv 命令时，显示详实的操作信息&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="通配符">通配符&lt;/h2>
&lt;ul>
&lt;li>&lt;code>*&lt;/code> 匹配任意多个字符（包括零个或一个）&lt;/li>
&lt;li>&lt;code>?&lt;/code> 匹配任意一个字符（不包括零个）&lt;/li>
&lt;li>&lt;code>[characters]&lt;/code> 匹配任意一个属于字符集中的字符&lt;/li>
&lt;li>&lt;code>[!characters]&lt;/code> 匹配任意一个不是字符集中的字符&lt;/li>
&lt;li>&lt;code>[[:class:]]&lt;/code> 匹配任意一个属于指定字符类中的字符
&lt;ul>
&lt;li>普遍的字符类：&lt;/li>
&lt;li>&lt;code>[:alnum:]&lt;/code> 匹配任意一个字母或数字&lt;/li>
&lt;li>&lt;code>[:alpha:]&lt;/code> 匹配任意一个字母&lt;/li>
&lt;li>&lt;code>[:digit:]&lt;/code> 匹配任意一个数字&lt;/li>
&lt;li>&lt;code>[:lower:]&lt;/code> 匹配任意一个小写字母&lt;/li>
&lt;li>&lt;code>[:upper:]&lt;/code> 匹配任意一个大写字母&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="rm">rm&lt;/h2>
&lt;ul>
&lt;li>&lt;code>-i, --interactive&lt;/code> 提示(默认不提示)&lt;/li>
&lt;li>&lt;code>-r, --recursive&lt;/code> 递归删除(目录)&lt;/li>
&lt;li>&lt;code>-f, --force&lt;/code> 不提示(覆盖&lt;code>-i&lt;/code>)&lt;/li>
&lt;li>&lt;code>-v, --verbose&lt;/code> 详实的操作信息&lt;/li>
&lt;/ul>
&lt;h2 id="ln">ln&lt;/h2>
&lt;blockquote>
&lt;p>创建链接&lt;/p>
&lt;/blockquote>
&lt;h3 id="硬链接">硬链接&lt;/h3>
&lt;blockquote>
&lt;p>ln file link&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>不能关联所在文件系统之外的文件&lt;/li>
&lt;li>不能关联目录&lt;/li>
&lt;/ul>
&lt;h3 id="符号链接">符号链接&lt;/h3>
&lt;blockquote>
&lt;p>ln -s item link&lt;/p>
&lt;/blockquote></description></item></channel></rss>